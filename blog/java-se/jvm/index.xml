<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>蚂蚁背大象 – JVM</title><link>/blog/java-se/jvm/</link><description>Recent content in JVM on 蚂蚁背大象</description><generator>Hugo -- gohugo.io</generator><atom:link href="/blog/java-se/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: 一个Java对象占用多大内存</title><link>/blog/java-se/jvm/java-object-size/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/java-object-size/</guid><description>
&lt;p>平时开发中很少会有人去想：一个Java对象占用多大内存，今天就来探究一下到底我们平时创建的对象占用了多大的内存。在Java中对象分为两种：基本类型、引用类型。我们从这两种类型入手来分析。&lt;/p>
&lt;blockquote>
&lt;p>Tips: JDK版本为17&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-基本类型">1. 基本类型&lt;/h3>
&lt;p>Java中有8种基本类型，占用的内存空间如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>占用空间(byte)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>boolean&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Java中的基本类型数据是在栈上面分配还是栈上面?&lt;/strong>&lt;/p>
&lt;p>回答上面一个问题之前首先要明确这个变量定义在哪？平时定义基本变量有三种情况：&lt;/p>
&lt;ol>
&lt;li>定义类的静态变量&lt;/li>
&lt;li>定义类的成员变量&lt;/li>
&lt;li>定义方法体内变量&lt;/li>
&lt;/ol>
&lt;p>上面三种情况分配在不同的位置：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量位置&lt;/th>
&lt;th>分配位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>定义类的静态变量&lt;/td>
&lt;td>堆上分配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>定义类的成员变量&lt;/td>
&lt;td>堆上分配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>定义方法体内变量&lt;/td>
&lt;td>栈上分配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Tips: jdk17 字符串常量池和静态变量仍然在堆当中；运行时常量池、类型信息、常量、字段、方法被移动都了元空间中&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-引用类型">2. 引用类型&lt;/h3>
&lt;p>下面来分析一下引用类型对象的大小。&lt;/p>
&lt;h4 id="21-java对象模型">2.1 Java对象模型&lt;/h4>
&lt;p>Java对象模型分为三个部分：&lt;strong>对象头、对象实际数据、对齐填充区&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmJava-object-model.png" alt="Java-object-model">&lt;/p>
&lt;p>对象头中又包含了很多，这个后续文章分析。&lt;/p>
&lt;p>&lt;strong>对象头又包含了三部分：MarkWord、对象元数据指针、数组对象长度：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>MarkWord：用于存储对象运行时的数据，好比 HashCode、锁状态标志、GC分代年龄等。&lt;strong>这部分在 64 位操作系统下占 8 字节，32 位操作系统下占 4 字节。&lt;/strong>&lt;/li>
&lt;li>对象元数据指针：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪一个类的实例。这部分就涉及到指针压缩的概念，&lt;strong>在开启指针压缩的状况下占 4 字节，未开启状况下占 8 字节。&lt;/strong>&lt;/li>
&lt;li>数组长度：这部分只有是数组对象才有，&lt;strong>若是是非数组对象就没这部分。这部分占 4 字节。所以Java中对象的最大值就是int类型的最大值&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>对象实际数据就是存储对象各个字段中的信息&lt;/p>
&lt;p>对齐填充：Java 对象的大小默认是按照 8 字节对齐，也就是说 Java 对象的大小必须是 8 字节的倍数。若是算到最后不够 8 字节的话，那么就会进行对齐填充。&lt;/p>
&lt;h3 id="3-对象大小查看神器">3. 对象大小查看神器&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#204a87;font-weight:bold">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;groupId&amp;gt;&lt;/span>org.openjdk.jol&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;artifactId&amp;gt;&lt;/span>jol-core&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;version&amp;gt;&lt;/span>0.9&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>jol工具是查看对象大小的神器&lt;/p>
&lt;h4 id="31-指针压缩开启-对象只包含基础数据类型">3.1 指针压缩开启-对象只包含基础数据类型&lt;/h4>
&lt;p>对象类：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ObjectBase&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//这个对象大小应该是: 8+4+4+8+1+7=32
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试验证代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Test1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ClassLayout&lt;/span> &lt;span style="color:#000">layout&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ObjectBase&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">layout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试结果：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmimage-20220603141125996.png" alt="image-20220603141125996">&lt;/p>
&lt;p>结果和上面的预测一样，有7byte的填充。&lt;/p>
&lt;h4 id="32-指针压缩开启-对象包含基础数据和引用对象">3.2 指针压缩开启-对象包含基础数据和引用对象&lt;/h4>
&lt;p>对象类：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ObjectBase&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//这个对象大小应该是: 8+4+4+8+1+4+3=32
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">RefObject&lt;/span> &lt;span style="color:#000">refObject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">RefObject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">short&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试验证代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Test1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ClassLayout&lt;/span> &lt;span style="color:#000">layout&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ObjectBase&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">layout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试结果：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmimage-20220603141956973.png" alt="image-20220603141956973">&lt;/p>
&lt;h4 id="33-指针压缩开启-数组对象">3.3 指针压缩开启-数组对象&lt;/h4>
&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Test1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//ClassLayout layout = ClassLayout.parseClass(ObjectBase.class);
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ClassLayout&lt;/span> &lt;span style="color:#000">layout&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ObjectBase&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">layout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试结果：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmimage-20220603143249267.png" alt="image-20220603143249267">&lt;/p>
&lt;h4 id="34-指针压缩关闭">3.4 指针压缩关闭&lt;/h4>
&lt;p>以3.1的代码作为测试代码，增加 &lt;strong>&lt;code>-XX:-UseCompressedOops&lt;/code>&lt;/strong> 参数，测试结果为：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmimage-20220603155554452.png" alt="image-20220603155554452">&lt;/p>
&lt;p>JDK17的情况下竟然没效果。看一下JDK11&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/blog/javase/jvmimage-20220603155652365.png" alt="image-20220603155652365">&lt;/p>
&lt;p>jdk11和预想的一样。&lt;/p>
&lt;h3 id="4-总结">4. 总结&lt;/h3>
&lt;p>ava对象大小主要由三部分注册：对象头、对象实际数据、填充对齐字段大小三部分组成。而对象头的大小相对固定，在开启了指针压缩的情况下对象头的大小最小12，最大16字节，然后实际数据大小取决于Java对象的成员变量多少。最好就是需要多少的对齐字节。默认的情况下Java对象大小都是8的整数倍。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢！&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html">https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Linux下Java开发者必须知道的那些Java命令</title><link>/blog/java-se/jvm/java-must-know-command/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/java-must-know-command/</guid><description>
&lt;p>Linux环境下和Window环境或者说有可视化界面环境最大的缺点是所有的数据呈现都要靠命令来实现没有图形界面工具，今天来结合实际生产过程中的场景来聊一聊Linux下Java开发者必须知道的那些命令。&lt;/p>
&lt;h3 id="1-环境准备">1. 环境准备&lt;/h3>
&lt;ul>
&lt;li>运行环境：Ubuntu 20.04.3 LTS (运行在windows上面的子系统)&lt;/li>
&lt;li>JDK版本： openjdk version &amp;ldquo;11.0.13&amp;rdquo; 2021-10-19&lt;/li>
&lt;li>Spring Boot版本：2.6.3&lt;/li>
&lt;/ul>
&lt;p>在 &lt;a href="https://start.spring.io/">Spring初始化官网&lt;/a> 生成一个SpringBoot项目然后打包成jar包再上述环境中运行启动起来&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/%E5%88%9B%E5%BB%BAspring%E8%BF%90%E8%A1%8Cjar%E5%8C%85.gif" alt="创建spring运行jar包">&lt;/p>
&lt;p>这样就已经运行起来了，环境已经准备好了。&lt;/p>
&lt;h3 id="2-获取运行jar包的pid">2. 获取运行Jar包的PID&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：在已经运行的项目，PID。&lt;/p>
&lt;p>&lt;strong>命令&lt;/strong>：&lt;strong>&lt;code>ps -ef 或者 jps&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127152430825.png" alt="image-20220127152430825">&lt;/p>
&lt;p>通过Linux的ps命令或者java的jps命令获取。&lt;/p>
&lt;h3 id="3-获取启动项目配置的参数">3. 获取启动项目配置的参数&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：在已经运行的项目，我们想知道配置的参数有哪些。&lt;/p>
&lt;p>&lt;strong>命令&lt;/strong>：&lt;strong>&lt;code>jinfo -flags &amp;lt;pid&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127152739983.png" alt="image-20220127152739983">&lt;/p>
&lt;blockquote>
&lt;p>Tips: &lt;strong>jinfo&lt;/strong> 还有其他的用法&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Usage:
jinfo &amp;lt;option&amp;gt; &amp;lt;pid&amp;gt;
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>to connect to a running process&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
where &amp;lt;option&amp;gt; is one of:
-flag &amp;lt;name&amp;gt; to print the value of the named VM flag
-flag &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>+&lt;span style="color:#000;font-weight:bold">|&lt;/span>-&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&amp;lt;name&amp;gt; to &lt;span style="color:#204a87">enable&lt;/span> or disable the named VM flag
-flag &amp;lt;name&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;value&amp;gt; to &lt;span style="color:#204a87">set&lt;/span> the named VM flag to the given value
-flags to print VM flags
-sysprops to print Java system properties
&amp;lt;no option&amp;gt; to print both VM flags and system properties
-? &lt;span style="color:#000;font-weight:bold">|&lt;/span> -h &lt;span style="color:#000;font-weight:bold">|&lt;/span> --help &lt;span style="color:#000;font-weight:bold">|&lt;/span> -help to print this &lt;span style="color:#204a87">help&lt;/span> message
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看某个或者设置某个参数的值&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="4-查看项目堆的使用情况">4. 查看项目堆的使用情况&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：运行过程中，有时候需要查看项目堆内存的使用情况&lt;/p>
&lt;p>&lt;strong>命令&lt;/strong>：&lt;strong>&lt;code>jhsdb jmap --heap --pid &amp;lt;pid&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127162154475.png" alt="image-20220127162154475">&lt;/p>
&lt;h3 id="5-查看线程状态">5. 查看线程状态&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：在运行过程中有时候会需要参看某一个线程的状态&lt;/p>
&lt;p>&lt;strong>命令&lt;/strong>：&lt;strong>&lt;code>jstack -l &amp;lt;pid&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127164738845.png" alt="image-20220127164738845">&lt;/p>
&lt;h3 id="6-查看某一个线程cpu的使用率">6. 查看某一个线程CPU的使用率&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：在排查问题的时候会出现CPU的使用率很高的情况，这个时候回我们想要知道是哪个Java线程占用了CPU.&lt;/p>
&lt;p>&lt;strong>命令&lt;/strong>：&lt;strong>&lt;code>1. jstack -l &amp;lt;pid&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>​ &lt;strong>&lt;code>2. top -H -p &amp;lt;pid&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>首先根据命令里获取Java所有线程的信息，然后选择你需要的线程例如下图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127165614424.png" alt="image-20220127165614424">&lt;/p>
&lt;p>我选择了mxsm_0这个线程，那么我们怎么使用第二个命令。看一下上图标号为2的数据，&lt;strong>&lt;code>nid=0xa43&lt;/code>&lt;/strong> 将其转换成十进制就是 &lt;strong>&lt;code>2627&lt;/code>&lt;/strong>&lt;/p>
&lt;p>然后使用命令 top -H -p 2627：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/java/jvm/image-20220127170026843.png" alt="image-20220127170026843">&lt;/p>
&lt;p>标记处的数据和上面的计算出来的是一样的。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 查看线程CPU使用率的需要结合Linux命令使用，虽然使用频率比较少但是对于排除线程使用率来说真的好用。&lt;/p>
&lt;/blockquote></description></item><item><title>Blog: 深入理解Java对象头Mark Word</title><link>/blog/java-se/jvm/java-object-header/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/java-object-header/</guid><description>
&lt;blockquote>
&lt;p>下面是基于JDK13 64位&lt;/p>
&lt;/blockquote>
&lt;p>网上对于Java对象头Mark Word有很多的资料，但是大多数都是32系统的，jdk7甚至1.6的版本。通过对网上资料的查找根据自己的一些代码下面来深入理解一下Java对象头Mark Word的组成。&lt;/p>
&lt;h3 id="1-对象头的参看神器">1 对象头的参看神器&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#204a87;font-weight:bold">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;groupId&amp;gt;&lt;/span>org.openjdk.jol&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;artifactId&amp;gt;&lt;/span>jol-core&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;version&amp;gt;&lt;/span>0.14&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过使用对象头查看神器来小试牛刀一下代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过运行的结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">com.github.mxsm.HeaderView object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">54&lt;/span> c3 &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> f8 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">01010100&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11000011&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 11111000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>-134167724&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>loss due to the next object alignment&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
Instance size: &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> bytes
Space losses: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes internal + &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> bytes &lt;span style="color:#000">external&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> bytes total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过发现在正常不设置任何参数的情况下，对象头的长度为12个字节。&lt;/p>
&lt;p>增加一个JVM参数（取消对象指针压缩，默认情况下JDK是开启的）：&lt;/p>
&lt;pre>&lt;code>-XX:-UseCompressedOops
&lt;/code>&lt;/pre>&lt;p>运行的结果：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">com.github.mxsm.HeaderView object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">08&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> 2e 1c &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00001000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00010111&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00101110&lt;/span> 00011100&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>472782600&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
Instance size: &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> bytes
Space losses: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes internal + &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes &lt;span style="color:#000">external&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以在不开启对象指针压缩的情况下对象头的长度为16个字节。&lt;/p>
&lt;h3 id="2-对象头的组成">2 对象头的组成&lt;/h3>
&lt;ul>
&lt;li>
&lt;h4 id="mark-word标记字段">Mark Word(标记字段)&lt;/h4>
&lt;/li>
&lt;li>
&lt;h4 id="klass-pointer类型指针">klass pointer(类型指针)&lt;/h4>
&lt;/li>
&lt;li>
&lt;h4 id="array-length数组长度">array length(数组长度)&lt;/h4>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>普通对象&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//开启了指针压缩
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------------------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">96&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|------------------------------------|-------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Mark&lt;/span> &lt;span style="color:#000">Word&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Klass&lt;/span> &lt;span style="color:#000">Word&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">32&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|------------------------------------|-------------------------|&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//没有开启指针压缩
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------------------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">128&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|------------------------------------|-------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Mark&lt;/span> &lt;span style="color:#000">Word&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Klass&lt;/span> &lt;span style="color:#000">Word&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|------------------------------------|-------------------------|&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//-XX:+UseCompressedOops
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//-XX:-UseCompressedOops
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>-XX:+UseCompressedOops 指针压缩开启运行结果&lt;/p>
&lt;pre>&lt;code>com.github.mxsm.Header object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
0 4 (object header) 01 00 00 00 (00000001 00000000 00000000 00000000) (1)
4 4 (object header) 00 00 00 00 (00000000 00000000 00000000 00000000) (0)
8 4 (object header) 92 c3 00 f8 (10010010 11000011 00000000 11111000) (-134167662)
12 4 (loss due to the next object alignment)
Instance size: 16 bytes
Space losses: 0 bytes internal + 4 bytes external = 4 bytes total
&lt;/code>&lt;/pre>&lt;p>-XX:+UseCompressedOops 指针压缩关闭运行结果&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">com.github.mxsm.Header object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> d0 1b 3b 1c &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">11010000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00011011&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00111011&lt;/span> 00011100&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>473635792&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
Instance size: &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> bytes
Space losses: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes internal + &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes &lt;span style="color:#000">external&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>数组对象&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//开启指针压缩
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|----------------------------------------------------------------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">128&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------|-----------------------|-------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Mark&lt;/span> &lt;span style="color:#000">Word&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Klass&lt;/span> &lt;span style="color:#000">Word&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">32bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">array&lt;/span> &lt;span style="color:#000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">32bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------|-----------------------|-------------------------|&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//没有开启指针压缩
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|----------------------------------------------------------------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">160&lt;/span> &lt;span style="color:#000">bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------|-----------------------|-------------------------|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Mark&lt;/span> &lt;span style="color:#000">Word&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">Klass&lt;/span> &lt;span style="color:#000">Word&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">64bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">array&lt;/span> &lt;span style="color:#000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">32bits&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">|--------------------------------|-----------------------|-------------------------|&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>-XX:+UseCompressedOops 指针压缩开启运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Lcom.github.mxsm.Header&lt;span style="color:#000;font-weight:bold">;&lt;/span> object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">05&lt;/span> c4 &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> f8 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000101&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11000100&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 11111000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>-134167547&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">01100100&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>100&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">400&lt;/span> com.github.mxsm.Header Header&lt;span style="color:#000;font-weight:bold">;&lt;/span>.&amp;lt;elements&amp;gt; N/A
Instance size: &lt;span style="color:#0000cf;font-weight:bold">416&lt;/span> bytes
Space losses: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes internal + &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes &lt;span style="color:#000">external&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>-XX:-UseCompressedOops 指针压缩关闭运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Lcom.github.mxsm.Header&lt;span style="color:#000;font-weight:bold">;&lt;/span> object internals:
OFFSET SIZE TYPE DESCRIPTION VALUE
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000001&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> b0 1d ab 1c &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10110000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00011101&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10101011&lt;/span> 00011100&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>480976304&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>object header&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">01100100&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">00000000&lt;/span> 00000000&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>100&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>alignment/padding gap&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">800&lt;/span> com.github.mxsm.Header Header&lt;span style="color:#000;font-weight:bold">;&lt;/span>.&amp;lt;elements&amp;gt; N/A
Instance size: &lt;span style="color:#0000cf;font-weight:bold">824&lt;/span> bytes
Space losses: &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> bytes internal + &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> bytes &lt;span style="color:#000">external&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> bytes total
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-mark-word">3 Mark Word&lt;/h3>
&lt;p>标记字段每个字段表示什么，我们可以从JVM的源码着手分析，下面来看一下在 &lt;a href="https://github.com/openjdk/jdk/blob/jdk-13-ga/src/hotspot/share/oops/arrayKlass.hpp">OpenJDK中markOop.hpp&lt;/a> JDK源码的文件注释，注释说明了位图的表示：&lt;/p>
&lt;blockquote>
&lt;p>说明:在OpenJDK中发现15版本已经没有markOop.hpp文件存在了。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#8f5902;font-style:italic">// 64 bits:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// --------
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// unused:25 hash:31 --&amp;gt;| unused:1 age:4 biased_lock:1 lock:2 (normal object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// JavaThread*:54 epoch:2 unused:1 age:4 biased_lock:1 lock:2 (biased object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// PromotedObject*:61 ---------------------&amp;gt;| promo_bits:3 -----&amp;gt;| (CMS promoted object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// size:64 -----------------------------------------------------&amp;gt;| (CMS free block)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 使用COOPs指针压缩技术
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// unused:25 hash:31 --&amp;gt;| cms_free:1 age:4 biased_lock:1 lock:2 (COOPs &amp;amp;&amp;amp; normal object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// JavaThread*:54 epoch:2 cms_free:1 age:4 biased_lock:1 lock:2 (COOPs &amp;amp;&amp;amp; biased object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&amp;gt;| (COOPs &amp;amp;&amp;amp; CMS promoted object)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// unused:21 size:35 --&amp;gt;| cms_free:1 unused:7 ------------------&amp;gt;| (COOPs &amp;amp;&amp;amp; CMS free block)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// [JavaThread* | epoch | age | 1 | 01] lock is biased toward given thread
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// [0 | epoch | age | 1 | 01] lock is anonymously biased
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// - the two lock bits are used to describe three states: locked/unlocked and monitor.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// [ptr | 00] locked ptr points to real header on stack
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// [header | 0 | 01] unlocked regular object header
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// [ptr | 10] monitor inflated lock (header is wapped out)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// [ptr | 11] marked used by markSweep to mark an object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// not valid at any other time
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图：&lt;/p>
&lt;p>指针压缩开启：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/markword%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9%E5%BC%80%E5%90%AF.png?raw=true" alt="指针压缩开启">&lt;/p>
&lt;p>指针压缩关闭&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/markword%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9%E6%B2%A1%E5%BC%80%E5%90%AF.png?raw=true" alt="指针压缩关闭">&lt;/p>
&lt;blockquote>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>轻量锁是相对于偏向锁来说的&lt;/li>
&lt;li>无锁状态是用01来表示&lt;/li>
&lt;li>重量锁在英文说明中用的是(inflated lock)膨胀锁&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="4-mark-word-锁状态">4 Mark Word 锁状态&lt;/h3>
&lt;p>通过分析JVM的源码注释可以发现Java对象头在不同的状态下会有不同的表现形式，主要有三种状态：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>无锁状态&lt;/strong>&lt;/li>
&lt;li>&lt;strong>加锁状态&lt;/strong>&lt;/li>
&lt;li>&lt;strong>GC标记&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Java中上锁可以理解为给对象上锁，也就是改变对象头的状态(锁的状态)如果成功上锁那么就进入同步的代码块中。Java中锁又分为三类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>偏向锁(01)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>轻量锁(00)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>重量锁(10)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>说明：01、00、10 是对象头中锁的两位的表示&lt;/p>
&lt;/blockquote>
&lt;p>不同的锁效率也不一样。&lt;/p>
&lt;h3 id="5-jol数据如何查看">5 jol数据如何查看&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Date 2021/1/21
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HashCode十六进制-----------&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">toHexString&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">hashCode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()));&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果:&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/jol%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B.png?raw=true" alt="">&lt;/p>
&lt;p>用示意图来表示Mark Word的数据排列结合jol打印的数据：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/markword%E4%BD%8D%E5%9B%BE%E5%9B%BE%E8%A7%A3.png?raw=true" alt="">&lt;/p>
&lt;p>排列如上图就能和上面打印的对比出来了。这样也就解释了为什么头部未使用的25个byte&lt;/p>
&lt;blockquote>
&lt;p>说明：通过上面的锁的两个位标识可以看出来，在没有枷锁的时候应该是01和图中也一一对上&lt;/p>
&lt;/blockquote>
&lt;h3 id="5-mark-word-正常状态">5 Mark Word 正常状态&lt;/h3>
&lt;p>以下都是在开启指针压缩的情况下(这个也是JVM的默认)，首先看一下Header类&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">flag&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float&lt;/span> &lt;span style="color:#000">flt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span> &lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HashCode十六进制-----------&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">toHexString&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">hashCode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()));&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常状态打印数据：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/markword%E6%AD%A3%E5%B8%B8%E7%8A%B6%E6%80%81.png?raw=true" alt="">&lt;/p>
&lt;blockquote>
&lt;p>说明:从上图可以看出来不同的数据类型占用的字节数都不一样。&lt;/p>
&lt;/blockquote>
&lt;h3 id="6-mark-word-偏向锁">6 Mark Word 偏向锁&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">biasedLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(){&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;biasedLock................&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Date 2021/1/21
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之前.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">biasedLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之后.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打印结果：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8F%98%E4%B8%BA%E5%81%8F%E5%90%91%E9%94%811.png?raw=true" alt="">&lt;/p>
&lt;p>通过结果发现调用上面这个程序只有一个线程去调用biasedLock方法，应该是偏向锁，但是你会发现输出的结果（第一个字节）依然是00000001和无锁的时候一模一样，其实这是&lt;strong>因为虚拟机在启动的时候对于偏向锁有延迟&lt;/strong>如果没有偏向锁的延迟的话，虚拟机在启动的时候，可能JVM某个线程调用你的线程，这样就有可能变成了轻量锁或者重量锁(如果没有延迟会降低JVM启动的速度)，所以要做偏向锁的延迟。查看的方式有两种：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>增加JVM参数:-XX:BiasedLockingStartupDelay=0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加锁之前让线程睡几秒&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">java.util.concurrent.TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">java.util.concurrent.TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Date 2021/1/21
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HeaderView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * 睡眠时间大概在5秒左右，4秒测试我这边没有效果
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * 切记延迟一定要放在对象创建之前，不然是无效的，因为在你对象创建之前，偏向锁的延迟的时间
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * 没有给你睡过去，这时候，对象已经创建了，对象头的信息已经生成了。(在对象头生成之前)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">MILLISECONDS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">sleep&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">4500&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InterruptedException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之前.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">biasedLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之后.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>说明：&lt;/p>
&lt;ul>
&lt;li>睡眠时间大概在五秒左右，具体可以去测试&lt;/li>
&lt;li>线程睡眠时间一定要在对象创建之前(对象头生成之前)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/%E7%8A%B6%E6%80%81%E8%BD%AC%E4%B8%BA%E5%81%8F%E5%90%91%E9%94%812.png?raw=true" alt="">&lt;/p>
&lt;p>通过图片可以看出来已经变成可偏向状态了。&lt;/p>
&lt;h3 id="7-mark-word重量锁膨胀锁">7 Mark Word重量锁(膨胀锁)&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Date 2021/1/21
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">biasedLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(){&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;biasedLock方法执行................&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">java.util.concurrent.TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.openjdk.jol.info.ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Date 2021/1/26
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">InflatedLock&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//偏向锁延迟开启的状态下
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Header&lt;/span> &lt;span style="color:#000">headerView&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之前.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SECONDS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">sleep&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InterruptedException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;------ Thread1 release-----\n&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">},&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Thread1&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SECONDS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">sleep&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InterruptedException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Thread1 is locking&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">biasedLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;加锁之后.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">gc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GC后.....&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassLayout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">headerView&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">toPrintable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/%E7%8A%B6%E6%80%81%E8%BD%AC%E4%B8%BA%E9%87%8D%E5%BA%A6%E9%94%811.png?raw=true" alt="">&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/java/jvm/%E7%8A%B6%E6%80%81%E8%BD%AC%E4%B8%BA%E9%87%8D%E5%BA%A6%E9%94%812.png?raw=true" alt="">&lt;/p>
&lt;p>gc后年龄增加1。&lt;/p>
&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/qq_36434742/article/details/106854061">深入理解Java的对象头mark word&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: 类加载器和双亲委派模型</title><link>/blog/java-se/jvm/parental-delegate-model/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/parental-delegate-model/</guid><description>
&lt;h3 id="1-类加载器">1. 类加载器&lt;/h3>
&lt;p>每一个类加载器拥有一个独立的类命名空间，通俗的说：比较两个类是否相等只有两个类是同一个类加载器才有意义。&lt;/p>
&lt;h4 id="jvm预定义类加载器分为三种">JVM预定义类加载器分为三种：&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>启动类加载器（Bootstrap ClassLoader）—C++写的二进制代码而不是字节码&lt;/strong>&lt;/p>
&lt;p>启动类加载器主要加载的是JVM自身需要的类，这个类加载使用C++语言实现的，是虚拟机自身的一部分，它负责将 &lt;code>&amp;lt;JAVA_HOME&amp;gt;/lib&lt;/code> 路径下的核心类库或&lt;code>-Xbootclasspath&lt;/code>参数指定的路径下的jar包加载到内存中，注意必由于虚拟机是按照文件名识别加载jar包的，如rt.jar，如果文件名不被虚拟机识别，即使把jar包丢到lib目录下也是没有作用的(出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类)。&lt;/p>
&lt;blockquote>
&lt;p>在我们测试System.class.getClassLoader()的时候结果为null的原因，并不是表示System这个没有类加载器，而是他的加载器比较特殊。BootstrapClassLoader不是Java类而是C++代码编写的。所以返回为空。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>拓展(Extension)类加载器&lt;/strong>&lt;/p>
&lt;p>扩展类加载器是指Sun公司(已被Oracle收购)实现的&lt;code>sun.misc.Launcher$ExtClassLoader&lt;/code>类，由Java语言实现的，是Launcher的静态内部类，它负责加载&lt;code>&amp;lt;JAVA_HOME&amp;gt;/lib/ext&lt;/code>目录下或者由系统变量-Djava.ext.dir指定位路径中的类库，开发者可以直接使用标准扩展类加载器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用程序(Application)类加载器&lt;/strong>&lt;/p>
&lt;p>也称应用程序加载器是指 Sun公司实现的&lt;code>sun.misc.Launcher$AppClassLoader&lt;/code>。它负责加载系统类路径&lt;code>java -classpath&lt;/code>或&lt;code>-Djava.class.path &lt;/code>指定路径下的类库，也就是我们经常用到的classpath路径，开发者可以直接使用系统类加载器，一般情况下该类加载是程序中默认的类加载器，通过&lt;code>ClassLoader#getSystemClassLoader()&lt;/code>方法可以获取到该类加载器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="自定义加载类">自定义加载类&lt;/h4>
&lt;p>自定义类加载器可以直接或间接继承自类 &lt;strong>&lt;code>java.lang.ClassLoader&lt;/code>&lt;/strong> 。在 &lt;strong>&lt;code>java.lang.ClassLoader&lt;/code>&lt;/strong> 类的常用方法中，一般来说，自己开发的类加载器只需要覆写 &lt;strong>&lt;code>findClass(String name)&lt;/code>&lt;/strong> 方法即可&lt;/p>
&lt;p>java.lang.ClassLoader类的方法 loadClass()封装了代理模式的实现。&lt;/p>
&lt;ul>
&lt;li>该方法会首先调用 findLoadedClass()方法来检查该类是否已经被加载过；&lt;/li>
&lt;li>如果没有加载过的话，会调用父类加载器的 loadClass()方法来尝试加载该类；&lt;/li>
&lt;li>如果父类加载器无法加载该类的话，就调用 findClass()方法来查找该类。&lt;/li>
&lt;/ul>
&lt;h3 id="2-双亲委派模型">2. 双亲委派模型&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/document/master/image/JSE/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="图解">&lt;/p>
&lt;blockquote>
&lt;p>这里的类加载器之间的父子关系一般不通过继承（Inheritance）来实现，而是通过组合（Composition）关系来服用父加载器代码。双亲委派模型并不是一个强制性约束，而是Java设计者推荐给开发者的一种类加载实现方式。&lt;/p>
&lt;/blockquote>
&lt;h4 id="双亲委派模型的工作过程">双亲委派模型的工作过程&lt;/h4>
&lt;ul>
&lt;li>如果一个类加载器收到了类加载的请求，它不会先自己尝试处理这个请求，而是委派给它的父类加载器，所有的请求最终都会传送到顶层的启动类加载器。&lt;/li>
&lt;li>只有当父类反馈自己无法完成该请求（它的搜索范围中没有找到所需的类，即抛ClassNotFoundException）时，子加载器才会尝试自己加载。&lt;/li>
&lt;/ul>
&lt;h4 id="为什么用双亲委派模型">为什么用双亲委派模型？&lt;/h4>
&lt;p>&lt;strong>为了保证JVM内存中相同的类只有一个，防止出现多个。&lt;/strong>&lt;/p>
&lt;p>使用双亲委派模型可以使得Java类随着它的类加载器一起具备了一种&lt;strong>带有优先级的层次关系&lt;/strong> 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#ce5c00;font-weight:bold">*/&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">Class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#000">loadClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">resolve&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">ClassNotFoundException&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">getClassLoadingLock&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 首先检查是否已经加载
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">findLoadedClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">t0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">nanoTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">parent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">loadClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">findBootstrapClassOrNull&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ClassNotFoundException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//如果一直没有找到就调用findClassc方法查找
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//findClass 方法需要自己做override,如果没有直接
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//抛出 ClassNotFoundException
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">nanoTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">findClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// this is the defining class loader; record the stats
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">misc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">PerfCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getParentDelegationTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">t0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">misc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">PerfCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getFindClassTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addElapsedTimeFrom&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">misc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">PerfCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getFindClasses&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">increment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resolve&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">resolveClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-自定义类加载器">3. 自定义类加载器&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">org.apache.commons.io.FileUtils&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">java.io.File&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">java.io.IOException&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">MxsmClassLoader&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">ClassLoader&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">classLoaderName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">SUFFIX&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.class&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">MxsmClassLoader&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">classLoaderName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">classLoaderName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">classLoaderName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">Class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#000">findClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">ClassNotFoundException&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">loadClassData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IOException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">defineClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">loadClassData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">IOException&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">FileUtils&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">readFileToByteArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">File&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">getPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">replace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\\&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)+&lt;/span>&lt;span style="color:#000">SUFFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">getPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">setPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">path&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">toString&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MxsmClassLoader{&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;classLoaderName=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">classLoaderName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;}&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个自定义类加载器的模板可以在 &lt;strong>&lt;code>ClassLoader&lt;/code>&lt;/strong> 类的说明上面找到。这样就实现了自定义的类加载器。&lt;/p>
&lt;h3 id="4-自定义类加载器的父类说明">4. 自定义类加载器的父类说明&lt;/h3>
&lt;p>下图是我运行当前代码的结果：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/ClassLoader.gif?raw=true" alt="">&lt;/p>
&lt;ol>
&lt;li>第一种情况A在ClassPath下面，所以加载类是通过AppClassLoader加载的。&lt;/li>
&lt;li>第二种情况把ClassPath下面的类删除，重新存放。到另一个地方。然后打印发现A加载是通过自定义的 &lt;strong>&lt;code>MxsmClassLoader&lt;/code>&lt;/strong> 加载的。&lt;/li>
&lt;/ol>
&lt;p>这里就很好的说明了&lt;a href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B">双亲委派模型的工作原理&lt;/a>&lt;/p>
&lt;h3 id="5-类加载器的命名空间">5. 类加载器的命名空间&lt;/h3>
&lt;p>&lt;strong>每个类加载器都有自己的命名空间，命名空间由该加载器及所有的父加载器所加载的类组成。&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>在同一个命名空间里面不允许出现两个完全一样的类&lt;/li>
&lt;li>不同的命名空间可以出现两个完全一样的类，相互无感知也就是说两个Class不一样&lt;/li>
&lt;li>子加载器所加载的类可以看见父加载器加载的类，但是父加载器所加载的类无法看见子加载器加载的类&lt;/li>
&lt;/ol>
&lt;p>下面运行代码来验证，首先在ClassPath下面不删除A查看运行结果：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/ClassLoaderNamspace1.gif?raw=true" alt="">&lt;/p>
&lt;p>这里是没有报错的。&lt;/p>
&lt;p>我们把ClassPath的A删除然后运行：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/ClassLoaderNamspace2.gif?raw=true" alt="">&lt;/p>
&lt;p>看一下报错：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">lang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">reflect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">InvocationTargetException&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">reflect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">NativeMethodAccessorImpl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">invoke0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Native&lt;/span> &lt;span style="color:#000">Method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">reflect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">NativeMethodAccessorImpl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">invoke&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NativeMethodAccessorImpl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">62&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">sun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">reflect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">DelegatingMethodAccessorImpl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">invoke&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">DelegatingMethodAccessorImpl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">43&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">lang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">reflect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">invoke&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">498&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">App2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">App2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">23&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Caused&lt;/span> &lt;span style="color:#000">by&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">lang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">ClassCastException&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">algorithm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">A&lt;/span> &lt;span style="color:#000">cannot&lt;/span> &lt;span style="color:#000">be&lt;/span> &lt;span style="color:#000">cast&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">algorithm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">A&lt;/span>
&lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">algorithm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">A&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">setA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">A&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000">12&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">5&lt;/span> &lt;span style="color:#000">more&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里报 java.lang.ClassCastException: com.github.mxsm.algorithm.A cannot be cast to com.github.mxsm.algorithm.A 这是为什么？&lt;/p>
&lt;p>原因就在于A的加载是不同的类加载器加载，由于有类加载器命名空间的存在。所以其实加载的是两个不同的类。所以在进行强行转换的时候回出现 A 不能转换 A的情况。&lt;/p></description></item><item><title>Blog: Java中的引用</title><link>/blog/java-se/jvm/java-ref/</link><pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/java-ref/</guid><description>
&lt;h3 id="java引用的四种类型">Java引用的四种类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>分为强引用（Strong Reference）&lt;/strong>&lt;/p>
&lt;p>这个大家天天用可能只是没有注意比如&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是强引用。只要有强引用，对象永远不会被回收&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分为软引用（Soft Reference）&lt;/strong>&lt;/p>
&lt;p>自己表示没有用过，没用过那就看一下通过代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">SoftReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">StringBuilder&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">softReference&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">SoftReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">StringBuilder&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>官方的说法是由垃圾收集器根据内存需求自行清除。软引用大部分用来实现&lt;strong>内存敏感&lt;/strong>的缓存&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * -XX:+PrintGCDetails
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * -Xms20m
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * -Xmx20m
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SoftReferenceTest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">_1MB&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1024&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">1024&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SoftReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&amp;gt;&lt;/span> &lt;span style="color:#000">softReference&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">SoftReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">softReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">allco1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">allco2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">allco3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">allco4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">allco5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">_1MB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">softReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[Ljava.lang.Byte;@6bf2d08e
[GC (Allocation Failure) [PSYoungGen: 5065K-&amp;gt;485K(6144K)] 13257K-&amp;gt;9357K(19968K), 0.0018207 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 4751K-&amp;gt;496K(6144K)] 13623K-&amp;gt;13517K(19968K), 0.0043121 secs] [Times: user=0.01 sys=0.01, real=0.00 secs]
[Full GC (Ergonomics) [PSYoungGen: 496K-&amp;gt;0K(6144K)] [ParOldGen: 13021K-&amp;gt;13305K(13824K)] 13517K-&amp;gt;13305K(19968K), [Metaspace: 3354K-&amp;gt;3354K(1056768K)], 0.0166522 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 4340K-&amp;gt;4096K(6144K)] [ParOldGen: 13305K-&amp;gt;13261K(13824K)] 17645K-&amp;gt;17357K(19968K), [Metaspace: 3364K-&amp;gt;3364K(1056768K)], 0.0160700 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]
[Full GC (Allocation Failure) [PSYoungGen: 4096K-&amp;gt;0K(6144K)] [ParOldGen: 13261K-&amp;gt;9094K(13824K)] 17357K-&amp;gt;9094K(19968K), [Metaspace: 3364K-&amp;gt;3364K(1056768K)], 0.0048642 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]
null
Heap
PSYoungGen total 6144K, used 2129K [0x00000007bf980000, 0x00000007c0000000, 0x00000007c0000000)
eden space 5632K, 37% used [0x00000007bf980000,0x00000007bfb94778,0x00000007bff00000)
from space 512K, 0% used [0x00000007bff80000,0x00000007bff80000,0x00000007c0000000)
to space 512K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007bff80000)
ParOldGen total 13824K, used 9094K [0x00000007bec00000, 0x00000007bf980000, 0x00000007bf980000)
object space 13824K, 65% used [0x00000007bec00000,0x00000007bf4e1b68,0x00000007bf980000)
Metaspace used 3375K, capacity 4496K, committed 4864K, reserved 1056768K
class space used 367K, capacity 388K, committed 512K, reserved 1048576K
&lt;/code>&lt;/pre>&lt;p>打印为null说明GC已经回收了内存。&lt;/p>
&lt;p>&lt;strong>对于关联软引用的对象，在系统将要发生内存溢出异常之前，将会把这些对象进行二次回收，如果仍没有足够的内存，才会抛出内存溢出异常。使用SoftReference类来实现&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分为弱引用（Weak Reference）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>弱引用也是描述非必须的对象，被它关联的对象，只能生存到下一次垃圾回收发生之前，当垃圾回收时，无论内存是否足够，都会被回收，系统提供WeakReference类来实现弱引用&lt;/strong>&lt;/p>
&lt;p>代码验证：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">WeakRefrenceTest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">WeakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">weakReference&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">WeakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1111&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GC前：&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">weakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">gc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//手动调用GC操作
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GC后：&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">weakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打印结果：&lt;/p>
&lt;pre>&lt;code>GC前：1111
GC后：null
&lt;/code>&lt;/pre>&lt;p>如果换成下面的这样代码呢？&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">WeakRefrenceTest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//new String(&amp;#34;1111&amp;#34;) 换成
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">WeakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">weakReference&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">WeakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1111&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GC前：&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">weakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">gc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GC后：&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">weakReference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打印的结果：&lt;/p>
&lt;pre>&lt;code>GC前：1111
GC后：1111
&lt;/code>&lt;/pre>&lt;p>为什么上面 &lt;strong>&lt;code>new String(&amp;quot;111&amp;quot;)&lt;/code>&lt;/strong> 打印的GC后的为空而直接 &lt;strong>&lt;code>111&lt;/code>&lt;/strong> 打印的是GC后的是111。因为 &lt;strong>&lt;code>111&lt;/code>&lt;/strong> 被放到了常量池里面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚引用（Phantom Reference）&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Blog: JVM垃圾收集器</title><link>/blog/java-se/jvm/jvm-gc/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/jvm-gc/</guid><description>
&lt;h3 id="1-垃圾收集算法">1 垃圾收集算法&lt;/h3>
&lt;h4 id="11-标记-----清除">1.1 标记 &amp;mdash; 清除&lt;/h4>
&lt;p>&lt;strong>标记清除算法分为两步&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>标记需要回收的对象 &amp;ndash; 标记&lt;/strong>&lt;/li>
&lt;li>&lt;strong>标记完成后统一回收被标记需要回收的对象。 &amp;ndash; 清除&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决循环引用问题&lt;/li>
&lt;li>必要时才回收(当内存不足的情况)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>标记和清除两个过程效率都不高&lt;/li>
&lt;li>会产生大量的不连续的内存碎片，空间碎片太多会导致以后程序中需要分配比较大的对象的时候，无法找到足够的连续的内存而不得不提前出发一次垃圾收集的动作。&lt;/li>
&lt;li>回收的时候会触发 &lt;strong>&lt;code>stop the world&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="12-标记-----整理">1.2 标记 &amp;mdash; 整理&lt;/h4>
&lt;p>和标记清除算法一样 标记整理也分为两步且第一步是相同的：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>将存活的对象标记&amp;ndash;标记&lt;/strong>&lt;/li>
&lt;li>&lt;strong>移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收&amp;mdash;整理阶段&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不会产生内存碎片&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>整理的效率不高&lt;/li>
&lt;/ul>
&lt;h4 id="13-复制算法">1.3 复制算法&lt;/h4>
&lt;p>&lt;strong>复制算法将内存划分为两个区间，在任意时间点，所有动态分配的对象都只能分配在其中一个区间（称为活动区间），而另外一个区间（称为空闲区间）则是空闲的&lt;/strong>。 当有效内存空间耗尽时，JVM将暂停程序运行，开启复制算法GC线程。&lt;strong>接下来GC线程会将活动区间内的存活对象，全部复制到空闲区间，且严格按照内存地址依次排列，与此同时，GC线程将更新存活对象的内存引用地址指向新的内存地址&lt;/strong>。&lt;/p>
&lt;p>​ 此时，空闲区间已经与活动区间交换，而垃圾对象现在已经全部留在了原来的活动区间，也就是现在的空闲区间。事实上，在活动区间转换为空间区间的同时，垃圾对象已经被一次性全部回收。&lt;/p>
&lt;h4 id="14-gc的可达性分析算法">1.4 GC的可达性分析算法&lt;/h4>
&lt;p>&lt;strong>基本思路：&lt;/strong> 通过一系列成为 &lt;strong>&lt;code>GC Roots&lt;/code>&lt;/strong> 对象作为起点，从这些起点开始向下搜索，搜索过程的路径称为 &lt;strong>&lt;code>Reference Chain(引用链)&lt;/code>&lt;/strong> ，当一个对象没有任何引用链相连的时，证明此对象是不可用的，所以即便有些对象互相引用但是和 &lt;strong>&lt;code>GC Roots&lt;/code>&lt;/strong> 之间不可达，依然会 &lt;strong>&lt;code>GC&lt;/code>&lt;/strong> ,这种方式很好的解决了计数器法不能解决的循环引用问题。&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/GCRoots%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg?raw=true" alt="图解">&lt;/p>
&lt;p>从上图根据可达性分析可以知道**：A、 B、 C、 D四个对象不会被GC，而 E、F虽然互相引用但是和GC Roots之间不可达**&lt;/p>
&lt;p>可以作为 &lt;strong>&lt;code>GC Roots&lt;/code>&lt;/strong> 的对象包括：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>虚拟机栈（栈帧中的本地变量表）中引用的对象&lt;/li>
&lt;li>方法区中类静态属性引用的对象&lt;/li>
&lt;li>方法区中常量引用的对象&lt;/li>
&lt;li>本地方法栈中JNI引用的对象&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="2-相关概念说明">2. 相关概念说明&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>并行（Parallel）&lt;/strong>：指多条 &lt;strong>&lt;code>垃圾收集线程并行&lt;/code>&lt;/strong> 工作，但此时用户线程仍然处于等待状态。&lt;/li>
&lt;li>&lt;strong>并发（Concurrent）&lt;/strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。&lt;/li>
&lt;li>&lt;strong>Minor GC 和 Major GC (Full GC)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>新生代GC（Minor GC）&lt;/strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。&lt;/li>
&lt;li>&lt;strong>老年代GC（Major GC / Full GC）&lt;/strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>吞吐量：&lt;/strong> 吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。
虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。&lt;/li>
&lt;/ul>
&lt;h3 id="3-垃圾收集器">3. 垃圾收集器&lt;/h3>
&lt;p>下面看一下垃圾收集器的相关图(&lt;a href="https://blogs.oracle.com/jonthecollector/our-collectors">来源Oracle官网博客已放入我的github文档目录&lt;/a>)：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/collectors.jpg?raw=true" alt="图片">&lt;/p>
&lt;p>注：图中的 &lt;strong>&lt;code>？&lt;/code>&lt;/strong> 表示什么呢，以后的GC收集器的另一外的实现。比如 &lt;strong>&lt;code>JDK11&lt;/code>&lt;/strong> &lt;strong>&lt;code>G1&lt;/code>&lt;/strong> 垃圾收集器。&lt;/p>
&lt;p>上图展示了六种(或者说7种 包括G1)不同的收集器在新生代和老年代的垃圾收集。如果两个收集器之间有连线说明说明可以搭配使用 。·&lt;/p>
&lt;blockquote>
&lt;p>JVM GC的组合&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>年轻代GC&lt;/th>
&lt;th>年老代和持久代&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-XX:+UseSerialGC&lt;/td>
&lt;td>Serial&lt;/td>
&lt;td>Serial Old&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-XX:+UseParallelGC&lt;/td>
&lt;td>并行回收GC(Parallel Scavenge)&lt;/td>
&lt;td>Parallel Old&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-XX:+UseConcMarkSweepGC&lt;/td>
&lt;td>ParNew GC&lt;/td>
&lt;td>并发GC 当出现concurrent Mode failure时采用Serial Old&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-XX:+UseParNewGC&lt;/td>
&lt;td>ParNew GC&lt;/td>
&lt;td>Serial Old&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-XX:+UseParalledlOldGC&lt;/td>
&lt;td>并行回收GC(Parallel Scavenge)&lt;/td>
&lt;td>Parallel Old&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-XX:+UseParalledlOldGC -XX:+UseParNewGC&lt;/td>
&lt;td>Par New GC&lt;/td>
&lt;td>Parallel Old 当出现concurrentMode failure 或promotion failed时采用Serial Old&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/blockquote>
&lt;h3 id="4-serial收集器">4. Serial收集器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特性：&lt;/strong> 这个收集器是一个&lt;code>单线程&lt;/code>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。停止其他的线程工作就是我们常说的 &lt;strong>&lt;code>Stop the world&lt;/code>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用场景：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>Serial&lt;/code>&lt;/strong> 收集器是虚拟机运行在 &lt;strong>&lt;code>Client&lt;/code>&lt;/strong> 模式下的默认新生代收集器。&lt;/p>
&lt;p>可以用命令&lt;/p>
&lt;pre>&lt;code>java -version 查看
&lt;/code>&lt;/pre>&lt;p>一般情况下都是Server模式(Windows 平台可以搜一下jvm.cfg文件)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;p>简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。对于自由一个CPU来说，由于现在的电脑大多数都是多核心CPU所以这个收集器就很少用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原理图解：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png?raw=true" alt="图解">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适用范围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>新生代&amp;ndash;Serial&lt;/strong>&lt;/li>
&lt;li>&lt;strong>老年代&amp;ndash;Serial Old&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>所以这个收集器包含了处理新生代的 &lt;strong>&lt;code>Serial(复制算法)&lt;/code>&lt;/strong> 收集器和处理老年代的 &lt;strong>&lt;code>Serial Old(标记整理算法)&lt;/code>&lt;/strong> 收集器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="5-parnew收集器">5. ParNew收集器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>ParNew&lt;/code>&lt;/strong> 收集器其实就是 &lt;strong>&lt;code>Serial(新生代)&lt;/code>&lt;/strong> 收集器的多线程版本，除了使用了多线程以外其他的基本上都和 &lt;strong>&lt;code>Serial(新生代)&lt;/code>&lt;/strong> 收集器差不多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用场景：&lt;/strong>&lt;/p>
&lt;p>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。&lt;/p>
&lt;p>很重要的原因是：除了 &lt;strong>&lt;code>Serial&lt;/code>&lt;/strong> 收集器外，目前只有它能与 &lt;strong>&lt;code>CMS&lt;/code>&lt;/strong> 收集器配合工作。
在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器—— &lt;strong>&lt;code>CMS&lt;/code>&lt;/strong> 收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器 &lt;strong>&lt;code>Parallel Scavenge&lt;/code>&lt;/strong> 配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择 **&lt;code>ParNew&lt;/code>**或者 &lt;strong>&lt;code>Serial&lt;/code>&lt;/strong> 收集器中的一个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;p>多线程收集器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原理图解：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/ParNew.png?raw=true" alt="图解">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适用范围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>新生代&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="6-parallel-scavenge收集器">6. Parallel Scavenge收集器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;p>Parallel Scavenge收集器是一个&lt;strong>新生代收集器&lt;/strong>，它也是使用&lt;strong>复制算法&lt;/strong>的收集器，又是&lt;strong>并行&lt;/strong>的多线程收集器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用场景：&lt;/strong>&lt;/p>
&lt;p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;p>GC自适应调节，Parallel Scavenge收集器有一个参数&lt;code>-XX:+UseAdaptiveSizePolicy&lt;/code>。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>试用范围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>新生代GC&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="7-parallel-old收集器">7. Parallel Old收集器&lt;/h3>
&lt;p>&lt;strong>&lt;code>Parallel Scavenge&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>Parallel old&lt;/code>&lt;/strong> 属于同一个类型的收集器但是处理里的区域不同。前一个是新生代后一个是老年代。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;p>Parallel Old是Parallel Scavenge收集器的&lt;strong>老年代版本&lt;/strong>，使用&lt;strong>多线程&lt;/strong>和**“标记－整理”**算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用场景：&lt;/strong>&lt;/p>
&lt;p>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图解：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/ParallelOld.png?raw=true" alt="图解">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适用范围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>老年代&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="8-cms收集器">8. CMS收集器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>CMS（Concurrent Mark Sweep）&lt;strong>收集器是一种以&lt;/strong>获取最短回收停顿时间&lt;/strong>为目标的收集器，它非常符合那些集中在互联网站或者B/S系统的服务端上的Java应用，这些应用都非常重视服务的响应速度。从名字上（“Mark Sweep”）就可以看出它是基于**“标记-清除”**算法实现的。&lt;/p>
&lt;p>&lt;strong>CMS&lt;/strong> 工作的的个步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>初始化标记(CMS initial mark):&lt;/strong> 仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。 —— &lt;strong>串行&lt;/strong>&lt;/li>
&lt;li>&lt;strong>并发标记(CMS Concurrent mark):&lt;/strong> 进行&lt;strong>GC Roots Tracing&lt;/strong>的过程，在整个过程中耗时最长。— &lt;strong>并发&lt;/strong>&lt;/li>
&lt;li>&lt;strong>重新标记(CMS remark):&lt;/strong> 为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。此阶段也需要“Stop The World”。 — &lt;strong>并行 多个CG线程同时工作&lt;/strong>&lt;/li>
&lt;li>&lt;strong>并发清除(CMS concurrent sweep):&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。通过下图可以比较清楚地看到CMS收集器的运作步骤中并发和需要停顿的时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图解：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/CMS.png?raw=true" alt="图解">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适用范围：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>老年代&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>并发收集&lt;/strong>、&lt;strong>低停顿&lt;/strong>，因此CMS收集器也被称为&lt;strong>并发低停顿收集器（Concurrent Low Pause Collector）&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>对CPU资源非常敏感&lt;/strong> 其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。&lt;strong>CMS默认启动的回收线程数是（CPU数量+3）/4&lt;/strong>，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是&lt;strong>当CPU不足4个时（比如2个），CMS对用户程序的影响就可能变得很大&lt;/strong>，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，其实也让人无法接受。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>无法处理浮动垃圾（Floating Garbage）&lt;/strong> 可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。&lt;strong>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。&lt;strong>这一部分垃圾出现在标记过程之后，CMS无法再当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就被称为&lt;/strong>“浮动垃圾”&lt;/strong>。也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>标记-清除算法导致的空间碎片&lt;/strong> CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。空间碎片过多时，将会给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象。&amp;ndash; 产生垃圾是标记清除算法的通病。&lt;/p>
&lt;p>但是往往老年代还有很大剩余空间，但无法找到足够大的连续空间来分配当前对象,不得不触发一次 &lt;strong>&lt;code>Full GC&lt;/code>&lt;/strong> CMS的解决方案是使用&lt;strong>UseCMSCompactAtFullCollection&lt;/strong>参数(默认开启)，在顶不住要进行Full GC时开启内存碎片整理。在碎片整理过程需要 &lt;strong>&lt;code>STW&lt;/code>&lt;/strong>,停顿时间比正常的 &lt;strong>&lt;code>Full GC&lt;/code>&lt;/strong> &lt;strong>STW&lt;/strong> 时间更长&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="9-g1收集器">9. G1收集器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>特点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>并行与并发&lt;/strong> G1 能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短“Stop The World”停顿时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。&lt;/li>
&lt;li>&lt;strong>分代收集&lt;/strong> 与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同方式去处理新创建的对象和已存活一段时间、熬过多次GC的旧对象来获取更好的收集效果。&lt;/li>
&lt;li>&lt;strong>空间整合&lt;/strong> G1从整体来看是基于**“标记-整理”**算法实现的收集器，从局部（两个Region之间）上来看是基于**“复制”**算法实现的。这意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。此特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。&lt;/li>
&lt;li>&lt;strong>可预测的停顿&lt;/strong> 这是G1相对CMS的一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了降低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>横跨整个堆内存&lt;/strong>&lt;/p>
&lt;p>G1将整个个Java堆划分成为多个大小相等的独立区域(Region)，虽然新生代和老年代的概念还保留。但新生代和老年代不再是物理隔离的概念了，而都是一部分Region(不需要连续)的集合。&lt;/p>
&lt;p>&lt;strong>避免全表扫描&lt;/strong>&lt;/p>
&lt;p>G1把Java堆分为多个Region，就是“化整为零”。但是Region不可能是孤立的，一个对象分配在某个Region中，可以与整个Java堆任意的对象发生引用关系。在做可达性分析确定对象是否存活的时候，需要扫描整个Java堆才能保证准确性，这显然是对GC效率的极大伤害。&lt;/p>
&lt;p>为了避免全堆扫描的发生，虚拟机&lt;strong>为G1中每个Region维护了一个与之对应的Remembered Set&lt;/strong>。虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier暂时中断写操作，检查Reference引用的对象是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），如果是，便通过CardTable&lt;strong>把相关引用信息记录到被引用对象所属的Region的Remembered Set之中&lt;/strong>。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏。&lt;/p>
&lt;/li>
&lt;li>
&lt;h3 id="g1收集步骤">G1收集步骤&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>初始标记（Initial Marking）&lt;/strong> 仅仅只是标记一下GC Roots 能直接关联到的对象，并且修改&lt;strong>TAMS（Nest Top Mark Start）&lt;strong>的值，让下一阶段用户程序并发运行时，能在正确可以的Region中创建对象，此阶段需要&lt;/strong>停顿线程&lt;/strong>，但耗时很短。&lt;/li>
&lt;li>&lt;strong>并发标记（Concurrent Marking）&lt;/strong> 从GC Root 开始对堆中对象进行&lt;strong>可达性分析&lt;/strong>，找到存活对象，此阶段耗时较长，但&lt;strong>可与用户程序并发执行&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>最终标记（Final Marking）&lt;/strong> 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在&lt;strong>线程的Remembered Set Logs&lt;/strong>里面，最终标记阶段需要&lt;strong>把Remembered Set Logs的数据合并到Remembered Set中&lt;/strong>，这阶段需要&lt;strong>停顿线程&lt;/strong>，但是&lt;strong>可并行执行&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>筛选回收（Live Data Counting and Evacuation）&lt;/strong> 首先对各个Region中的回收价值和成本进行排序，根据用户所期望的GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/G1%E8%BF%90%E8%A1%8C%E5%9B%BE%E8%A7%A3.jpg?raw=true" alt="图解">&lt;/p>
&lt;p>美团对于G1 GC&lt;a href="https://tech.meituan.com/2016/09/23/g1.html">&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="10-什么时候会发生gc">10. 什么时候会发生GC&lt;/h3>
&lt;p>这里说的 &lt;strong>&lt;code>GC&lt;/code>&lt;/strong> 包括了**&lt;code>Minor GC&lt;/code>** 和 **&lt;code>Full GC&lt;/code>** 两种。什么时候发生GC这里也分为两种：&lt;/p>
&lt;ul>
&lt;li>程序调用 &lt;strong>&lt;code>System.gc()&lt;/code>&lt;/strong> 通过手动的方式在程序中调用方法&lt;/li>
&lt;li>&lt;strong>&lt;code>JVM&lt;/code>&lt;/strong> 自身决定 &lt;strong>&lt;code>GC&lt;/code>&lt;/strong> 触发的时机
&lt;ul>
&lt;li>&lt;strong>Minor GC&lt;/strong>
&lt;ul>
&lt;li>JVM无法为一个新的对象在&lt;strong>新生代&lt;/strong>分配空间触发 &lt;strong>&lt;code>Minor GC&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Full GC&lt;/strong>
&lt;ul>
&lt;li>老年代空间不足或者永久代空间不足(JDK8 元数据区)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="11-总结">11. 总结&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>收集器&lt;/th>
&lt;th>串行、并行or并发&lt;/th>
&lt;th>新生代/老年代&lt;/th>
&lt;th>算法&lt;/th>
&lt;th>目标&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Serial&lt;/strong>&lt;/td>
&lt;td>串行&lt;/td>
&lt;td>新生代&lt;/td>
&lt;td>复制算法&lt;/td>
&lt;td>响应速度优先&lt;/td>
&lt;td>单CPU环境下的Client模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Serial Old&lt;/strong>&lt;/td>
&lt;td>串行&lt;/td>
&lt;td>老年代&lt;/td>
&lt;td>标记-整理&lt;/td>
&lt;td>响应速度优先&lt;/td>
&lt;td>单CPU环境下的Client模式、CMS的后备预案&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ParNew&lt;/strong>&lt;/td>
&lt;td>并行&lt;/td>
&lt;td>新生代&lt;/td>
&lt;td>复制算法&lt;/td>
&lt;td>响应速度优先&lt;/td>
&lt;td>多CPU环境时在Server模式下与CMS配合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Parallel Scavenge&lt;/strong>&lt;/td>
&lt;td>并行&lt;/td>
&lt;td>新生代&lt;/td>
&lt;td>复制算法&lt;/td>
&lt;td>吞吐量优先&lt;/td>
&lt;td>在后台运算而不需要太多交互的任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Parallel Old&lt;/strong>&lt;/td>
&lt;td>并行&lt;/td>
&lt;td>老年代&lt;/td>
&lt;td>标记-整理&lt;/td>
&lt;td>吞吐量优先&lt;/td>
&lt;td>在后台运算而不需要太多交互的任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>CMS&lt;/strong>&lt;/td>
&lt;td>并发&lt;/td>
&lt;td>老年代&lt;/td>
&lt;td>标记-清除&lt;/td>
&lt;td>响应速度优先&lt;/td>
&lt;td>集中在互联网站或B/S系统服务端上的Java应用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>G1&lt;/strong>&lt;/td>
&lt;td>并发&lt;/td>
&lt;td>both&lt;/td>
&lt;td>标记-整理+复制算法&lt;/td>
&lt;td>响应速度优先&lt;/td>
&lt;td>面向服务端应用，将来替换CMS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>1 Minor GC 只包含新生代
2 Full GC 包含了老年代和新生代(也就是说Full GC过程伴随着有Minor GC)&lt;/p>
&lt;/blockquote>
&lt;p>参考文档：&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/50d5c88b272d">https://www.jianshu.com/p/50d5c88b272d&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://crowhawk.github.io/2017/08/15/jvm_3/">https://crowhawk.github.io/2017/08/15/jvm_3/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html">https://tech.meituan.com/2017/12/29/jvm-optimize.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blogs.oracle.com/jonthecollector/our-collectors">https://blogs.oracle.com/jonthecollector/our-collectors&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://ifeve.com/useful-jvm-flags-part-7-cms-collector/">http://ifeve.com/useful-jvm-flags-part-7-cms-collector/&lt;/a>&lt;/p></description></item><item><title>Blog: 类的加载</title><link>/blog/java-se/jvm/class-loader/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/class-loader/</guid><description>
&lt;h3 id="1-虚拟机类的加载">1. 虚拟机类的加载&lt;/h3>
&lt;p>虚拟机加类的生命周期几个阶段图解如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/document/master/image/JSE/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD.png" alt="图解">&lt;/p>
&lt;p>虚拟机加载类的的三个阶段(加载&amp;mdash;&amp;gt;连接&amp;mdash;&amp;gt;初始化)：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>加载&lt;/strong>&lt;/p>
&lt;p>&lt;strong>加载&lt;/strong> 是 &lt;strong>类加载&lt;/strong> (&lt;strong>&lt;code>Class Loading&lt;/code>&lt;/strong>)过程的一个阶段在这阶段需要做三件事情：&lt;/p>
&lt;ol>
&lt;li>通过一个**类的全限定名(带包名)**来获取定义此类的二进制字节流。&lt;/li>
&lt;li>将这个字节的流所代表的静态存储结构转化成为方法区的运行时数据结构&lt;/li>
&lt;li>在内存中生成一个代表这个类的 &lt;strong>&lt;code>java.lang.Class&lt;/code>&lt;/strong> 对象，作为方法区这个类的各种数据访问入口&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>连接&lt;/strong>&lt;/p>
&lt;p>连接又分为三个阶段：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>验证&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>文件格式验证&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>Java&lt;/code>&lt;/strong> 文件是否已魔数开头&lt;/li>
&lt;li>主次版本号是否在当前虚拟机处理范围内&lt;/li>
&lt;li>常量池中的常量是否有不被支持的类型&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>元数据的验证&lt;/p>
&lt;ul>
&lt;li>是否有父类&lt;/li>
&lt;li>等等&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>字节码验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>符号应用验证&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>准备&lt;/strong>&lt;/p>
&lt;p>正式为类的变量分配内存并设置类变量初始值阶段，这些变量锁使用的内存都将在方法区中进行分配。(&lt;strong>这里的分配对象的内存景包括类变量&amp;ndash;也就是被static修饰的变量，不包括实例变量&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解析&lt;/strong>&lt;/p>
&lt;p>解析阶段是JVM将常量池内的符号引用替换为直接引用的过程。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>符号引用&lt;/strong>&lt;/p>
&lt;p>符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。例如，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。符号引用与虚拟机的内存布局无关，引用的目标并不一定加载到内存中。在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。(&lt;strong>总结一下：就是类似于占位符用一个能唯一标识自己的符号占着&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>直接引用&lt;/strong>&lt;/p>
&lt;p>直接指向目标的指针，相对偏移量，一个能间接定位到目标的句柄&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类或者接口的解析&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>字段的解析&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类方法的解析&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口方法的解析&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>初始化&lt;/strong>&lt;/p>
&lt;p>在类初始化之前的准备阶段虚拟机会将**类变量（static 修饰的变量）**分配内存并设置默认值。初始化阶段：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编译器会在将 &lt;code>.java&lt;/code> 文件编译成 &lt;code>.class&lt;/code> 文件时，收集所有类初始化代码和 &lt;code>static {}&lt;/code> 域的代码，收集在一起成为 &lt;code>&amp;lt;cinit&amp;gt;()&lt;/code> 方法 (&lt;strong>注意：静态代码块只能访问代码块之前的变量，定义之后的变量只能赋值不能访问&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">aaa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">aaa&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;123&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">bbb&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;234&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bbb&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 在ideal中会报错 但是上面一个语句可以
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">bbb&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>子类初始化时会首先调用父类的 &lt;strong>&lt;code>&amp;lt;cinit&amp;gt;()&lt;/code>&lt;/strong> 方法&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Animals&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">animals&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">animals&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;animals&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">animals&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Cat&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">Animals&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">cat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Cat&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">println&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">App&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span> &lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Cat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打印的结果：&lt;/p>
&lt;pre>&lt;code>animals
Cat
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>多线程环境下保证线程的安全&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>卸载&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Blog: JVM的内存模型</title><link>/blog/java-se/jvm/jvm-memory-model/</link><pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/jvm-memory-model/</guid><description>
&lt;h3 id="1--jvm的内存模型">1. JVM的内存模型&lt;/h3>
&lt;p>从网上找了几个内存的模型和自己画的一个&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/JVMmodel.png?raw=true" alt="图片">&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE%E8%A7%A3.png?raw=true" alt="图片">&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE%E8%A7%A3.png?raw=true" alt="图片">&lt;/p>
&lt;p>&lt;strong>线程共享：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>方法区：&lt;/strong>&lt;/p>
&lt;p>在 &lt;strong>&lt;code>Java&lt;/code>&lt;/strong> 虚拟机中，方法区是可供各线程共享的运行时内存区域。在HotSpot中，设计者将方法区纳入GC分代收集。HotSpot虚拟机堆内存被分为新生代和老年代，对堆内存进行分代管理，所以HotSpot虚拟机使用者更愿意将方法区称为 &lt;strong>&lt;code>老年代(或者叫永久代)&lt;/code>&lt;/strong> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>堆：&lt;/strong>&lt;/p>
&lt;p>堆内存是 &lt;strong>&lt;code>JVM&lt;/code>&lt;/strong> 所有线程共享的部分，在虚拟机启动的时候就已经创建了。所有的对象和数组都在堆上进行分配。这部分空间可以通过GC进行垃圾回收的。当申请不到空间时会抛出 &lt;strong>&lt;code>OutOfMemoryError&lt;/code>&lt;/strong> 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>线程隔离：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>PC寄存器&lt;/strong>&lt;/p>
&lt;p>PC寄存器也叫程序计数器，可以看成当前线程所执行的字节码的行号指示器。在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。应酬为了线程切换能够正确的恢复到正确的执行位置。每条线程都需要一个独立的程序计数器，PC寄存器所以是线程私有的和特定的线程绑定在一起的。**执行的是Java方法该寄存器保存的是当前指令的地址。如果执行的是本地方法PC寄存器就是空的。 ** ( &lt;strong>&lt;code>主要的作用就是完成线程的上下文切换&lt;/code>&lt;/strong> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>本地方法栈&lt;/strong>&lt;/p>
&lt;p>保存native方法进入区域的地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚拟机栈&lt;/strong>&lt;/p>
&lt;p>每一个 &lt;strong>&lt;code>Java&lt;/code>&lt;/strong> 线程都有自己的虚拟机栈，这个栈与线程一起创建，他的生命周期和线程一样。虚拟机栈描述的是 &lt;strong>&lt;code>Java 方法执行的内存模型&lt;/code>&lt;/strong> ，每个方法被执行的时候会同时创建一个 &lt;strong>&lt;code>栈帧&lt;/code>&lt;/strong> 用来存储局部变量表，操作数栈，动态链接，方法出口信息等。每个方法被调用直到执行完成的整个过程就对应虚拟机栈创建的一个线程的栈帧，包含了出栈和入栈的过程。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-java-heap-内存模型jdk7">2 Java Heap 内存模型（JDK7）&lt;/h3>
&lt;p>在Java中 &lt;strong>&lt;code>方法区&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>Heap(堆)&lt;/code>&lt;/strong> 应该都属于堆的范畴，但是只是不同的Java虚拟机的实现对此进行了区分而已。&lt;/p>
&lt;p>当代主流虚拟机（ &lt;strong>&lt;code>Hotspot VM&lt;/code>&lt;/strong> ）的垃圾回收都采用“分代回收”的算法。“分代回收”是基于这样一个事实：&lt;strong>对象的生命周期不同，所以针对不同生命周期的对象可以采取不同的回收方式，以便提高回收效率。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>Hotspot VM&lt;/code>&lt;/strong> 将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由 &lt;strong>&lt;code>新生代&lt;/code>&lt;/strong> ， &lt;strong>&lt;code>老年代&lt;/code>&lt;/strong> 、 &lt;strong>&lt;code>永久代构成&lt;/code>&lt;/strong> 。而 &lt;strong>&lt;code>新生代&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>老年代&lt;/code>&lt;/strong> 构成上面的JVM内存模型中说的 &lt;strong>&lt;code>堆&lt;/code>&lt;/strong> ， 而 &lt;strong>&lt;code>永久代&lt;/code>&lt;/strong> 构成了 &lt;strong>&lt;code>方法区&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/JVM%E5%A0%86%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png?raw=true" alt="图解">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>新生代(Young Generation):&lt;/strong> 大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称 &lt;strong>&lt;code>Minor GC&lt;/code>&lt;/strong> ）后只有少量对象存活，所以选用 &lt;strong>&lt;code>复制算法&lt;/code>&lt;/strong> ，只需要少量的复制成本就可以完成回收。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Eden区：&lt;/strong> 大部分对象在Eden区中生成。当 &lt;strong>&lt;code>Eden区&lt;/code>&lt;/strong> 满时，还存活的对象将被复制到 &lt;strong>&lt;code>Survivor区(S0)&lt;/code>&lt;/strong> 。(PS:程序的设计者真的是厉害命名都是结合神话故事然后又能生动反映实际情况。耶和华上帝照自己的形像造了人类的袓先，男的称亚当，女的称夏娃，安置第一对男女住在伊甸园中。伊甸园在圣经的原文中含有快乐，愉快的园子的意思.只有佩服两个字)&lt;/li>
&lt;li>&lt;strong>S0区:&lt;/strong> S0区存放Eden区GC剩下的。&lt;/li>
&lt;li>&lt;strong>S1区:&lt;/strong> S1区存放S0区GC剩下的。&lt;/li>
&lt;/ul>
&lt;p>当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>老年代（Old Generation）&lt;/strong> ：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“ &lt;strong>标记-清理&lt;/strong> ”或“ &lt;strong>标记-整理&lt;/strong> ”算法。&lt;strong>整堆包括新生代和老年代的垃圾回收称为Full GC&lt;/strong>（HotSpot VM里，除了CMS之外，&lt;strong>其它能收集老年代的GC都会同时收集整个GC堆，包括新生代&lt;/strong>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>永久代（Perm Generation）：&lt;/strong> 主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。&lt;/p>
&lt;p>JDK8用 &lt;strong>MetaSpace&lt;/strong> 代替了 &lt;strong>永久代&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-jvm具体分析">2. JVM具体分析&lt;/h3>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/JVM.png?raw=true" alt="">&lt;/p>
&lt;p>通过字节码来分析栈帧，首先看一下源码创建&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/bytes.gif?raw=true" alt="">&lt;/p>
&lt;p>这里演示了如何获取字节码的。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">Compiled&lt;/span> &lt;span style="color:#000">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Math.java&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Math&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">CONST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">github&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">mxsm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">Code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">aload_0&lt;/span>
&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">invokespecial&lt;/span> &lt;span style="color:#a40000">#&lt;/span>&lt;span style="color:#000">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">compute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">Code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iconst_1&lt;/span>
&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">istore_1&lt;/span>
&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iconst_2&lt;/span>
&lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">istore_2&lt;/span>
&lt;span style="color:#000">4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iload_1&lt;/span>
&lt;span style="color:#000">5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iload_2&lt;/span>
&lt;span style="color:#000">6&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iadd&lt;/span>
&lt;span style="color:#000">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">bipush&lt;/span> &lt;span style="color:#000">10&lt;/span>
&lt;span style="color:#000">9&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">imul&lt;/span>
&lt;span style="color:#000">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">istore_3&lt;/span>
&lt;span style="color:#000">11&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">iload_3&lt;/span>
&lt;span style="color:#000">12&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ireturn&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">java&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">lang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]);&lt;/span>
&lt;span style="color:#000">Code&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#a40000">#&lt;/span>&lt;span style="color:#000">2&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// class com/github/mxsm/Math
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">dup&lt;/span>
&lt;span style="color:#000">4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">invokespecial&lt;/span> &lt;span style="color:#a40000">#&lt;/span>&lt;span style="color:#000">3&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Method &amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">astore_1&lt;/span>
&lt;span style="color:#000">8&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">aload_1&lt;/span>
&lt;span style="color:#000">9&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">invokevirtual&lt;/span> &lt;span style="color:#a40000">#&lt;/span>&lt;span style="color:#000">4&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Method compute:()I
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">12&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">pop&lt;/span>
&lt;span style="color:#000">13&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>命令对照表：&lt;a href="https://xfl03.gitee.io/coremodtutor/%E9%99%84%E5%BD%95B.html">https://xfl03.gitee.io/coremodtutor/%E9%99%84%E5%BD%95B.html&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Blog: JVM常用的命令</title><link>/blog/java-se/jvm/jvm-common-command/</link><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/jvm-common-command/</guid><description>
&lt;h3 id="查看jvm默认垃圾收集器">查看JVM默认垃圾收集器&lt;/h3>
&lt;p>命令：&lt;/p>
&lt;pre>&lt;code>java -XX:+PrintCommandLineFlags -version
&lt;/code>&lt;/pre>&lt;p>JDK8的打印结果：&lt;/p>
&lt;pre>&lt;code>$ java -XX:+PrintCommandLineFlags -version
-XX:InitialHeapSize=134177280 -XX:MaxHeapSize=2146836480 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC
java version &amp;quot;1.8.0_151&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_151-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)
&lt;/code>&lt;/pre>&lt;p>JDK11的打印结果：&lt;/p>
&lt;pre>&lt;code>$ ./java -XX:+PrintCommandLineFlags -version
-XX:G1ConcRefinementThreads=4 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=134177280 -XX:MaxHeapSize=2146836480 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC -XX:-UseLargePagesIndividualAllocation
java version &amp;quot;11.0.2&amp;quot; 2019-01-15 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.2+9-LTS)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.2+9-LTS, mixed mode)
&lt;/code>&lt;/pre>&lt;h3 id="jvm打印gc日志详情">JVM打印GC日志详情&lt;/h3>
&lt;p>命令：&lt;/p>
&lt;pre>&lt;code>-XX:+PrintGCDetails
&lt;/code>&lt;/pre>&lt;h3 id="查看非标准的参数命令">查看非标准的参数命令&lt;/h3>
&lt;pre>&lt;code>java -XX:+PrintFlagsInitial 查看-XX的
java -X 参看-X的
&lt;/code>&lt;/pre></description></item><item><title>Blog: Java GC日志图解</title><link>/blog/java-se/jvm/java-gc-log/</link><pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/java-gc-log/</guid><description>
&lt;h3 id="1-gc日志开启">1. GC日志开启&lt;/h3>
&lt;p>&lt;strong>Java&lt;/strong> 的GC日志可以通过命令 &lt;strong>&lt;code>-XX:+PrintGCDetails&lt;/code>&lt;/strong> 开启。下面就来看看如何看懂GC的日志。&lt;/p>
&lt;h3 id="2-如何看gc日志">2. 如何看GC日志&lt;/h3>
&lt;p>下面是以&lt;strong>JDK8&lt;/strong>为例子，GC也是用的默认(&lt;strong>ParallelGC&lt;/strong>)的没有做任何修改。&lt;strong>GC&lt;/strong>分为两种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Minor GC&lt;/strong> — &lt;strong>新生代GC&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/MinorGCDetail.jpg?raw=true" alt="图解">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>GC (System.gc())：&lt;/strong> &lt;strong>GC&lt;/strong>的类型 GC表示的是 &lt;strong>Minor GC&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>[PSYoungGen: 7887K-&amp;gt;1228K(76288K)]&lt;/strong>&lt;/p>
&lt;pre>&lt;code>PSYoungGen: 表示年轻带
7887K: GC前新生代占用的内存
1228K：GC后新生代占用的内存
76288K：新生代总共大小
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>7887K-&amp;gt;1236K(251392K)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>7887K：GC前JVM堆内存占用
1236K：GC后JVM堆内存占用
251392K： JVM堆总大小
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>0.0019310 secs&lt;/strong> GC耗时&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>[Times: user=0.01 sys=0.00, real=0.01 secs]&lt;/strong>&lt;/p>
&lt;pre>&lt;code>user=0.01 用户耗时
sys=0.00 系统耗时
real=0.01 实际耗时
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Full GC(Major GC) — 老年代GC&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/JSE/FullGCDetail.jpg?raw=true" alt="图">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;strong>Full GC (System.gc())&lt;/strong> GC类型—&lt;strong>Full GC&lt;/strong>&lt;/li>
&lt;li>&lt;strong>[PSYoungGen: 1228K-&amp;gt;0K(76288K)]:&lt;/strong> 新生代：GC前内存占用—&amp;gt;GC后内存占用(新生代内存占用总量)&lt;/li>
&lt;li>&lt;strong>[ParOldGen: 8K-&amp;gt;1081K(175104K)]:&lt;/strong> 老年代：GC前内存占用—&amp;gt;GC后内存占用(老年代的内存占用总量)&lt;/li>
&lt;li>&lt;strong>1236K-&amp;gt;1081K(251392K)：&lt;/strong> JVM内存占用: GC前内存占用—&amp;gt;GC后内存占用(JVM内存占用总量)&lt;/li>
&lt;li>&lt;strong>[Metaspace: 3212K-&amp;gt;3212K(1056768K)]：&lt;/strong> 元数据区： GC前内存在用—&amp;gt;GC后内存占用(元数据区总量)&lt;/li>
&lt;li>后面的都是时间&lt;/li>
&lt;/ol></description></item><item><title>Blog: JVM参数</title><link>/blog/java-se/jvm/jvm-paramters/</link><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid>/blog/java-se/jvm/jvm-paramters/</guid><description>
&lt;h3 id="1-参数分类">1. 参数分类&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>其一是标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容；&lt;/p>
&lt;p>这类选项的功能是很稳定的，在后续版本中也不太会发生变化。&lt;/p>
&lt;p>运行java或者 java -help 可以看到所有的标准选项。&lt;/p>
&lt;p>语法：所有的标准选项都是以 - 开头，比如-version，-server等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其二是非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容；&lt;/p>
&lt;p>这类选项的功能还是很稳定，但官方的说法是它们的行为可能会在后续版本中改变，也有可能不在后续版本中提供了.&lt;/p>
&lt;p>运行 命令可以看到所有的X选项。&lt;/p>
&lt;pre>&lt;code>java -X
&lt;/code>&lt;/pre>&lt;p>语法：这类选项都是以 -X 开头，比如-Xms。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其三是非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用；&lt;/p>
&lt;p>这类选项是属于实验性，主要是给JVM开发者用于开发和调试JVM的，在后续的版本中行为有可能会变化。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;ul>
&lt;li>如果是布尔类型的选项，它的格式为-XX:+flag或者-XX:-flag，分别表示开启和关闭该选项。&lt;/li>
&lt;li>针对非布尔类型的选项，它的格式为-XX:flag=value&lt;/li>
&lt;/ul>
&lt;p>查看命令：&lt;/p>
&lt;pre>&lt;code>java -XX:+PrintFlagsInitial
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item></channel></rss>