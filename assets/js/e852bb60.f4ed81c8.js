"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[4899],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>m});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),l=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},g=function(e){var n=l(e.components);return s.createElement(i.Provider,{value:n},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},c=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,g=u(e,["components","mdxType","originalType","parentName"]),f=l(t),c=r,m=f["".concat(i,".").concat(c)]||f[c]||p[c]||o;return t?s.createElement(m,a(a({ref:n},g),{},{components:t})):s.createElement(m,a({ref:n},g))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=c;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u[f]="string"==typeof e?e:r,a[1]=u;for(var l=2;l<o;l++)a[l]=t[l];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9486:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const o={title:"RocketMQ\u6e90\u7801\u89e3\u6790-Broker\u63a5\u6536\u62c9\u53d6\u6d88\u606f",date:new Date("2020-03-28T00:00:00.000Z"),weight:202106012236},a=void 0,u={unversionedId:"rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull",id:"rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull",title:"RocketMQ\u6e90\u7801\u89e3\u6790-Broker\u63a5\u6536\u62c9\u53d6\u6d88\u606f",description:"\u4ee5\u4e0b\u6e90\u7801\u57fa\u4e8eRocket MQ 4.7.0",source:"@site/docs/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull.md",sourceDirName:"rocketmq/rocketmq4/broker",slug:"/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull",permalink:"/docs/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-recevie-pull.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1694344731,formattedLastUpdatedAt:"Sep 10, 2023",frontMatter:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-Broker\u63a5\u6536\u62c9\u53d6\u6d88\u606f",date:"2020-03-28T00:00:00.000Z",weight:202106012236},sidebar:"rocketmq4",previous:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-Broker\u6d88\u606f\u5b58\u50a8\u8bbe\u8ba1\u4e0e\u5b9e\u73b0",permalink:"/docs/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-message-store"},next:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-Broker\u542f\u52a8",permalink:"/docs/rocketmq/rocketmq4/broker/RocketMQ-analysis-Broker-start"}},i={},l=[{value:"PullMessageProcessor",id:"pullmessageprocessor",level:3},{value:"DefaultMessageStore.getMessage",id:"defaultmessagestoregetmessage",level:3},{value:"\u6302\u8d77\u8bf7\u6c42\u5904\u7406",id:"\u6302\u8d77\u8bf7\u6c42\u5904\u7406",level:3}],g={toc:l},f="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,s.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4ee5\u4e0b\u6e90\u7801\u57fa\u4e8eRocket MQ 4.7.0")),(0,r.kt)("p",null,"\u5f15\u8a00\uff1aBroker\u5bf9\u4e8e\u4e0d\u540c\u6d88\u606f\u6709\u4e0d\u540c\u7684NettyRequestProcessor\uff0c\u5bf9\u4e8eDefaultMQPushConsumer\u7684pull\u8bf7\u6c42\u5bf9\u5e94\u7684Processor\u4e3aPullMessageProcessor\u3002"),(0,r.kt)("h3",{id:"pullmessageprocessor"},"PullMessageProcessor"),(0,r.kt)("p",null,"\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff0c\u5904\u7406DefaultMQPushConsumer\u7684pull\u8bf7\u6c42\u4e3b\u8981\u662f\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"PullMessageProcessor.processRequest"))," \u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'/**\n     *\n     * @param channel\n     * @param request \u8bf7\u6c42\u7684command\n     * @param brokerAllowSuspend \u662f\u5426\u5141\u8bb8\u6302\u8d77\n     * @return\n     * @throws RemotingCommandException\n     */\n    private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)\n        throws RemotingCommandException {\n        RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();\n        final PullMessageRequestHeader requestHeader =\n            (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n\n        response.setOpaque(request.getOpaque());\n\n        log.debug("receive PullMessage request command, {}", request);\n\n        //\u5224\u65adBroker\u662f\u5426\u53ef\u8bfb\n        if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark(String.format("the broker[%s] pulling message is forbidden", this.brokerController.getBrokerConfig().getBrokerIP1()));\n            return response;\n        }\n\n        // \u5224\u65adconsumerGroup\u662f\u5426\u5b58\u5728-\u5982\u679c\u4e0d\u5b58\u5728\u5224\u65ad\u662f\u5426\u5141\u8bb8\u81ea\u52a8\u521b\u5efa\uff0c\u53ef\u4ee5\u81ea\u52a8\u521b\u5efa\u5c31\u76f4\u63a5\u521b\u5efa\u6d88\u8d39\u8005\u7ec4(\u6743\u9650\u63a7\u5236)\n        SubscriptionGroupConfig subscriptionGroupConfig =\n            this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n        if (null == subscriptionGroupConfig) {\n            response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n            response.setRemark(String.format("subscription group [%s] does not exist, %s", requestHeader.getConsumerGroup(), FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n            return response;\n        }\n\n        // \u5224\u65adconsumerGroup\u7684\u6d88\u8d39\u72b6\u6001\u662f\u5426Enable\n        if (!subscriptionGroupConfig.isConsumeEnable()) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark("subscription group no permission, " + requestHeader.getConsumerGroup());\n            return response;\n        }\n\n        final boolean hasSuspendFlag = PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());\n        final boolean hasCommitOffsetFlag = PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());\n        final boolean hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n\n        //\u83b7\u53d6\u6302\u8d77\u8d85\u65f6\u65f6\u95f4\n        final long suspendTimeoutMillisLong = hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : 0;\n\n        //\u5224\u65ad\u4e3b\u9898\u914d\u7f6e\u662f\u5426\u4e3a\u7a7a\n        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n        if (null == topicConfig) {\n            log.error("the topic {} not exist, consumer: {}", requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));\n            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n            response.setRemark(String.format("topic[%s] not exist, apply first please! %s", requestHeader.getTopic(), FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));\n            return response;\n        }\n\n        //\u5224\u65ad\u4e3b\u9898\u662f\u5426\u53ef\u8bfb\n        if (!PermName.isReadable(topicConfig.getPerm())) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark("the topic[" + requestHeader.getTopic() + "] pulling message is forbidden");\n            return response;\n        }\n\n        //\u5224\u65ad\u8bf7\u6c42\u6d88\u606f\u961f\u5217ID\u662f\u5426\u5408\u6cd5\n        if (requestHeader.getQueueId() < 0 || requestHeader.getQueueId() >= topicConfig.getReadQueueNums()) {\n            String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",\n                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());\n            log.warn(errorInfo);\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark(errorInfo);\n            return response;\n        }\n\n        SubscriptionData subscriptionData = null;\n        ConsumerFilterData consumerFilterData = null;\n\n        // \u6709\u8bbe\u7f6esubscribe flag,\u8868\u793a\u7b2c\u4e00\u6b21pull\u6216\u8005\u9700\u8981\u66f4\u65b0filter\n        if (hasSubscriptionFlag) {\n            try {\n                // \u83b7\u5f97\u8ba2\u9605\u4fe1\u606f\uff0c\u7528\u4e8e\u8fc7\u6ee4\u6d88\u606f\n                subscriptionData = FilterAPI.build(\n                    requestHeader.getTopic(), requestHeader.getSubscription(), requestHeader.getExpressionType()\n                );\n\n                // \u662f\u5426\u4f7f\u7528\u4e86\u8868\u8fbe\u5f0f\u8fc7\u6ee4\n                if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n                    consumerFilterData = ConsumerFilterManager.build(\n                        requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getSubscription(),\n                        requestHeader.getExpressionType(), requestHeader.getSubVersion()\n                    );\n                    assert consumerFilterData != null;\n                }\n            } catch (Exception e) {\n                log.warn("Parse the consumer\'s subscription[{}] failed, group: {}", requestHeader.getSubscription(),\n                    requestHeader.getConsumerGroup());\n                response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);\n                response.setRemark("parse the consumer\'s subscription failed");\n                return response;\n            }\n        } else {\n            // \u6ca1\u6709\u8bbe\u7f6esubscribe flag\uff0c\u8868\u793a\u4e4b\u524d\u5df2\u7ecf\u8ba2\u9605\u8fc7\u4e86,\u5bf9\u6bd4\u8ba2\u9605\u6761\u4ef6\u662f\u5426\u4e00\u81f4\n\n            // \u5bf9\u4e8e\u540c\u4e00\u4e2aConsumerGroup\u4e0b\u7684\u591a\u4e2aconsumer\u5ba2\u6237\u7aef\uff0cBroker\u8981\u6c42\u8ba2\u9605\u53c2\u6570\u8bbe\u7f6e\u5fc5\u987b\u8981\u662f\u4e00\u81f4\u7684\uff0c\u8981\u4e0d\u7136\u4f1a\u9020\u6210\u6570\u636e\u6df7\u4e71\n            ConsumerGroupInfo consumerGroupInfo =\n                this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());\n            if (null == consumerGroupInfo) {\n                log.warn("the consumer\'s group info not exist, group: {}", requestHeader.getConsumerGroup());\n                response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n                response.setRemark("the consumer\'s group info not exist" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n                return response;\n            }\n\n            if (!subscriptionGroupConfig.isConsumeBroadcastEnable()\n                && consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) {\n                response.setCode(ResponseCode.NO_PERMISSION);\n                response.setRemark("the consumer group[" + requestHeader.getConsumerGroup() + "] can not consume by broadcast way");\n                return response;\n            }\n\n            subscriptionData = consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());\n            if (null == subscriptionData) {\n                log.warn("the consumer\'s subscription not exist, group: {}, topic:{}", requestHeader.getConsumerGroup(), requestHeader.getTopic());\n                response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n                response.setRemark("the consumer\'s subscription not exist" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n                return response;\n            }\n\n            if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n                log.warn("The broker\'s subscription is not latest, group: {} {}", requestHeader.getConsumerGroup(),\n                    subscriptionData.getSubString());\n                response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n                response.setRemark("the consumer\'s subscription not latest");\n                return response;\n            }\n            if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n                consumerFilterData = this.brokerController.getConsumerFilterManager().get(requestHeader.getTopic(),\n                    requestHeader.getConsumerGroup());\n                if (consumerFilterData == null) {\n                    response.setCode(ResponseCode.FILTER_DATA_NOT_EXIST);\n                    response.setRemark("The broker\'s consumer filter data is not exist!Your expression may be wrong!");\n                    return response;\n                }\n                if (consumerFilterData.getClientVersion() < requestHeader.getSubVersion()) {\n                    log.warn("The broker\'s consumer filter data is not latest, group: {}, topic: {}, serverV: {}, clientV: {}",\n                        requestHeader.getConsumerGroup(), requestHeader.getTopic(), consumerFilterData.getClientVersion(), requestHeader.getSubVersion());\n                    response.setCode(ResponseCode.FILTER_DATA_NOT_LATEST);\n                    response.setRemark("the consumer\'s consumer filter data not latest");\n                    return response;\n                }\n            }\n        }\n\n        if (!ExpressionType.isTagType(subscriptionData.getExpressionType())\n            && !this.brokerController.getBrokerConfig().isEnablePropertyFilter()) {\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark("The broker does not support consumer to filter message by " + subscriptionData.getExpressionType());\n            return response;\n        }\n\n        //\u521b\u5efa\u6d88\u606f\u8fc7\u6ee4\u5668\n        MessageFilter messageFilter;\n        if (this.brokerController.getBrokerConfig().isFilterSupportRetry()) {\n            messageFilter = new ExpressionForRetryMessageFilter(subscriptionData, consumerFilterData,\n                this.brokerController.getConsumerFilterManager());\n        } else {\n            messageFilter = new ExpressionMessageFilter(subscriptionData, consumerFilterData,\n                this.brokerController.getConsumerFilterManager());\n        }\n\n        //\u8bfb\u53d6\u6d88\u606f\n        final GetMessageResult getMessageResult =\n            this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n                requestHeader.getQueueId(), requestHeader.getQueueOffset(), requestHeader.getMaxMsgNums(), messageFilter);\n        if (getMessageResult != null) {\n            response.setRemark(getMessageResult.getStatus().name());\n            responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());\n            responseHeader.setMinOffset(getMessageResult.getMinOffset());\n            responseHeader.setMaxOffset(getMessageResult.getMaxOffset());\n\n            //\u5224\u65ad\u662f\u5426\u5efa\u8bae\u4eceslave\u8bfb\u53d6\u6570\u636e---\u9ed8\u8ba4\u4e3afalse\n            if (getMessageResult.isSuggestPullingFromSlave()) {\n                responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n            } else {\n                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n            }\n\n            switch (this.brokerController.getMessageStoreConfig().getBrokerRole()) {\n                case ASYNC_MASTER:\n                case SYNC_MASTER:\n                    break;\n                case SLAVE:\n                    // \u5982\u679c\u5f53\u524dbroker\u662fslave\uff0c\u5e76\u4e14\u4e0d\u652f\u6301read\uff0c\u5219\u63d0\u793a\u5ba2\u6237\u7aef\u4ecemaster\u8bfb\n                    if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n                        response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n                        responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n                    }\n                    break;\n            }\n\n            if (this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n                // \u6d88\u8d39\u592a\u6162\u91cd\u5b9a\u5411\u5230\u53e6\u5916\u4e00\u53f0\u673a\u5668\u6d88\u8d39\n                if (getMessageResult.isSuggestPullingFromSlave()) {\n                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n                }\n                // consume ok\n                else {\n                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n                }\n            } else {\n                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n            }\n\n            //\u5c06\u8bfb\u53d6\u7684\u6d88\u606f\u72b6\u6001\u8f6c\u6362\u4e3aResponse\u7684\u72b6\u6001code\n            switch (getMessageResult.getStatus()) {\n                case FOUND:\n                    response.setCode(ResponseCode.SUCCESS);\n                    break;\n                case MESSAGE_WAS_REMOVING:\n                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n                    break;\n                case NO_MATCHED_LOGIC_QUEUE:\n                case NO_MESSAGE_IN_QUEUE:\n                    if (0 != requestHeader.getQueueOffset()) {\n                        response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n\n                        // XXX: warn and notify me\n                        log.info("the broker store no queue data, fix the request offset {} to {}, Topic: {} QueueId: {} Consumer Group: {}",\n                            requestHeader.getQueueOffset(),\n                            getMessageResult.getNextBeginOffset(),\n                            requestHeader.getTopic(),\n                            requestHeader.getQueueId(),\n                            requestHeader.getConsumerGroup()\n                        );\n                    } else {\n                        response.setCode(ResponseCode.PULL_NOT_FOUND);\n                    }\n                    break;\n                case NO_MATCHED_MESSAGE:\n                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n                    break;\n                case OFFSET_FOUND_NULL:\n                    response.setCode(ResponseCode.PULL_NOT_FOUND);\n                    break;\n                case OFFSET_OVERFLOW_BADLY:\n                    response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n                    // XXX: warn and notify me\n                    log.info("the request offset: {} over flow badly, broker max offset: {}, consumer: {}",\n                        requestHeader.getQueueOffset(), getMessageResult.getMaxOffset(), channel.remoteAddress());\n                    break;\n                case OFFSET_OVERFLOW_ONE:\n                    response.setCode(ResponseCode.PULL_NOT_FOUND);\n                    break;\n                case OFFSET_TOO_SMALL:\n                    response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n                    log.info("the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}",\n                        requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueOffset(),\n                        getMessageResult.getMinOffset(), channel.remoteAddress());\n                    break;\n                default:\n                    assert false;\n                    break;\n            }\n\n            if (this.hasConsumeMessageHook()) {\n                ConsumeMessageContext context = new ConsumeMessageContext();\n                context.setConsumerGroup(requestHeader.getConsumerGroup());\n                context.setTopic(requestHeader.getTopic());\n                context.setQueueId(requestHeader.getQueueId());\n\n                String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\n\n                switch (response.getCode()) {\n                    case ResponseCode.SUCCESS:\n                        int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();\n                        int incValue = getMessageResult.getMsgCount4Commercial() * commercialBaseCount;\n\n                        context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);\n                        context.setCommercialRcvTimes(incValue);\n                        context.setCommercialRcvSize(getMessageResult.getBufferTotalSize());\n                        context.setCommercialOwner(owner);\n\n                        break;\n                    case ResponseCode.PULL_NOT_FOUND:\n                        if (!brokerAllowSuspend) {\n\n                            context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\n                            context.setCommercialRcvTimes(1);\n                            context.setCommercialOwner(owner);\n\n                        }\n                        break;\n                    case ResponseCode.PULL_RETRY_IMMEDIATELY:\n                    case ResponseCode.PULL_OFFSET_MOVED:\n                        context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\n                        context.setCommercialRcvTimes(1);\n                        context.setCommercialOwner(owner);\n                        break;\n                    default:\n                        assert false;\n                        break;\n                }\n\n                this.executeConsumeMessageHookBefore(context);\n            }\n\n            //\u8fdb\u4e00\u6b65\u5904\u7406\u8fd4\u56de\u7684\u7ed3\u679c\n            switch (response.getCode()) {\n                case ResponseCode.SUCCESS:\n\n                    //\u66f4\u65b0topic\u83b7\u53d6\u7684\u6d88\u606f\u6570\u91cf\u4fe1\u606f\n                    this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n                        getMessageResult.getMessageCount());\n\n                    //\u66f4\u65b0\u7edf\u8ba1\u7684\u6d88\u606f\u5927\u5c0f\n                    this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n                        getMessageResult.getBufferTotalSize());\n\n                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());\n                    if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {\n                        final long beginTimeMills = this.brokerController.getMessageStore().now();\n                        final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());\n                        this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),\n                            requestHeader.getTopic(), requestHeader.getQueueId(),\n                            (int) (this.brokerController.getMessageStore().now() - beginTimeMills));\n                        response.setBody(r);\n                    } else {\n                        try {\n                            FileRegion fileRegion =\n                                new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);\n                            channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {\n                                @Override\n                                public void operationComplete(ChannelFuture future) throws Exception {\n                                    getMessageResult.release();\n                                    if (!future.isSuccess()) {\n                                        log.error("transfer many message by pagecache failed, {}", channel.remoteAddress(), future.cause());\n                                    }\n                                }\n                            });\n                        } catch (Throwable e) {\n                            log.error("transfer many message by pagecache exception", e);\n                            getMessageResult.release();\n                        }\n\n                        response = null;\n                    }\n                    break;\n\n                //\u6ca1\u6709\u8bfb\u53d6\u5230\u6d88\u606f\uff0c\u5219hold\u4f4f\u8bf7\u6c42\uff0c\u6709\u65b0\u6d88\u606f\u65f6\u5524\u9192\n                //\u7b49\u5f85\u8d85\u65f6\u540e\u8fd8\u662f\u6ca1\u8bfb\u5230brokerAllowSuspend=false\n                case ResponseCode.PULL_NOT_FOUND:\n\n                    //brokerAllowSuspend=ture \u65b9\u6cd5\u4f20\u5165\n                    if (brokerAllowSuspend && hasSuspendFlag) {\n                        long pollingTimeMills = suspendTimeoutMillisLong;\n                        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n                        }\n\n                        String topic = requestHeader.getTopic();\n                        long offset = requestHeader.getQueueOffset();\n                        int queueId = requestHeader.getQueueId();\n                        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n                            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n                        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n                        response = null;\n                        break;\n                    }\n\n                case ResponseCode.PULL_RETRY_IMMEDIATELY:\n                    break;\n                // \u6d88\u8d39\u5f00\u59cb\u7684offset\u4e0d\u6b63\u786e\n                case ResponseCode.PULL_OFFSET_MOVED:\n                    if (this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE\n                        || this.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) {\n                        MessageQueue mq = new MessageQueue();\n                        mq.setTopic(requestHeader.getTopic());\n                        mq.setQueueId(requestHeader.getQueueId());\n                        mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n\n                        OffsetMovedEvent event = new OffsetMovedEvent();\n                        event.setConsumerGroup(requestHeader.getConsumerGroup());\n                        event.setMessageQueue(mq);\n                        event.setOffsetRequest(requestHeader.getQueueOffset());\n                        event.setOffsetNew(getMessageResult.getNextBeginOffset());\n                        this.generateOffsetMovedEvent(event);\n                        log.warn(\n                            "PULL_OFFSET_MOVED:correction offset. topic={}, groupId={}, requestOffset={}, newOffset={}, suggestBrokerId={}",\n                            requestHeader.getTopic(), requestHeader.getConsumerGroup(), event.getOffsetRequest(), event.getOffsetNew(),\n                            responseHeader.getSuggestWhichBrokerId());\n                    } else {\n                        responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n                        response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n                        log.warn("PULL_OFFSET_MOVED:none correction. topic={}, groupId={}, requestOffset={}, suggestBrokerId={}",\n                            requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getQueueOffset(),\n                            responseHeader.getSuggestWhichBrokerId());\n                    }\n\n                    break;\n                default:\n                    assert false;\n            }\n        } else {\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark("store getMessage return null");\n        }\n\n        boolean storeOffsetEnable = brokerAllowSuspend;\n        storeOffsetEnable = storeOffsetEnable && hasCommitOffsetFlag;\n        storeOffsetEnable = storeOffsetEnable\n            && this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;\n        if (storeOffsetEnable) {\n            //\u6301\u4e45\u5316\u50a8\u5b58offerSet\n            this.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),\n                requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getCommitOffset());\n        }\n        return response;\n    }\n')),(0,r.kt)("p",null,"\u4ece\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff1a\u6839\u636e ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Topic\u3001queueId\u3001offfset"))," \u4ee5\u53ca\u8fc7\u6ee4\u5668\u4ece ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"MessageStore"))," \u83b7\u53d6\u6d88\u606f\u3002\u5982\u679c\u6210\u529f\u83b7\u53d6\u5230\u6d88\u606f\u6839\u636e\u914d\u7f6e\u6709\u4e24\u79cd\u8fd4\u56de\u7684\u65b9\u5f0f\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"ByteBuffer"),"\u4e2d\u5c06\u6570\u636e\u8bfb\u53d6\u5230response\u4e2d\uff08\u7ecf\u8fc7\u5806\uff09"),(0,r.kt)("li",{parentName:"ol"},"netty\u76f4\u63a5\u8bfb\u53d6",(0,r.kt)("inlineCode",{parentName:"li"},"ByteBuffer"),"\uff0c\u5c06\u6d88\u606f\u5199\u7ed9\u5ba2\u6237\u7aef")),(0,r.kt)("h3",{id:"defaultmessagestoregetmessage"},"DefaultMessageStore.getMessage"),(0,r.kt)("p",null,"\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public GetMessageResult getMessage(final String group, final String topic, final int queueId, final long offset,\n        final int maxMsgNums,\n        final MessageFilter messageFilter) {\n        if (this.shutdown) {\n            log.warn("message store has shutdown, so getMessage is forbidden");\n            return null;\n        }\n\n        if (!this.runningFlags.isReadable()) {\n            log.warn("message store is not readable, so getMessage is forbidden " + this.runningFlags.getFlagBits());\n            return null;\n        }\n\n        long beginTime = this.getSystemClock().now();\n\n        GetMessageStatus status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;\n        long nextBeginOffset = offset;\n        long minOffset = 0;\n        long maxOffset = 0;\n\n        GetMessageResult getResult = new GetMessageResult();\n\n        final long maxOffsetPy = this.commitLog.getMaxOffset();\n\n        //\u627e\u5230\u5bf9\u5e94\u7684\u6d88\u8d39\u961f\u5217\n        ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);\n        if (consumeQueue != null) {\n            minOffset = consumeQueue.getMinOffsetInQueue();\n            maxOffset = consumeQueue.getMaxOffsetInQueue();\n\n            if (maxOffset == 0) {\n                status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;\n                nextBeginOffset = nextOffsetCorrection(offset, 0);\n            } else if (offset < minOffset) {\n                status = GetMessageStatus.OFFSET_TOO_SMALL;\n                nextBeginOffset = nextOffsetCorrection(offset, minOffset);\n            } else if (offset == maxOffset) {\n                status = GetMessageStatus.OFFSET_OVERFLOW_ONE;\n                nextBeginOffset = nextOffsetCorrection(offset, offset);\n            } else if (offset > maxOffset) {\n                status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;\n                if (0 == minOffset) {\n                    nextBeginOffset = nextOffsetCorrection(offset, minOffset);\n                } else {\n                    nextBeginOffset = nextOffsetCorrection(offset, maxOffset);\n                }\n            } else {\n                SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(offset);\n                if (bufferConsumeQueue != null) {\n                    try {\n                        status = GetMessageStatus.NO_MATCHED_MESSAGE;\n\n                        long nextPhyFileStartOffset = Long.MIN_VALUE;\n                        long maxPhyOffsetPulling = 0;\n\n                        int i = 0;\n                        final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);\n                        final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();\n                        ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n                        for (; i < bufferConsumeQueue.getSize() && i < maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n                            long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();\n                            int sizePy = bufferConsumeQueue.getByteBuffer().getInt();\n                            long tagsCode = bufferConsumeQueue.getByteBuffer().getLong();\n\n                            maxPhyOffsetPulling = offsetPy;\n\n                            if (nextPhyFileStartOffset != Long.MIN_VALUE) {\n                                if (offsetPy < nextPhyFileStartOffset)\n                                    continue;\n                            }\n\n                            boolean isInDisk = checkInDiskByCommitOffset(offsetPy, maxOffsetPy);\n\n                            if (this.isTheBatchFull(sizePy, maxMsgNums, getResult.getBufferTotalSize(), getResult.getMessageCount(),\n                                isInDisk)) {\n                                break;\n                            }\n\n                            boolean extRet = false, isTagsCodeLegal = true;\n                            if (consumeQueue.isExtAddr(tagsCode)) {\n                                extRet = consumeQueue.getExt(tagsCode, cqExtUnit);\n                                if (extRet) {\n                                    tagsCode = cqExtUnit.getTagsCode();\n                                } else {\n                                    // can\'t find ext content.Client will filter messages by tag also.\n                                    log.error("[BUG] can\'t find consume queue extend file content!addr={}, offsetPy={}, sizePy={}, topic={}, group={}",\n                                        tagsCode, offsetPy, sizePy, topic, group);\n                                    isTagsCodeLegal = false;\n                                }\n                            }\n\n                            if (messageFilter != null\n                                && !messageFilter.isMatchedByConsumeQueue(isTagsCodeLegal ? tagsCode : null, extRet ? cqExtUnit : null)) {\n                                if (getResult.getBufferTotalSize() == 0) {\n                                    status = GetMessageStatus.NO_MATCHED_MESSAGE;\n                                }\n\n                                continue;\n                            }\n\n                            SelectMappedBufferResult selectResult = this.commitLog.getMessage(offsetPy, sizePy);\n                            if (null == selectResult) {\n                                if (getResult.getBufferTotalSize() == 0) {\n                                    status = GetMessageStatus.MESSAGE_WAS_REMOVING;\n                                }\n\n                                nextPhyFileStartOffset = this.commitLog.rollNextFile(offsetPy);\n                                continue;\n                            }\n\n                            if (messageFilter != null\n                                && !messageFilter.isMatchedByCommitLog(selectResult.getByteBuffer().slice(), null)) {\n                                if (getResult.getBufferTotalSize() == 0) {\n                                    status = GetMessageStatus.NO_MATCHED_MESSAGE;\n                                }\n                                // release...\n                                selectResult.release();\n                                continue;\n                            }\n\n                            this.storeStatsService.getGetMessageTransferedMsgCount().incrementAndGet();\n                            getResult.addMessage(selectResult);\n                            status = GetMessageStatus.FOUND;\n                            nextPhyFileStartOffset = Long.MIN_VALUE;\n                        }\n\n                        if (diskFallRecorded) {\n                            long fallBehind = maxOffsetPy - maxPhyOffsetPulling;\n                            brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);\n                        }\n\n                        nextBeginOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n\n                        long diff = maxOffsetPy - maxPhyOffsetPulling;\n                        long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE\n                            * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));\n                        getResult.setSuggestPullingFromSlave(diff > memory);\n                    } finally {\n\n                        bufferConsumeQueue.release();\n                    }\n                } else {\n                    status = GetMessageStatus.OFFSET_FOUND_NULL;\n                    nextBeginOffset = nextOffsetCorrection(offset, consumeQueue.rollNextFile(offset));\n                    log.warn("consumer request topic: " + topic + "offset: " + offset + " minOffset: " + minOffset + " maxOffset: "\n                        + maxOffset + ", but access logic queue failed.");\n                }\n            }\n        } else {\n            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;\n            nextBeginOffset = nextOffsetCorrection(offset, 0);\n        }\n\n        if (GetMessageStatus.FOUND == status) {\n            this.storeStatsService.getGetMessageTimesTotalFound().incrementAndGet();\n        } else {\n            this.storeStatsService.getGetMessageTimesTotalMiss().incrementAndGet();\n        }\n        long elapsedTime = this.getSystemClock().now() - beginTime;\n        this.storeStatsService.setGetMessageEntireTimeMax(elapsedTime);\n\n        getResult.setStatus(status);\n        getResult.setNextBeginOffset(nextBeginOffset);\n        getResult.setMaxOffset(maxOffset);\n        getResult.setMinOffset(minOffset);\n        return getResult;\n    }\n')),(0,r.kt)("p",null,"\u9996\u5148\u6839\u636etopic\u548cqueueId\u627e\u5230\u5bf9\u5e94\u7684ConsumeQueue\u3002\u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684MappedFile\u83b7\u53d6\u5bf9\u5e94\u6570\u91cf\u7684\u6570\u636e\uff0c\u7136\u540e\u6839\u636etag\u8fdb\u884c\u8fc7\u6ee4\u51fa\u6765\u5bf9\u5e94\u7684\u6570\u636e\u3002"),(0,r.kt)("h3",{id:"\u6302\u8d77\u8bf7\u6c42\u5904\u7406"},"\u6302\u8d77\u8bf7\u6c42\u5904\u7406"),(0,r.kt)("p",null,"\u4e4b\u524dPullRequest\u8bf7\u6c42\u5904\u7406\u4e2d\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"case ResponseCode.PULL_NOT_FOUND:\n\n                    //brokerAllowSuspend=ture \u65b9\u6cd5\u4f20\u5165\n                    if (brokerAllowSuspend && hasSuspendFlag) {\n                        long pollingTimeMills = suspendTimeoutMillisLong;\n                        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n                        }\n\n                        String topic = requestHeader.getTopic();\n                        long offset = requestHeader.getQueueOffset();\n                        int queueId = requestHeader.getQueueId();\n                        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n                            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n                        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n                        response = null;\n                        break;\n                    }\n")),(0,r.kt)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u5728\u6ca1\u6709\u627e\u5230Message\u7684\u65f6\u5019\u53bb\u6302\u8d77\u8bf7\u6c42\uff0c\u901a\u8fc7PullRequestHoldService#suspendPullRequest\u6765\u6302\u8d77\u8bf7\u6c42\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public void suspendPullRequest(final String topic, final int queueId, final PullRequest pullRequest) {\n        String key = this.buildKey(topic, queueId);\n        ManyPullRequest mpr = this.pullRequestTable.get(key);\n        if (null == mpr) {\n            mpr = new ManyPullRequest();\n            ManyPullRequest prev = this.pullRequestTable.putIfAbsent(key, mpr);\n            if (prev != null) {\n                mpr = prev;\n            }\n        }\n\n        mpr.addPullRequest(pullRequest);\n    }\n")),(0,r.kt)("p",null,"\u6211\u4eec\u662f\u4e0d\u662f\u5728BrokerController\u542f\u52a8\u4e2d\u770b\u5230\u4e86PullRequestHoldService(\u7ee7\u627fServiceThread)\u88ab\u542f\u52a8\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u53bb\u770b\u770bPullRequestHoldService\u505a\u4e86\u4ec0\u4e48\uff0c\u6240\u4ee5\u9996\u5148\u53bb\u770b\u4ed6\u7684run\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    @Override\n    public void run() {\n        log.info("{} service started", this.getServiceName());\n        while (!this.isStopped()) {\n            try {\n                //\u662f\u5426\u5f00\u542f\u4e86\u957f\u8f6e\u8be2\n                if (this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                    //\u957f\u8f6e\u8be2\u7b49\u5f855s\n                    this.waitForRunning(5 * 1000);\n                } else {\n                   //\u77ed\u8f6e\u8be2\u7b49\u5f851s this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills());\n                }\n\n                long beginLockTimestamp = this.systemClock.now();\n                //\u68c0\u67e5\u6302\u8d77\u7684\u8bf7\u6c42\n                this.checkHoldRequest();\n                long costTime = this.systemClock.now() - beginLockTimestamp;\n                if (costTime > 5 * 1000) {\n                    log.info("[NOTIFYME] check hold request cost {} ms.", costTime);\n                }\n            } catch (Throwable e) {\n                log.warn(this.getServiceName() + " service has exception. ", e);\n            }\n        }\n\n        log.info("{} service end", this.getServiceName());\n    }\n')),(0,r.kt)("p",null,"\u901a\u8fc7\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"PullRequestHoldService#checkHoldRequest"))," \u65b9\u6cd5\u6765\u68c0\u67e5\u4fdd\u5b58\u5728\u8fd9\u4e2a\u91cc\u9762\u7684\u6570\u636e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'private void checkHoldRequest() {\n        for (String key : this.pullRequestTable.keySet()) {\n            String[] kArray = key.split(TOPIC_QUEUEID_SEPARATOR);\n            if (2 == kArray.length) {\n                String topic = kArray[0];\n                int queueId = Integer.parseInt(kArray[1]);\n                final long offset = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);\n                try {\n                    //\u4e94\u79d2\u949f\u901a\u77e5\u4e00\u6b21\n                    this.notifyMessageArriving(topic, queueId, offset);\n                } catch (Throwable e) {\n                    log.error("check hold request failed. topic={}, queueId={}", topic, queueId, e);\n                }\n            }\n        }\n    }\n')),(0,r.kt)("p",null,"\u770b\u4e00\u4e0b ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"PullRequestHoldService#notifyMessageArriving"))," \u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    public void notifyMessageArriving(final String topic, final int queueId, final long maxOffset) {\n        notifyMessageArriving(topic, queueId, maxOffset, null, 0, null, null);\n    }\n\npublic void notifyMessageArriving(final String topic, final int queueId, final long maxOffset, final Long tagsCode,\n        long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n        String key = this.buildKey(topic, queueId);\n        ManyPullRequest mpr = this.pullRequestTable.get(key);\n        if (mpr != null) {\n            List<PullRequest> requestList = mpr.cloneListAndClear();\n            if (requestList != null) {\n                List<PullRequest> replayList = new ArrayList<PullRequest>();\n\n                for (PullRequest request : requestList) {\n                    long newestOffset = maxOffset;\n                    if (newestOffset <= request.getPullFromThisOffset()) {\n                        newestOffset = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);\n                    }\n\n                    if (newestOffset > request.getPullFromThisOffset()) {\n                        boolean match = request.getMessageFilter().isMatchedByConsumeQueue(tagsCode,\n                            new ConsumeQueueExt.CqExtUnit(tagsCode, msgStoreTime, filterBitMap));\n                        // match by bit map, need eval again when properties is not null.\n                        if (match && properties != null) {\n                            match = request.getMessageFilter().isMatchedByCommitLog(null, properties);\n                        }\n\n                        if (match) {\n                            try {\n                                this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),\n                                    request.getRequestCommand());\n                            } catch (Throwable e) {\n                                log.error("execute request when wakeup failed.", e);\n                            }\n                            continue;\n                        }\n                    }\n\n                    if (System.currentTimeMillis() >= (request.getSuspendTimestamp() + request.getTimeoutMillis())) {\n                        try {\n                            this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),\n                                request.getRequestCommand());\n                        } catch (Throwable e) {\n                            log.error("execute request when wakeup failed.", e);\n                        }\n                        continue;\n                    }\n\n                    replayList.add(request);\n                }\n\n                if (!replayList.isEmpty()) {\n                    mpr.addPullRequest(replayList);\n                }\n            }\n        }\n    }\n')),(0,r.kt)("p",null,"\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"PullMessageProcessor#executeRequestWhenWakeup"))," \u6765\u5904\u7406\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void executeRequestWhenWakeup(final Channel channel,\n        final RemotingCommand request) throws RemotingCommandException {\n        Runnable run = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final RemotingCommand response = PullMessageProcessor.this.processRequest(channel, request, false);\n\n                    if (response != null) {\n                        response.setOpaque(request.getOpaque());\n                        response.markResponseType();\n                        try {\n                            channel.writeAndFlush(response).addListener(new ChannelFutureListener() {\n                                @Override\n                                public void operationComplete(ChannelFuture future) throws Exception {\n                                    if (!future.isSuccess()) {\n                                        log.error("processRequestWrapper response to {} failed",\n                                            future.channel().remoteAddress(), future.cause());\n                                        log.error(request.toString());\n                                        log.error(response.toString());\n                                    }\n                                }\n                            });\n                        } catch (Throwable e) {\n                            log.error("processRequestWrapper process request over, but response failed", e);\n                            log.error(request.toString());\n                            log.error(response.toString());\n                        }\n                    }\n                } catch (RemotingCommandException e1) {\n                    log.error("excuteRequestWhenWakeup run", e1);\n                }\n            }\n        };\n        this.brokerController.getPullMessageExecutor().submit(new RequestTask(run, channel, request));\n    }\n')),(0,r.kt)("p",null,"\u6700\u7ec8\u8fd8\u662f\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"PullMessageProcessor#processRequest"))," \u8fd9\u4e2a\u65b9\u6cd5\u6765\u5904\u7406\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u91cc\u7684brokerAllowSuspend=false\u610f\u601d\u5c31\u662f\u53ea\u4f1a\u6302\u8d77\u4e00\u6b21\uff0c\u4e0d\u4f1a\u65e0\u9650\u5236\u7684\u6302\u8d77\u8fd9\u4e2a\u8bf7\u6c42\u5728\u6ca1\u6709\u6d88\u606f\u6765\u7684\u65f6\u5019\u3002\u5230\u8fd9\u91cc\u5c31Broker\u63a5\u6536\u5b8c\u4e86"))}p.isMDXComponent=!0}}]);