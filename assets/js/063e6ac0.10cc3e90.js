"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[8423],{7954:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=e(4848),i=e(8453);const a={title:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConditionalOnXXX",linkTitle:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConditionalOnXXX",date:new Date("2019-12-09T00:00:00.000Z"),weight:3},s=void 0,r={id:"spring/spring-boot/core-source-analysis/springboot-ConditionalOnXXX",title:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConditionalOnXXX",description:"1. SpringBoot\u4e2d\u7684ConditionalOnXXX\u7c7b\u578b\u7684\u6ce8\u89e3",source:"@site/docs/spring/spring-boot/core-source-analysis/springboot-ConditionalOnXXX.md",sourceDirName:"spring/spring-boot/core-source-analysis",slug:"/spring/spring-boot/core-source-analysis/springboot-ConditionalOnXXX",permalink:"/docs/spring/spring-boot/core-source-analysis/springboot-ConditionalOnXXX",draft:!1,unlisted:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/spring/spring-boot/core-source-analysis/springboot-ConditionalOnXXX.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1728574453e3,frontMatter:{title:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConditionalOnXXX",linkTitle:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConditionalOnXXX",date:"2019-12-09T00:00:00.000Z",weight:3},sidebar:"springboot",previous:{title:"SpringBoot\u4e2d\u5185\u5d4cTomcat\u7684\u5b9e\u73b0\u539f\u7406\u89e3\u6790",permalink:"/docs/spring/spring-boot/core-source-analysis/embedded-tomcat-theory"},next:{title:"SpringBoot\u6e90\u7801\u89e3\u6790\u4e4bConfigurationProperties\u539f\u7406",permalink:"/docs/spring/spring-boot/core-source-analysis/springboot-ConfigurationProperties"}},l={},d=[{value:"1. SpringBoot\u4e2d\u7684ConditionalOnXXX\u7c7b\u578b\u7684\u6ce8\u89e3",id:"1-springboot\u4e2d\u7684conditionalonxxx\u7c7b\u578b\u7684\u6ce8\u89e3",level:3},{value:"2. SpringBoot\u6e90\u7801\u5206\u6790\u4e4bConditionalOnClass",id:"2-springboot\u6e90\u7801\u5206\u6790\u4e4bconditionalonclass",level:3}];function c(t){const n={code:"code",em:"em",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"1-springboot\u4e2d\u7684conditionalonxxx\u7c7b\u578b\u7684\u6ce8\u89e3",children:"1. SpringBoot\u4e2d\u7684ConditionalOnXXX\u7c7b\u578b\u7684\u6ce8\u89e3"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-mermaid",children:"graph LR\nB(ConditionalOnXXX)\n    B --\x3e ConditionalOnBean(ConditionalOnBean)\n    B --\x3eConditionalOnClass(ConditionalOnClass)\n    B --\x3eConditionalOnCloudPlatform(ConditionalOnCloudPlatform)\n    B --\x3eConditionalOnExpression(ConditionalOnExpression)\n    B --\x3eConditionalOnJava(ConditionalOnJava)\n    B --\x3eConditionalOnJndi(ConditionalOnJndi)\n    B --\x3eConditionalOnMissingBean(ConditionalOnMissingBean)\n    B --\x3eConditionalOnMissingClass(ConditionalOnMissingClass)\n    B --\x3eConditionalOnNotWebApplication(ConditionalOnNotWebApplication)\n    B --\x3eConditionalOnProperty(ConditionalOnProperty)\n    B --\x3eConditionalOnResource(ConditionalOnResource)\n    B --\x3eConditionalOnSingleCandidate(ConditionalOnSingleCandidate)\n    B --\x3eConditionalOnWebApplication(ConditionalOnWebApplication)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://github.com/mxsm/document/blob/master/image/Spring/SpringBoot/ConditionalOnXXX.png?raw=true",alt:""})}),"\n",(0,o.jsx)(n.p,{children:"\u901a\u8fc7\u4e0a\u9762\u7684\u53ef\u4ee5\u770b\u51fa\u6765\u4e3b\u8981\u662f\u6709\u8fd9\u4e9b\u6761\u4ef6\u5316\u52a0\u8f7d\u7c7b\u7684\u6ce8\u89e3\u3002\u7136\u540e\u52a0\u4e0a\u4e09\u4e2a\u987a\u5e8f\u7684\u6ce8\u89e3"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-mermaid",children:"graph LR\nB(\u987a\u5e8f\u6ce8\u89e3)\n    B --\x3e ConditionalOnBean(AutoConfigureBefore)\n    B --\x3eConditionalOnClass(AutoConfigureOrder)\n    B --\x3eConditionalOnCloudPlatform(AutoConfigureAfter)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://github.com/mxsm/document/blob/master/image/Spring/SpringBoot/SpringBoot%E9%A1%BA%E5%BA%8F%E6%B3%A8%E8%A7%A3.png?raw=true",alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["\u901a\u8fc7\u8fd9\u4e9b\u6ce8\u89e3\u6765\u5b9e\u73b0SpringBoot\u7684\u81ea\u52a8\u6ce8\u5165\u548c\u53d6\u6d88xml\u7684\u914d\u7f6e\u3002\u4e0b\u9762\u4f1a\u9009\u53d6 ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"ConditionalOnClass"})})})," \u6765\u8fdb\u884c\u6e90\u7801\u5206\u6790\u3002\u8fd9\u4e9b\u6ce8\u89e3\u5982\u4f55\u8fdb\u884c\u534f\u540c\u5de5\u4f5c\u6765\u5b9e\u73b0\u6761\u4ef6\u5316\u6ce8\u5165\u7684\u3002"]}),"\n",(0,o.jsx)(n.h3,{id:"2-springboot\u6e90\u7801\u5206\u6790\u4e4bconditionalonclass",children:"2. SpringBoot\u6e90\u7801\u5206\u6790\u4e4bConditionalOnClass"}),"\n",(0,o.jsx)(n.p,{children:"\u9996\u5148\u770b\u4e00\u4e0b\u6e90\u7801\uff1a"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Target({ ElementType.TYPE, ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Conditional(OnClassCondition.class)\npublic @interface ConditionalOnClass {\n    \n\tClass<?>[] value() default {};\n\n\tString[] name() default {};\n\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u901a\u8fc7\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u6765\u4e3b\u8981\u662f\u901a\u8fc7 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Spring"})})," \u7684 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"@Conditional"})})," \u6765\u5b9e\u73b0\u3002\u770b\u4e00\u4e0b ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"OnClassCondition"})})," \u7684\u6e90\u7801\uff1a"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Order(Ordered.HIGHEST_PRECEDENCE)\nclass OnClassCondition extends FilteringSpringBootCondition {\n    //\u7701\u4e86\u4ee3\u7801\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u53ef\u4ee5\u770b\u51fa\u6765\u7ee7\u627f\u4e86 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"FilteringSpringBootCondition"})})," \u7c7b\u3002"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"abstract class FilteringSpringBootCondition extends SpringBootCondition\n\t\timplements AutoConfigurationImportFilter, BeanFactoryAware, BeanClassLoaderAware {\n    //\u7701\u7565\u4ee3\u7801\n}\n\npublic abstract class SpringBootCondition implements Condition {\n    //\u7701\u7565\u4ee3\u7801\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u901a\u8fc7\u7ee7\u627f\u5173\u7cfb\u53ef\u4ee5\u770b\u51fa\u6765\uff0c",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"SpringBootCondition"})})," \u5b9e\u73b0\u4e86 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Condition"})})," \u8fd9\u4e2a\u9876\u5c42\u7684\u63a5\u53e3\uff0c\u8fd9\u4e2a\u4e5f\u662f\u6700\u7ec8\u6267\u884c\u7684\u63a5\u53e3\u3002\u7136\u540e\u901a\u8fc7\u5c01\u88c5 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"FilteringSpringBootCondition"})})," \u6700\u540e\u7531\u4e0d\u540c\u7684\u7684\u5177\u4f53\u5b9e\u73b0\u7c7b\u6765\u5b9e\u73b0\u3002"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Order(Ordered.HIGHEST_PRECEDENCE)\nclass OnClassCondition extends FilteringSpringBootCondition {\n\n\t@Override\n\tprotected final ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,\n\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n\t\t// Split the work and perform half in a background thread if more than one\n\t\t// processor is available. Using a single additional thread seems to offer the\n\t\t// best performance. More threads make things worse.\n\t\tif (Runtime.getRuntime().availableProcessors() > 1) {\n\t\t\treturn resolveOutcomesThreaded(autoConfigurationClasses, autoConfigurationMetadata);\n\t\t}\n\t\telse {\n\t\t\tOutcomesResolver outcomesResolver = new StandardOutcomesResolver(autoConfigurationClasses, 0,\n\t\t\t\t\tautoConfigurationClasses.length, autoConfigurationMetadata, getBeanClassLoader());\n\t\t\treturn outcomesResolver.resolveOutcomes();\n\t\t}\n\t}\n\n\tprivate ConditionOutcome[] resolveOutcomesThreaded(String[] autoConfigurationClasses,\n\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n\t\tint split = autoConfigurationClasses.length / 2;\n\t\tOutcomesResolver firstHalfResolver = createOutcomesResolver(autoConfigurationClasses, 0, split,\n\t\t\t\tautoConfigurationMetadata);\n\t\tOutcomesResolver secondHalfResolver = new StandardOutcomesResolver(autoConfigurationClasses, split,\n\t\t\t\tautoConfigurationClasses.length, autoConfigurationMetadata, getBeanClassLoader());\n\t\tConditionOutcome[] secondHalf = secondHalfResolver.resolveOutcomes();\n\t\tConditionOutcome[] firstHalf = firstHalfResolver.resolveOutcomes();\n\t\tConditionOutcome[] outcomes = new ConditionOutcome[autoConfigurationClasses.length];\n\t\tSystem.arraycopy(firstHalf, 0, outcomes, 0, firstHalf.length);\n\t\tSystem.arraycopy(secondHalf, 0, outcomes, split, secondHalf.length);\n\t\treturn outcomes;\n\t}\n\n\tprivate OutcomesResolver createOutcomesResolver(String[] autoConfigurationClasses, int start, int end,\n\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n\t\tOutcomesResolver outcomesResolver = new StandardOutcomesResolver(autoConfigurationClasses, start, end,\n\t\t\t\tautoConfigurationMetadata, getBeanClassLoader());\n\t\ttry {\n\t\t\treturn new ThreadedOutcomesResolver(outcomesResolver);\n\t\t}\n\t\tcatch (AccessControlException ex) {\n\t\t\treturn outcomesResolver;\n\t\t}\n\t}\n\n\t@Override\n\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tClassLoader classLoader = context.getClassLoader();\n\t\tConditionMessage matchMessage = ConditionMessage.empty();\n\t\tList<String> onClasses = getCandidates(metadata, ConditionalOnClass.class);\n\t\tif (onClasses != null) {\n\t\t\tList<String> missing = filter(onClasses, ClassNameFilter.MISSING, classLoader);\n\t\t\tif (!missing.isEmpty()) {\n\t\t\t\treturn ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)\n\t\t\t\t\t\t.didNotFind("required class", "required classes").items(Style.QUOTE, missing));\n\t\t\t}\n\t\t\tmatchMessage = matchMessage.andCondition(ConditionalOnClass.class)\n\t\t\t\t\t.found("required class", "required classes")\n\t\t\t\t\t.items(Style.QUOTE, filter(onClasses, ClassNameFilter.PRESENT, classLoader));\n\t\t}\n\t\tList<String> onMissingClasses = getCandidates(metadata, ConditionalOnMissingClass.class);\n\t\tif (onMissingClasses != null) {\n\t\t\tList<String> present = filter(onMissingClasses, ClassNameFilter.PRESENT, classLoader);\n\t\t\tif (!present.isEmpty()) {\n\t\t\t\treturn ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnMissingClass.class)\n\t\t\t\t\t\t.found("unwanted class", "unwanted classes").items(Style.QUOTE, present));\n\t\t\t}\n\t\t\tmatchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class)\n\t\t\t\t\t.didNotFind("unwanted class", "unwanted classes")\n\t\t\t\t\t.items(Style.QUOTE, filter(onMissingClasses, ClassNameFilter.MISSING, classLoader));\n\t\t}\n\t\treturn ConditionOutcome.match(matchMessage);\n\t}\n\n\tprivate List<String> getCandidates(AnnotatedTypeMetadata metadata, Class<?> annotationType) {\n\t\tMultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(annotationType.getName(), true);\n\t\tif (attributes == null) {\n\t\t\treturn null;\n\t\t}\n\t\tList<String> candidates = new ArrayList<>();\n\t\taddAll(candidates, attributes.get("value"));\n\t\taddAll(candidates, attributes.get("name"));\n\t\treturn candidates;\n\t}\n\n\tprivate void addAll(List<String> list, List<Object> itemsToAdd) {\n\t\tif (itemsToAdd != null) {\n\t\t\tfor (Object item : itemsToAdd) {\n\t\t\t\tCollections.addAll(list, (String[]) item);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate interface OutcomesResolver {\n\n\t\tConditionOutcome[] resolveOutcomes();\n\n\t}\n\n\tprivate static final class ThreadedOutcomesResolver implements OutcomesResolver {\n\n\t\tprivate final Thread thread;\n\n\t\tprivate volatile ConditionOutcome[] outcomes;\n\n\t\tprivate ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {\n\t\t\tthis.thread = new Thread(() -> this.outcomes = outcomesResolver.resolveOutcomes());\n\t\t\tthis.thread.start();\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome[] resolveOutcomes() {\n\t\t\ttry {\n\t\t\t\tthis.thread.join();\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t\treturn this.outcomes;\n\t\t}\n\n\t}\n\n\tprivate final class StandardOutcomesResolver implements OutcomesResolver {\n\n\t\tprivate final String[] autoConfigurationClasses;\n\n\t\tprivate final int start;\n\n\t\tprivate final int end;\n\n\t\tprivate final AutoConfigurationMetadata autoConfigurationMetadata;\n\n\t\tprivate final ClassLoader beanClassLoader;\n\n\t\tprivate StandardOutcomesResolver(String[] autoConfigurationClasses, int start, int end,\n\t\t\t\tAutoConfigurationMetadata autoConfigurationMetadata, ClassLoader beanClassLoader) {\n\t\t\tthis.autoConfigurationClasses = autoConfigurationClasses;\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t\tthis.autoConfigurationMetadata = autoConfigurationMetadata;\n\t\t\tthis.beanClassLoader = beanClassLoader;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConditionOutcome[] resolveOutcomes() {\n\t\t\treturn getOutcomes(this.autoConfigurationClasses, this.start, this.end, this.autoConfigurationMetadata);\n\t\t}\n\n\t\tprivate ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses, int start, int end,\n\t\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n\t\t\tConditionOutcome[] outcomes = new ConditionOutcome[end - start];\n\t\t\tfor (int i = start; i < end; i++) {\n\t\t\t\tString autoConfigurationClass = autoConfigurationClasses[i];\n\t\t\t\tif (autoConfigurationClass != null) {\n\t\t\t\t\tString candidates = autoConfigurationMetadata.get(autoConfigurationClass, "ConditionalOnClass");\n\t\t\t\t\tif (candidates != null) {\n\t\t\t\t\t\toutcomes[i - start] = getOutcome(candidates);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn outcomes;\n\t\t}\n\n\t\tprivate ConditionOutcome getOutcome(String candidates) {\n\t\t\ttry {\n\t\t\t\tif (!candidates.contains(",")) {\n\t\t\t\t\treturn getOutcome(candidates, this.beanClassLoader);\n\t\t\t\t}\n\t\t\t\tfor (String candidate : StringUtils.commaDelimitedListToStringArray(candidates)) {\n\t\t\t\t\tConditionOutcome outcome = getOutcome(candidate, this.beanClassLoader);\n\t\t\t\t\tif (outcome != null) {\n\t\t\t\t\t\treturn outcome;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\t// We\'ll get another chance later\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate ConditionOutcome getOutcome(String className, ClassLoader classLoader) {\n\t\t\tif (ClassNameFilter.MISSING.matches(className, classLoader)) {\n\t\t\t\treturn ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)\n\t\t\t\t\t\t.didNotFind("required class").items(Style.QUOTE, className));\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n'})})]})}function u(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>s,x:()=>r});var o=e(6540);const i={},a=o.createContext(i);function s(t){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),o.createElement(a.Provider,{value:n},t.children)}}}]);