"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[1304],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,g=m["".concat(l,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={id:"guessing-game",title:"\u731c\u6570\u5b57\u6e38\u620f",linkTitle:"\u731c\u6570\u5b57\u6e38\u620f",weight:202308051736,description:"\u731c\u6570\u5b57\u6e38\u620f"},o="[Programming a Guessing Game](https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#programming-a-guessing-game)",s={unversionedId:"rust/official-doc/guessing-game/guessing-game",id:"rust/official-doc/guessing-game/guessing-game",title:"\u731c\u6570\u5b57\u6e38\u620f",description:"\u731c\u6570\u5b57\u6e38\u620f",source:"@site/docs/rust/official-doc/guessing-game/01-guessing-game.md",sourceDirName:"rust/official-doc/guessing-game",slug:"/rust/official-doc/guessing-game/guessing-game",permalink:"/docs/rust/official-doc/guessing-game/guessing-game",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/rust/official-doc/guessing-game/01-guessing-game.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1693139387,formattedLastUpdatedAt:"Aug 27, 2023",sidebarPosition:1,frontMatter:{id:"guessing-game",title:"\u731c\u6570\u5b57\u6e38\u620f",linkTitle:"\u731c\u6570\u5b57\u6e38\u620f",weight:202308051736,description:"\u731c\u6570\u5b57\u6e38\u620f"},sidebar:"rustDoc",previous:{title:"1.3.Hello, Cargo!",permalink:"/docs/rust/official-doc/introduction/HelloCargo"},next:{title:"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5",permalink:"/docs/rust/official-doc/concepts"}},l={},p=[{value:"Setting Up a New Project",id:"setting-up-a-new-project",level:2},{value:"Processing a Guess",id:"processing-a-guess",level:2},{value:"Storing Values with Variables",id:"storing-values-with-variables",level:3},{value:"Receiving User Input",id:"receiving-user-input",level:3},{value:"Handling Potential Failure with <code>Result</code>",id:"handling-potential-failure-with-result",level:3},{value:"Printing Values with <code>println!</code> Placeholders",id:"printing-values-with-println-placeholders",level:3},{value:"Testing the First Part",id:"testing-the-first-part",level:3},{value:"Generating a Secret Number",id:"generating-a-secret-number",level:2},{value:"Using a Crate to Get More Functionality",id:"using-a-crate-to-get-more-functionality",level:3},{value:"Ensuring Reproducible Builds with the <em>Cargo.lock</em> File",id:"ensuring-reproducible-builds-with-the-cargolock-file",level:4},{value:"Updating a Crate to Get a New Version",id:"updating-a-crate-to-get-a-new-version",level:4},{value:"Generating a Random Number",id:"generating-a-random-number",level:3},{value:"Comparing the Guess to the Secret Number",id:"comparing-the-guess-to-the-secret-number",level:2},{value:"Allowing Multiple Guesses with Looping",id:"allowing-multiple-guesses-with-looping",level:2},{value:"Quitting After a Correct Guess",id:"quitting-after-a-correct-guess",level:3},{value:"Handling Invalid Input",id:"handling-invalid-input",level:3},{value:"Summary",id:"summary",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"programming-a-guessing-game"},(0,i.kt)("a",{parentName:"h1",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#programming-a-guessing-game"},"Programming a Guessing Game")),(0,i.kt)("p",null,"Let\u2019s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You\u2019ll learn about ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"match"),", methods, associated functions, external crates, and more! In the following chapters, we\u2019ll explore these ideas in more detail. In this chapter, you\u2019ll just practice the fundamentals."),(0,i.kt)("p",null,"We\u2019ll implement a classic beginner programming problem: a guessing game. Here\u2019s how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit."),(0,i.kt)("h2",{id:"setting-up-a-new-project"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#setting-up-a-new-project"},"Setting Up a New Project")),(0,i.kt)("p",null,"To set up a new project, go to the ",(0,i.kt)("em",{parentName:"p"},"projects")," directory that you created in Chapter 1 and make a new project using Cargo, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo new guessing_game\n$ cd guessing_game\n")),(0,i.kt)("p",null,"The first command, ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo new"),", takes the name of the project (",(0,i.kt)("inlineCode",{parentName:"p"},"guessing_game"),") as the first argument. The second command changes to the new project\u2019s directory."),(0,i.kt)("p",null,"Look at the generated ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," file:"),(0,i.kt)("p",null,"Filename: Cargo.toml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "guessing_game"\nversion = "0.1.0"\nedition = "2021"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n')),(0,i.kt)("p",null,"As you saw in Chapter 1, ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo new")," generates a \u201cHello, world!\u201d program for you. Check out the ",(0,i.kt)("em",{parentName:"p"},"src/main.rs")," file:"),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    println!("Hello, world!");\n}\n')),(0,i.kt)("p",null,"Now let\u2019s compile this \u201cHello, world!\u201d program and run it in the same step using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo run")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command comes in handy when you need to rapidly iterate on a project, as we\u2019ll do in this game, quickly testing each iteration before moving on to the next one."),(0,i.kt)("p",null,"Reopen the ",(0,i.kt)("em",{parentName:"p"},"src/main.rs")," file. You\u2019ll be writing all the code in this file."),(0,i.kt)("h2",{id:"processing-a-guess"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#processing-a-guess"},"Processing a Guess")),(0,i.kt)("p",null,"The first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we\u2019ll allow the player to input a guess. Enter the code in Listing 2-1 into ",(0,i.kt)("em",{parentName:"p"},"src/main.rs"),"."),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::io;\n\nfn main() {\n    println!("Guess the number!");\n\n    println!("Please input your guess.");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect("Failed to read line");\n\n    println!("You guessed: {guess}");\n}\n')),(0,i.kt)("p",null,"Listing 2-1: Code that gets a guess from the user and prints it"),(0,i.kt)("p",null,"This code contains a lot of information, so let\u2019s go over it line by line. To obtain user input and then print the result as output, we need to bring the ",(0,i.kt)("inlineCode",{parentName:"p"},"io")," input/output library into scope. The ",(0,i.kt)("inlineCode",{parentName:"p"},"io")," library comes from the standard library, known as ",(0,i.kt)("inlineCode",{parentName:"p"},"std"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use std::io;\n")),(0,i.kt)("p",null,"By default, Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the ",(0,i.kt)("em",{parentName:"p"},"prelude"),", and you can see everything in it ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/prelude/index.html"},"in the standard library documentation"),"."),(0,i.kt)("p",null,"If a type you want to use isn\u2019t in the prelude, you have to bring that type into scope explicitly with a ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," statement. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"std::io")," library provides you with a number of useful features, including the ability to accept user input."),(0,i.kt)("p",null,"As you saw in Chapter 1, the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function is the entry point into the program:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn main() {\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"fn")," syntax declares a new function; the parentheses, ",(0,i.kt)("inlineCode",{parentName:"p"},"()"),", indicate there are no parameters; and the curly bracket, ",(0,i.kt)("inlineCode",{parentName:"p"},"{"),", starts the body of the function."),(0,i.kt)("p",null,"As you also learned in Chapter 1, ",(0,i.kt)("inlineCode",{parentName:"p"},"println!")," is a macro that prints a string to the screen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    println!("Guess the number!");\n\n    println!("Please input your guess.");\n')),(0,i.kt)("p",null,"This code is printing a prompt stating what the game is and requesting input from the user."),(0,i.kt)("h3",{id:"storing-values-with-variables"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#storing-values-with-variables"},"Storing Values with Variables")),(0,i.kt)("p",null,"Next, we\u2019ll create a ",(0,i.kt)("em",{parentName:"p"},"variable")," to store the user input, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"    let mut guess = String::new();\n")),(0,i.kt)("p",null,"Now the program is getting interesting! There\u2019s a lot going on in this little line. We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," statement to create the variable. Here\u2019s another example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let apples = 5;\n")),(0,i.kt)("p",null,"This line creates a new variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"apples")," and binds it to the value 5. In Rust, variables are immutable by default, meaning once we give the variable a value, the value won\u2019t change. We\u2019ll be discussing this concept in detail in the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#variables-and-mutability"},"\u201cVariables and Mutability\u201d")," section in Chapter 3. To make a variable mutable, we add ",(0,i.kt)("inlineCode",{parentName:"p"},"mut")," before the variable name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let apples = 5; // immutable\nlet mut bananas = 5; // mutable\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"//")," syntax starts a comment that continues until the end of the line. Rust ignores everything in comments. We\u2019ll discuss comments in more detail in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch03-04-comments.html"},"Chapter 3"),".")),(0,i.kt)("p",null,"Returning to the guessing game program, you now know that ",(0,i.kt)("inlineCode",{parentName:"p"},"let mut guess")," will introduce a mutable variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"guess"),". The equal sign (",(0,i.kt)("inlineCode",{parentName:"p"},"="),") tells Rust we want to bind something to the variable now. On the right of the equal sign is the value that ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," is bound to, which is the result of calling ",(0,i.kt)("inlineCode",{parentName:"p"},"String::new"),", a function that returns a new instance of a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/string/struct.String.html"},(0,i.kt)("inlineCode",{parentName:"a"},"String"))," is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"::")," syntax in the ",(0,i.kt)("inlineCode",{parentName:"p"},"::new")," line indicates that ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," is an associated function of the ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," type. An ",(0,i.kt)("em",{parentName:"p"},"associated function")," is a function that\u2019s implemented on a type, in this case ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". This ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," function creates a new, empty string. You\u2019ll find a ",(0,i.kt)("inlineCode",{parentName:"p"},"new")," function on many types because it\u2019s a common name for a function that makes a new value of some kind."),(0,i.kt)("p",null,"In full, the ",(0,i.kt)("inlineCode",{parentName:"p"},"let mut guess = String::new();")," line has created a mutable variable that is currently bound to a new, empty instance of a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". Whew!"),(0,i.kt)("h3",{id:"receiving-user-input"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#receiving-user-input"},"Receiving User Input")),(0,i.kt)("p",null,"Recall that we included the input/output functionality from the standard library with ",(0,i.kt)("inlineCode",{parentName:"p"},"use std::io;")," on the first line of the program. Now we\u2019ll call the ",(0,i.kt)("inlineCode",{parentName:"p"},"stdin")," function from the ",(0,i.kt)("inlineCode",{parentName:"p"},"io")," module, which will allow us to handle user input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"    io::stdin()\n        .read_line(&mut guess)\n")),(0,i.kt)("p",null,"If we hadn\u2019t imported the ",(0,i.kt)("inlineCode",{parentName:"p"},"io")," library with ",(0,i.kt)("inlineCode",{parentName:"p"},"use std::io;")," at the beginning of the program, we could still use the function by writing this function call as ",(0,i.kt)("inlineCode",{parentName:"p"},"std::io::stdin"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"stdin")," function returns an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/io/struct.Stdin.html"},(0,i.kt)("inlineCode",{parentName:"a"},"std::io::Stdin")),", which is a type that represents a handle to the standard input for your terminal."),(0,i.kt)("p",null,"Next, the line ",(0,i.kt)("inlineCode",{parentName:"p"},".read_line(&mut guess)")," calls the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line"},(0,i.kt)("inlineCode",{parentName:"a"},"read_line"))," method on the standard input handle to get input from the user. We\u2019re also passing ",(0,i.kt)("inlineCode",{parentName:"p"},"&mut guess")," as the argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," to tell it what string to store the user input in. The full job of ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," is to take whatever the user types into standard input and append that into a string (without overwriting its contents), so we therefore pass that string as an argument. The string argument needs to be mutable so the method can change the string\u2019s content."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," indicates that this argument is a ",(0,i.kt)("em",{parentName:"p"},"reference"),", which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust\u2019s major advantages is how safe and easy it is to use references. You don\u2019t need to know a lot of those details to finish this program. For now, all you need to know is that, like variables, references are immutable by default. Hence, you need to write ",(0,i.kt)("inlineCode",{parentName:"p"},"&mut guess")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"&guess")," to make it mutable. (Chapter 4 will explain references more thoroughly.)"),(0,i.kt)("h3",{id:"handling-potential-failure-with-result"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result"},"Handling Potential Failure with ",(0,i.kt)("inlineCode",{parentName:"a"},"Result"))),(0,i.kt)("p",null,"We\u2019re still working on this line of code. We\u2019re now discussing a third line of text, but note that it\u2019s still part of a single logical line of code. The next part is this method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'        .expect("Failed to read line");\n')),(0,i.kt)("p",null,"We could have written this code as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'io::stdin().read_line(&mut guess).expect("Failed to read line");\n')),(0,i.kt)("p",null,"However, one long line is difficult to read, so it\u2019s best to divide it. It\u2019s often wise to introduce a newline and other whitespace to help break up long lines when you call a method with the ",(0,i.kt)("inlineCode",{parentName:"p"},".method_name()")," syntax. Now let\u2019s discuss what this line does."),(0,i.kt)("p",null,"As mentioned earlier, ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," puts whatever the user enters into the string we pass to it, but it also returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," value. ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/enum.Result.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Result"))," is an ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch06-00-enums.html"},(0,i.kt)("em",{parentName:"a"},"enumeration")),", often called an ",(0,i.kt)("em",{parentName:"p"},"enum"),", which is a type that can be in one of multiple possible states. We call each possible state a ",(0,i.kt)("em",{parentName:"p"},"variant"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch06-00-enums.html"},"Chapter 6")," will cover enums in more detail. The purpose of these ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," types is to encode error-handling information."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Result"),"\u2019s variants are ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Err"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," variant indicates the operation was successful, and inside ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," is the successfully generated value. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," variant means the operation failed, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," contains information about how or why the operation failed."),(0,i.kt)("p",null,"Values of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," type, like values of any type, have methods defined on them. An instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," has an ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect"},(0,i.kt)("inlineCode",{parentName:"a"},"expect")," method")," that you can call. If this instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," value, ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," will cause the program to crash and display the message that you passed as an argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"expect"),". If the ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," method returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"Err"),", it would likely be the result of an error coming from the underlying operating system. If this instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," value, ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," will take the return value that ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in the user\u2019s input."),(0,i.kt)("p",null,"If you don\u2019t call ",(0,i.kt)("inlineCode",{parentName:"p"},"expect"),", the program will compile, but you\u2019ll get a warning:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},'$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n  --\x3e src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\n\nwarning: `guessing_game` (bin "guessing_game") generated 1 warning\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n')),(0,i.kt)("p",null,"Rust warns that you haven\u2019t used the ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," value returned from ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line"),", indicating that the program hasn\u2019t handled a possible error."),(0,i.kt)("p",null,"The right way to suppress the warning is to actually write error-handling code, but in our case we just want to crash this program when a problem occurs, so we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"expect"),". You\u2019ll learn about recovering from errors in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html"},"Chapter 9"),"."),(0,i.kt)("h3",{id:"printing-values-with-println-placeholders"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#printing-values-with-println-placeholders"},"Printing Values with ",(0,i.kt)("inlineCode",{parentName:"a"},"println!")," Placeholders")),(0,i.kt)("p",null,"Aside from the closing curly bracket, there\u2019s only one more line to discuss in the code so far:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    println!("You guessed: {guess}");\n')),(0,i.kt)("p",null,"This line prints the string that now contains the user\u2019s input. The ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," set of curly brackets is a placeholder: think of ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," as little crab pincers that hold a value in place. When printing the value of a variable, the variable name can go inside the curly brackets. When printing the result of evaluating an expression, place empty curly brackets in the format string, then follow the format string with a comma-separated list of expressions to print in each empty curly bracket placeholder in the same order. Printing a variable and the result of an expression in one call to ",(0,i.kt)("inlineCode",{parentName:"p"},"println!")," would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let x = 5;\nlet y = 10;\n\nprintln!("x = {x} and y + 2 = {}", y + 2);\n')),(0,i.kt)("p",null,"This code would print ",(0,i.kt)("inlineCode",{parentName:"p"},"x = 5 and y + 2 = 12"),"."),(0,i.kt)("h3",{id:"testing-the-first-part"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#testing-the-first-part"},"Testing the First Part")),(0,i.kt)("p",null,"Let\u2019s test the first part of the guessing game. Run it using ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo run"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n")),(0,i.kt)("p",null,"At this point, the first part of the game is done: we\u2019re getting input from the keyboard and then printing it."),(0,i.kt)("h2",{id:"generating-a-secret-number"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number"},"Generating a Secret Number")),(0,i.kt)("p",null,"Next, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. We\u2019ll use a random number between 1 and 100 so the game isn\u2019t too difficult. Rust doesn\u2019t yet include random number functionality in its standard library. However, the Rust team does provide a ",(0,i.kt)("a",{parentName:"p",href:"https://crates.io/crates/rand"},(0,i.kt)("inlineCode",{parentName:"a"},"rand")," crate")," with said functionality."),(0,i.kt)("h3",{id:"using-a-crate-to-get-more-functionality"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#using-a-crate-to-get-more-functionality"},"Using a Crate to Get More Functionality")),(0,i.kt)("p",null,"Remember that a crate is a collection of Rust source code files. The project we\u2019ve been building is a ",(0,i.kt)("em",{parentName:"p"},"binary crate"),", which is an executable. The ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate is a ",(0,i.kt)("em",{parentName:"p"},"library crate"),", which contains code that is intended to be used in other programs and can\u2019t be executed on its own."),(0,i.kt)("p",null,"Cargo\u2019s coordination of external crates is where Cargo really shines. Before we can write code that uses ",(0,i.kt)("inlineCode",{parentName:"p"},"rand"),", we need to modify the ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," file to include the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate as a dependency. Open that file now and add the following line to the bottom, beneath the ",(0,i.kt)("inlineCode",{parentName:"p"},"[dependencies]")," section header that Cargo created for you. Be sure to specify ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," exactly as we have here, with this version number, or the code examples in this tutorial may not work:"),(0,i.kt)("p",null,"Filename: Cargo.toml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nrand = "0.8.5"\n')),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," file, everything that follows a header is part of that section that continues until another section starts. In ",(0,i.kt)("inlineCode",{parentName:"p"},"[dependencies]")," you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate with the semantic version specifier ",(0,i.kt)("inlineCode",{parentName:"p"},"0.8.5"),". Cargo understands ",(0,i.kt)("a",{parentName:"p",href:"http://semver.org/"},"Semantic Versioning")," (sometimes called ",(0,i.kt)("em",{parentName:"p"},"SemVer"),"), which is a standard for writing version numbers. The specifier ",(0,i.kt)("inlineCode",{parentName:"p"},"0.8.5")," is actually shorthand for ",(0,i.kt)("inlineCode",{parentName:"p"},"^0.8.5"),", which means any version that is at least 0.8.5 but below 0.9.0."),(0,i.kt)("p",null,"Cargo considers these versions to have public APIs compatible with version 0.8.5, and this specification ensures you\u2019ll get the latest patch release that will still compile with the code in this chapter. Any version 0.9.0 or greater is not guaranteed to have the same API as what the following examples use."),(0,i.kt)("p",null,"Now, without changing any of the code, let\u2019s build the project, as shown in Listing 2-2."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n")),(0,i.kt)("p",null,"Listing 2-2: The output from running ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo build")," after adding the rand crate as a dependency"),(0,i.kt)("p",null,"You may see different version numbers (but they will all be compatible with the code, thanks to SemVer!) and different lines (depending on the operating system), and the lines may be in a different order."),(0,i.kt)("p",null,"When we include an external dependency, Cargo fetches the latest versions of everything that dependency needs from the ",(0,i.kt)("em",{parentName:"p"},"registry"),", which is a copy of data from ",(0,i.kt)("a",{parentName:"p",href:"https://crates.io/"},"Crates.io"),". Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use."),(0,i.kt)("p",null,"After updating the registry, Cargo checks the ",(0,i.kt)("inlineCode",{parentName:"p"},"[dependencies]")," section and downloads any crates listed that aren\u2019t already downloaded. In this case, although we only listed ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," as a dependency, Cargo also grabbed other crates that ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," depends on to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available."),(0,i.kt)("p",null,"If you immediately run ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo build")," again without making any changes, you won\u2019t get any output aside from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Finished")," line. Cargo knows it has already downloaded and compiled the dependencies, and you haven\u2019t changed anything about them in your ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," file. Cargo also knows that you haven\u2019t changed anything about your code, so it doesn\u2019t recompile that either. With nothing to do, it simply exits."),(0,i.kt)("p",null,"If you open the ",(0,i.kt)("em",{parentName:"p"},"src/main.rs")," file, make a trivial change, and then save it and build again, you\u2019ll only see two lines of output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n")),(0,i.kt)("p",null,"These lines show that Cargo only updates the build with your tiny change to the ",(0,i.kt)("em",{parentName:"p"},"src/main.rs")," file. Your dependencies haven\u2019t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those."),(0,i.kt)("h4",{id:"ensuring-reproducible-builds-with-the-cargolock-file"},(0,i.kt)("a",{parentName:"h4",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#ensuring-reproducible-builds-with-the-cargolock-file"},"Ensuring Reproducible Builds with the ",(0,i.kt)("em",{parentName:"a"},"Cargo.lock")," File")),(0,i.kt)("p",null,"Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, say that next week version 0.8.6 of the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate comes out, and that version contains an important bug fix, but it also contains a regression that will break your code. To handle this, Rust creates the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file the first time you run ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo build"),", so we now have this in the ",(0,i.kt)("em",{parentName:"p"},"guessing_game")," directory."),(0,i.kt)("p",null,"When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file. When you build your project in the future, Cargo will see that the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file exists and will use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at 0.8.5 until you explicitly upgrade, thanks to the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file. Because the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file is important for reproducible builds, it\u2019s often checked into source control with the rest of the code in your project."),(0,i.kt)("h4",{id:"updating-a-crate-to-get-a-new-version"},(0,i.kt)("a",{parentName:"h4",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#updating-a-crate-to-get-a-new-version"},"Updating a Crate to Get a New Version")),(0,i.kt)("p",null,"When you ",(0,i.kt)("em",{parentName:"p"},"do")," want to update a crate, Cargo provides the command ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),", which will ignore the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file and figure out all the latest versions that fit your specifications in ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml"),". Cargo will then write those versions to the ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file. Otherwise, by default, Cargo will only look for versions greater than 0.8.5 and less than 0.9.0. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate has released the two new versions 0.8.6 and 0.9.0, you would see the following if you ran ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo update"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n")),(0,i.kt)("p",null,"Cargo ignores the 0.9.0 release. At this point, you would also notice a change in your ",(0,i.kt)("em",{parentName:"p"},"Cargo.lock")," file noting that the version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate you are now using is 0.8.6. To use ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," version 0.9.0 or any version in the 0.9.",(0,i.kt)("em",{parentName:"p"},"x")," series, you\u2019d have to update the ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," file to look like this instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nrand = "0.9.0"\n')),(0,i.kt)("p",null,"The next time you run ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo build"),", Cargo will update the registry of crates available and reevaluate your ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," requirements according to the new version you have specified."),(0,i.kt)("p",null,"There\u2019s a lot more to say about ",(0,i.kt)("a",{parentName:"p",href:"http://doc.crates.io/"},"Cargo")," and ",(0,i.kt)("a",{parentName:"p",href:"http://doc.crates.io/crates-io.html"},"its ecosystem"),", which we\u2019ll discuss in Chapter 14, but for now, that\u2019s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages."),(0,i.kt)("h3",{id:"generating-a-random-number"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#generating-a-random-number"},"Generating a Random Number")),(0,i.kt)("p",null,"Let\u2019s start using ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," to generate a number to guess. The next step is to update ",(0,i.kt)("em",{parentName:"p"},"src/main.rs"),", as shown in Listing 2-3."),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::io;\nuse rand::Rng;\n\nfn main() {\n    println!("Guess the number!");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!("The secret number is: {secret_number}");\n\n    println!("Please input your guess.");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect("Failed to read line");\n\n    println!("You guessed: {guess}");\n}\n')),(0,i.kt)("p",null,"Listing 2-3: Adding code to generate a random number"),(0,i.kt)("p",null,"First we add the line ",(0,i.kt)("inlineCode",{parentName:"p"},"use rand::Rng;"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"Rng")," trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods. Chapter 10 will cover traits in detail."),(0,i.kt)("p",null,"Next, we\u2019re adding two lines in the middle. In the first line, we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand::thread_rng")," function that gives us the particular random number generator we\u2019re going to use: one that is local to the current thread of execution and is seeded by the operating system. Then we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"gen_range")," method on the random number generator. This method is defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Rng")," trait that we brought into scope with the ",(0,i.kt)("inlineCode",{parentName:"p"},"use rand::Rng;")," statement. The ",(0,i.kt)("inlineCode",{parentName:"p"},"gen_range")," method takes a range expression as an argument and generates a random number in the range. The kind of range expression we\u2019re using here takes the form ",(0,i.kt)("inlineCode",{parentName:"p"},"start..=end")," and is inclusive on the lower and upper bounds, so we need to specify ",(0,i.kt)("inlineCode",{parentName:"p"},"1..=100")," to request a number between 1 and 100."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: You won\u2019t just know which traits to use and which methods and functions to call from a crate, so each crate has documentation with instructions for using it. Another neat feature of Cargo is that running the ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo doc --open")," command will build documentation provided by all your dependencies locally and open it in your browser. If you\u2019re interested in other functionality in the ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," crate, for example, run ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo doc --open")," and click ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," in the sidebar on the left.")),(0,i.kt)("p",null,"The second new line prints the secret number. This is useful while we\u2019re developing the program to be able to test it, but we\u2019ll delete it from the final version. It\u2019s not much of a game if the program prints the answer as soon as it starts!"),(0,i.kt)("p",null,"Try running the program a few times:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n")),(0,i.kt)("p",null,"You should get different random numbers, and they should all be numbers between 1 and 100. Great job!"),(0,i.kt)("h2",{id:"comparing-the-guess-to-the-secret-number"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number"},"Comparing the Guess to the Secret Number")),(0,i.kt)("p",null,"Now that we have user input and a random number, we can compare them. That step is shown in Listing 2-4. Note that this code won\u2019t compile just yet, as we will explain."),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    // --snip--\n\n    println!("You guessed: {guess}");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!("Too small!"),\n        Ordering::Greater => println!("Too big!"),\n        Ordering::Equal => println!("You win!"),\n    }\n}\n')),(0,i.kt)("p",null,"Listing 2-4: Handling the possible return values of comparing two numbers"),(0,i.kt)("p",null,"First we add another ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," statement, bringing a type called ",(0,i.kt)("inlineCode",{parentName:"p"},"std::cmp::Ordering")," into scope from the standard library. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering")," type is another enum and has the variants ",(0,i.kt)("inlineCode",{parentName:"p"},"Less"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Greater"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Equal"),". These are the three outcomes that are possible when you compare two values."),(0,i.kt)("p",null,"Then we add five new lines at the bottom that use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering")," type. The ",(0,i.kt)("inlineCode",{parentName:"p"},"cmp")," method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it\u2019s comparing ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number"),". Then it returns a variant of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering")," enum we brought into scope with the ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," statement. We use a ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch06-02-match.html"},(0,i.kt)("inlineCode",{parentName:"a"},"match"))," expression to decide what to do next based on which variant of ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering")," was returned from the call to ",(0,i.kt)("inlineCode",{parentName:"p"},"cmp")," with the values in ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression is made up of ",(0,i.kt)("em",{parentName:"p"},"arms"),". An arm consists of a ",(0,i.kt)("em",{parentName:"p"},"pattern")," to match against, and the code that should be run if the value given to ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," fits that arm\u2019s pattern. Rust takes the value given to ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," and looks through each arm\u2019s pattern in turn. Patterns and the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," construct are powerful Rust features: they let you express a variety of situations your code might encounter and they make sure you handle them all. These features will be covered in detail in Chapter 6 and Chapter 18, respectively."),(0,i.kt)("p",null,"Let\u2019s walk through an example with the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression we use here. Say that the user has guessed 50 and the randomly generated secret number this time is 38."),(0,i.kt)("p",null,"When the code compares 50 to 38, the ",(0,i.kt)("inlineCode",{parentName:"p"},"cmp")," method will return ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Greater")," because 50 is greater than 38. The ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression gets the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Greater")," value and starts checking each arm\u2019s pattern. It looks at the first arm\u2019s pattern, ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Less"),", and sees that the value ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Greater")," does not match ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Less"),", so it ignores the code in that arm and moves to the next arm. The next arm\u2019s pattern is ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Greater"),", which ",(0,i.kt)("em",{parentName:"p"},"does")," match ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering::Greater"),"! The associated code in that arm will execute and print ",(0,i.kt)("inlineCode",{parentName:"p"},"Too big!")," to the screen. The ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression ends after the first successful match, so it won\u2019t look at the last arm in this scenario."),(0,i.kt)("p",null,"However, the code in Listing 2-4 won\u2019t compile yet. Let\u2019s try it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo build\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n  --\x3e src/main.rs:22:21\n   |\n22 |     match guess.cmp(&secret_number) {\n   |                 --- ^^^^^^^^^^^^^^ expected struct `String`, found integer\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&String`\n              found reference `&{integer}`\nnote: associated function defined here\n  --\x3e /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/cmp.rs:783:8\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` due to previous error\n")),(0,i.kt)("p",null,"The core of the error states that there are ",(0,i.kt)("em",{parentName:"p"},"mismatched types"),". Rust has a strong, static type system. However, it also has type inference. When we wrote ",(0,i.kt)("inlineCode",{parentName:"p"},"let mut guess = String::new()"),", Rust was able to infer that ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," should be a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," and didn\u2019t make us write the type. The ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number"),", on the other hand, is a number type. A few of Rust\u2019s number types can have a value between 1 and 100: ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),", a 32-bit number; ",(0,i.kt)("inlineCode",{parentName:"p"},"u32"),", an unsigned 32-bit number; ",(0,i.kt)("inlineCode",{parentName:"p"},"i64"),", a 64-bit number; as well as others. Unless otherwise specified, Rust defaults to an ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),", which is the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number")," unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type."),(0,i.kt)("p",null,"Ultimately, we want to convert the ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," the program reads as input into a real number type so we can compare it numerically to the secret number. We do so by adding this line to the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function body:"),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    // --snip--\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect("Failed to read line");\n\n    let guess: u32 = guess.trim().parse().expect("Please type a number!");\n\n    println!("You guessed: {guess}");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!("Too small!"),\n        Ordering::Greater => println!("Too big!"),\n        Ordering::Equal => println!("You win!"),\n    }\n')),(0,i.kt)("p",null,"The line is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let guess: u32 = guess.trim().parse().expect("Please type a number!");\n')),(0,i.kt)("p",null,"We create a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"guess"),". But wait, doesn\u2019t the program already have a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"guess"),"? It does, but helpfully Rust allows us to shadow the previous value of ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," with a new one. ",(0,i.kt)("em",{parentName:"p"},"Shadowing")," lets us reuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," variable name rather than forcing us to create two unique variables, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"guess_str")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"guess"),", for example. We\u2019ll cover this in more detail in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing"},"Chapter 3"),", but for now, know that this feature is often used when you want to convert a value from one type to another type."),(0,i.kt)("p",null,"We bind this new variable to the expression ",(0,i.kt)("inlineCode",{parentName:"p"},"guess.trim().parse()"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," in the expression refers to the original ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," variable that contained the input as a string. The ",(0,i.kt)("inlineCode",{parentName:"p"},"trim")," method on a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," instance will eliminate any whitespace at the beginning and end, which we must do to be able to compare the string to the ",(0,i.kt)("inlineCode",{parentName:"p"},"u32"),", which can only contain numerical data. The user must press enter to satisfy ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," and input their guess, which adds a newline character to the string. For example, if the user types 5 and presses enter, ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," looks like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"5\\n"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," represents \u201cnewline.\u201d (On Windows, pressing enter results in a carriage return and a newline, ",(0,i.kt)("inlineCode",{parentName:"p"},"\\r\\n"),".) The ",(0,i.kt)("inlineCode",{parentName:"p"},"trim")," method eliminates ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"\\r\\n"),", resulting in just ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/primitive.str.html#method.parse"},(0,i.kt)("inlineCode",{parentName:"a"},"parse")," method on strings")," converts a string to another type. Here, we use it to convert from a string to a number. We need to tell Rust the exact number type we want by using ",(0,i.kt)("inlineCode",{parentName:"p"},"let guess: u32"),". The colon (",(0,i.kt)("inlineCode",{parentName:"p"},":"),") after ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," tells Rust we\u2019ll annotate the variable\u2019s type. Rust has a few built-in number types; the ",(0,i.kt)("inlineCode",{parentName:"p"},"u32")," seen here is an unsigned, 32-bit integer. It\u2019s a good default choice for a small positive number. You\u2019ll learn about other number types in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-types"},"Chapter 3"),"."),(0,i.kt)("p",null,"Additionally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"u32")," annotation in this example program and the comparison with ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number")," means Rust will infer that ",(0,i.kt)("inlineCode",{parentName:"p"},"secret_number")," should be a ",(0,i.kt)("inlineCode",{parentName:"p"},"u32")," as well. So now the comparison will be between two values of the same type!"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," method will only work on characters that can logically be converted into numbers and so can easily cause errors. If, for example, the string contained ",(0,i.kt)("inlineCode",{parentName:"p"},"A\ud83d\udc4d%"),", there would be no way to convert that to a number. Because it might fail, the ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," method returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," type, much as the ",(0,i.kt)("inlineCode",{parentName:"p"},"read_line")," method does (discussed earlier in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result"},"\u201cHandling Potential Failure with ",(0,i.kt)("inlineCode",{parentName:"a"},"Result"),"\u201d"),"). We\u2019ll treat this ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," the same way by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," method again. If ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," variant because it couldn\u2019t create a number from the string, the ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," call will crash the game and print the message we give it. If ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," can successfully convert the string to a number, it will return the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," variant of ",(0,i.kt)("inlineCode",{parentName:"p"},"Result"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," will return the number that we want from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," value."),(0,i.kt)("p",null,"Let\u2019s run the program now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n")),(0,i.kt)("p",null,"Nice! Even though spaces were added before the guess, the program still figured out that the user guessed 76. Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low."),(0,i.kt)("p",null,"We have most of the game working now, but the user can make only one guess. Let\u2019s change that by adding a loop!"),(0,i.kt)("h2",{id:"allowing-multiple-guesses-with-looping"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#allowing-multiple-guesses-with-looping"},"Allowing Multiple Guesses with Looping")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"loop")," keyword creates an infinite loop. We\u2019ll add a loop to give users more chances at guessing the number:"),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    // --snip--\n\n    println!("The secret number is: {secret_number}");\n\n    loop {\n        println!("Please input your guess.");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!("Too small!"),\n            Ordering::Greater => println!("Too big!"),\n            Ordering::Equal => println!("You win!"),\n        }\n    }\n}\n')),(0,i.kt)("p",null,"As you can see, we\u2019ve moved everything from the guess input prompt onward into a loop. Be sure to indent the lines inside the loop another four spaces each and run the program again. The program will now ask for another guess forever, which actually introduces a new problem. It doesn\u2019t seem like the user can quit!"),(0,i.kt)("p",null,"The user could always interrupt the program by using the keyboard shortcut ctrl-c. But there\u2019s another way to escape this insatiable monster, as mentioned in the ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," discussion in ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number"},"\u201cComparing the Guess to the Secret Number\u201d"),": if the user enters a non-number answer, the program will crash. We can take advantage of that to allow the user to quit, as shown here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n")),(0,i.kt)("p",null,"Typing ",(0,i.kt)("inlineCode",{parentName:"p"},"quit")," will quit the game, but as you\u2019ll notice, so will entering any other non-number input. This is suboptimal, to say the least; we want the game to also stop when the correct number is guessed."),(0,i.kt)("h3",{id:"quitting-after-a-correct-guess"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess"},"Quitting After a Correct Guess")),(0,i.kt)("p",null,"Let\u2019s program the game to quit when the user wins by adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," statement:"),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!("Too small!"),\n            Ordering::Greater => println!("Too big!"),\n            Ordering::Equal => {\n                println!("You win!");\n                break;\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," line after ",(0,i.kt)("inlineCode",{parentName:"p"},"You win!")," makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,i.kt)("h3",{id:"handling-invalid-input"},(0,i.kt)("a",{parentName:"h3",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#handling-invalid-input"},"Handling Invalid Input")),(0,i.kt)("p",null,"To further refine the game\u2019s behavior, rather than crashing the program when the user inputs a non-number, let\u2019s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," is converted from a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"u32"),", as shown in Listing 2-5."),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect("Failed to read line");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!("You guessed: {guess}");\n\n        // --snip--\n')),(0,i.kt)("p",null,"Listing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program"),(0,i.kt)("p",null,"We switch from an ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," call to a ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression to move from crashing on an error to handling the error. Remember that ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," type and ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," is an enum that has the variants ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Err"),". We\u2019re using a ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression here, as we did with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordering")," result of the ",(0,i.kt)("inlineCode",{parentName:"p"},"cmp")," method."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," is able to successfully turn the string into a number, it will return an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," value that contains the resultant number. That ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," value will match the first arm\u2019s pattern, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," expression will just return the ",(0,i.kt)("inlineCode",{parentName:"p"},"num")," value that ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," produced and put inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," value. That number will end up right where we want it in the new ",(0,i.kt)("inlineCode",{parentName:"p"},"guess")," variable we\u2019re creating."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," is ",(0,i.kt)("em",{parentName:"p"},"not")," able to turn the string into a number, it will return an ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," value that contains more information about the error. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," value does not match the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok(num)")," pattern in the first ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," arm, but it does match the ",(0,i.kt)("inlineCode",{parentName:"p"},"Err(_)")," pattern in the second arm. The underscore, ",(0,i.kt)("inlineCode",{parentName:"p"},"_"),", is a catchall value; in this example, we\u2019re saying we want to match all ",(0,i.kt)("inlineCode",{parentName:"p"},"Err")," values, no matter what information they have inside them. So the program will execute the second arm\u2019s code, ",(0,i.kt)("inlineCode",{parentName:"p"},"continue"),", which tells the program to go to the next iteration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"loop")," and ask for another guess. So, effectively, the program ignores all errors that ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," might encounter!"),(0,i.kt)("p",null,"Now everything in the program should work as expected. Let\u2019s try it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n")),(0,i.kt)("p",null,"Awesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let\u2019s delete the ",(0,i.kt)("inlineCode",{parentName:"p"},"println!")," that outputs the secret number. Listing 2-6 shows the final code."),(0,i.kt)("p",null,"Filename: src/main.rs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!("Guess the number!");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        println!("Please input your guess.");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect("Failed to read line");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!("You guessed: {guess}");\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!("Too small!"),\n            Ordering::Greater => println!("Too big!"),\n            Ordering::Equal => {\n                println!("You win!");\n                break;\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Listing 2-6: Complete guessing game code"),(0,i.kt)("p",null,"At this point, you\u2019ve successfully built the guessing game. Congratulations!"),(0,i.kt)("h2",{id:"summary"},(0,i.kt)("a",{parentName:"h2",href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#summary"},"Summary")),(0,i.kt)("p",null,"This project was a hands-on way to introduce you to many new Rust concepts: ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"match"),", functions, the use of external crates, and more. In the next few chapters, you\u2019ll learn about these concepts in more detail. Chapter 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Chapter 4 explores ownership, a feature that makes Rust different from other languages. Chapter 5 discusses structs and method syntax, and Chapter 6 explains how enums work."))}d.isMDXComponent=!0}}]);