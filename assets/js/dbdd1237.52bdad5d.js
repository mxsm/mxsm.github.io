"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[8818],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(t),k=l,g=m["".concat(p,".").concat(k)]||m[k]||c[k]||o;return t?a.createElement(g,r(r({ref:n},s),{},{components:t})):a.createElement(g,r({ref:n},s))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=k;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var u=2;u<o;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},8232:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(7462),l=(t(7294),t(3905));const o={title:"Netty\u6e90\u7801\u89e3\u6790-\u6c60\u5316\u5185\u5b58\u7ba1\u7406\u89e3\u6790",linkTitle:"Netty\u6e90\u7801\u89e3\u6790-\u6c60\u5316\u5185\u5b58\u7ba1\u7406\u89e3\u6790",date:new Date("2022-01-08T00:00:00.000Z"),weight:202201081729},r=void 0,i={unversionedId:"netty/netty-source-code-analysis/netty-source-analysis-pooled-manage",id:"netty/netty-source-code-analysis/netty-source-analysis-pooled-manage",title:"Netty\u6e90\u7801\u89e3\u6790-\u6c60\u5316\u5185\u5b58\u7ba1\u7406\u89e3\u6790",description:"Netty\u7248\u672c\uff1a4.1.72.Final",source:"@site/docs/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage.md",sourceDirName:"netty/netty-source-code-analysis",slug:"/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage",permalink:"/docs/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1678517863,formattedLastUpdatedAt:"Mar 11, 2023",frontMatter:{title:"Netty\u6e90\u7801\u89e3\u6790-\u6c60\u5316\u5185\u5b58\u7ba1\u7406\u89e3\u6790",linkTitle:"Netty\u6e90\u7801\u89e3\u6790-\u6c60\u5316\u5185\u5b58\u7ba1\u7406\u89e3\u6790",date:"2022-01-08T00:00:00.000Z",weight:202201081729},sidebar:"netty",previous:{title:"Netty\u6e90\u7801\u89e3\u6790-SizeClasses",permalink:"/docs/netty/netty-source-code-analysis/netty-source-analysis-SizeClasses"},next:{title:"Netty\u6e90\u7801\u5206\u6790-Channel\u5982\u4f55\u4ece\u4e3b\u7ebf\u7a0b\u5207\u6362\u5230\u4ece\u7ebf\u7a0b",permalink:"/docs/netty/netty-source-code-analysis/netty-source-bossgroup-switch-workgroup"}},p={},u=[{value:"1. Netty\u4e2d\u5185\u5b58\u7684\u89c4\u683c",id:"1-netty\u4e2d\u5185\u5b58\u7684\u89c4\u683c",level:3},{value:"2. Netty\u5185\u5b58\u6c60\u7684\u6570\u636e\u7ed3\u6784",id:"2-netty\u5185\u5b58\u6c60\u7684\u6570\u636e\u7ed3\u6784",level:3},{value:"2.1 PoolSubpage\u6570\u636e\u7ed3\u6784\u89e3\u6790",id:"21-poolsubpage\u6570\u636e\u7ed3\u6784\u89e3\u6790",level:4},{value:"2.2 PoolChunk\u6570\u636e\u7ed3\u6784\u89e3\u6790",id:"22-poolchunk\u6570\u636e\u7ed3\u6784\u89e3\u6790",level:4},{value:"2.3 PoolArena\u6570\u636e\u7ed3\u6784\u89e3\u6790",id:"23-poolarena\u6570\u636e\u7ed3\u6784\u89e3\u6790",level:4},{value:"2.4 PoolChunkList\u6570\u636e\u7ed3\u6784\u89e3\u6790",id:"24-poolchunklist\u6570\u636e\u7ed3\u6784\u89e3\u6790",level:4},{value:"3. \u6c60\u5316\u5206\u914d\u4e2d\u7684\u7f13\u5b58",id:"3-\u6c60\u5316\u5206\u914d\u4e2d\u7684\u7f13\u5b58",level:3},{value:"3.1 PoolThreadCache",id:"31-poolthreadcache",level:4},{value:"3.2 MemoryRegionCache",id:"32-memoryregioncache",level:4},{value:"4. Netty \u6c60\u5316\u5185\u5b58\u5206\u914d\u6d41\u7a0b",id:"4-netty-\u6c60\u5316\u5185\u5b58\u5206\u914d\u6d41\u7a0b",level:3},{value:"5. \u603b\u7ed3",id:"5-\u603b\u7ed3",level:3}],s={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(m,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Netty\u7248\u672c\uff1a4.1.72.Final")),(0,l.kt)("p",null,"Netty\u5f53\u4e0b\u6700\u70ed\u706b\u6700\u70ed\u95e8\u7684\u7f51\u7edc\u7f16\u7a0b\u6846\u67b6\u9700\u8981\u5904\u7406\u6d77\u91cf\u7684\u5b57\u8282\u6570\u636e\u3002Netty\u63d0\u4f9b\u4e86\u5b57\u8282\u6c60\u5316\u7684\u673a\u5236\u3002\u5bf9\u8c61\u6c60\u5316\u5185\u5b58\u5206\u914d\uff0c\u4f7f\u7528\u5b8c\u6210\u540e\u5f52\u7ed9\u5185\u5b58\u6b21\u3002\u6c60\u5316\u5185\u5b58\uff0c\u90a3\u4e48\u5185\u5b58\u7684\u7ba1\u7406\u5fc5\u4e0d\u53ef\u5c11\u3002Netty\u57fa\u4e8e",(0,l.kt)("a",{parentName:"p",href:"http://jemalloc.net/"},"jemalloc")," \u5b9e\u73b0\u4e86\u4e00\u5957\u5185\u5b58\u5206\u914d\u548c\u7ba1\u7406\u7684\u673a\u5236\u3002"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"GitHub\u5730\u5740\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://github.com/jemalloc/jemalloc"},"https://github.com/jemalloc/jemalloc")),(0,l.kt)("p",{parentName:"blockquote"},"4.1.72.Final \u7248\u672c\u57fa\u4e8e jemalloc4 \u5b9e\u73b0")),(0,l.kt)("p",null,"\u501f\u9274 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"jemalloc"))," \u7528\u6765\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u591a\u7ebf\u7a0b\u4e0b\u7684\u5185\u5b58\u56de\u6536\u4e0e\u5206\u914d"),(0,l.kt)("li",{parentName:"ul"},"\u5185\u5b58\u7684\u788e\u7247\u5316\u95ee\u9898(\u4e0d\u65ad\u5206\u914d\u548c\u56de\u6536\u8fc7\u7a0b\u4e2d\u4f1a\u4ea7\u751f\uff0cjemalloc4 \u8fdb\u4e00\u6b65\u4f18\u5316\u4e86\u5185\u5b58\u788e\u7247\u4ea7\u751f)")),(0,l.kt)("h3",{id:"1-netty\u4e2d\u5185\u5b58\u7684\u89c4\u683c"},"1. Netty\u4e2d\u5185\u5b58\u7684\u89c4\u683c"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty%E5%86%85%E5%AD%98%E8%A7%84%E6%A0%BC2.png",alt:"Netty\u5185\u5b58\u89c4\u683c2 (1)"})),(0,l.kt)("p",null,"\u5982\u4e0a\u56fe\u6240\u793aNetty\u4e2d\u5185\u5b58\u89c4\u683c\u5206\u4e3a\u4e09\u7c7b(SizeClass\u4e2d\u5b9a\u4e49\u4e86)\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    enum SizeClass {\n        Small,\n        Normal\n    }\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Tiny\u73b0\u5728\u5df2\u7ecf\u53bb\u6389")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"small\uff1a0-28K\uff08\u5305\u542b\uff09"),(0,l.kt)("li",{parentName:"ul"},"normal: 28K(\u4e0d\u5305\u542b)-16M(\u5305\u542b)"),(0,l.kt)("li",{parentName:"ul"},"Huge: \u5927\u4e8e16M\uff08\u4e0d\u4f1a\u8fdb\u884c\u6c60\u5316\uff09")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Hotspot\u865a\u62df\u673a\u7684\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u8981\u6c42\u5bf9\u8c61\u8d77\u59cb\u5730\u5740\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u5c0f\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\u3002\u800c\u5bf9\u8c61\u5934\u90e8\u5206\u6b63\u597d\u662f8\u5b57\u8282\u7684\u500d\u6570\uff081\u500d\u62162\u500d\uff09\uff0c\u56e0\u6b64\uff0c\u5f53\u5bf9\u8c61\u5b9e\u4f8b\u6570\u636e\u90e8\u5206\u6ca1\u6709\u5bf9\u9f50\u65f6\uff0c\u5c31\u9700\u8981\u901a\u8fc7\u5bf9\u9f50\u586b\u5145\u6765\u8865\u5168\u3002")),(0,l.kt)("p",null,"Netty\u7684\u5185\u5b58\u7ba1\u7406\u5b9e\u73b0\u501f\u9274\u4e86 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"jemalloc"))," \u6240\u4ee5\u5f88\u591a\u6982\u5ff5\u548c ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"jemalloc"))," \u4e2d\u7684\u6982\u5ff5\u76f8\u540c\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Chunk"),"\uff1aNetty\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u7684\u6700\u5c0f\u5355\u4f4d(\u9ed8\u8ba4\u503c16M),\u662fRun\u7684\u96c6\u5408"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Run"),": \u5bf9\u5e94\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u5927\u5c0f\u662fPage\u7684\u500d\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Page"),": Chunk\u7684\u6700\u5c0f\u5206\u914d\u5355\u5143\uff0c\u9ed8\u8ba4\u5927\u5c0f\u4e3a8K,\u4e00\u4e2aChunk\u9ed8\u8ba4\u67092K\u4e2aPage."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Subpage"),": \u8d1f\u8d23Page\u5185\u7684\u5185\u5b58\u5206\u914d\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u51cf\u5c11\u5185\u5b58\u7684\u6d6a\u8d39\u3002\u5982\u679c\u9700\u8981\u5206\u914d\u7684\u5185\u5b58\u5c0f\u4e8ePage\u7684\u5927\u5c0f(8K)\u6bd4\u5982\u53ea\u6709100B,\u5982\u679c\u76f4\u63a5\u5206\u914d\u4e00\u4e2aPage(8K)\u90a3\u5c31\u76f4\u63a5\u6d6a\u8d39\u4e86\u3002Subpage\u7684\u6700\u5c0f\u662f16B\u7684\u500d\u6570\u3002Subpage\u6ca1\u6709\u56fa\u5b9a\u7684\u5927\u5c0f\uff0c\u9700\u8981\u6839\u636e\u7528\u6237\u5206\u914d\u7684\u7f13\u51b2\u533a\u51b3\u5b9a\u3002")),(0,l.kt)("h3",{id:"2-netty\u5185\u5b58\u6c60\u7684\u6570\u636e\u7ed3\u6784"},"2. Netty\u5185\u5b58\u6c60\u7684\u6570\u636e\u7ed3\u6784"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/%E5%86%85%E5%AD%98%E6%B1%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:"\u5185\u5b58\u6c60\u7684\u6570\u636e\u7ed3\u6784"})),(0,l.kt)("p",null,"\u901a\u8fc7\u56fe\u53ef\u4ee5\u77e5\u9053\uff0cNetty\u6839\u636e\u5185\u5b58\u6a21\u578b\u62bd\u8c61\u51fa\u6765\u4e86\u4e00\u4e9b\u7ec4\u4ef6\uff0c ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena\u3001PoolChunk\u3001PoolChunkList\u3001PoolSubpage\u3001PoolThreadCache\u3001MemoryRegionCache"))," \u4e0b\u9762\u6839\u636e\u4e0d\u540c\u6a21\u5757\u7ed3\u5408\u4ee3\u7801\u9010\u4e00\u5206\u6790\u5176\u6570\u636e\u7ed3\u6784\u548c\u5b9e\u73b0\u3002"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Tips:\u5f88\u591a\u6982\u5ff5\u548cjemalloc\u4e2d\u7684\u6982\u5ff5\u76f8\u4f3c\u5927\u540c\u5c0f\u5f02\uff0c\u5f53\u524d\u7814\u7a76\u7684\u4ee3\u7801\u7248\u672c\u4e2d\u53d6\u6d88\u4e86\u7f51\u4e0a\u5f88\u591a\u8d44\u6599\u91cc\u9762\u51fa\u73b0\u7684\u5185\u5b58\u89c4\u683c ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"tiny"))," \u7c7b\u578b\u3002\u53ea\u6709 ",(0,l.kt)("strong",{parentName:"p"},"small\u3001normal\u3001huge"),", \u5177\u4f53\u662f\u56e0\u4e3a\u5f53\u524d\u7684\u7248\u672c\u7684Netty\u5185\u5b58\u5206\u914d\u5b9e\u73b0\u662f\u57fa\u4e8e ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"jemalloc4"))," \u3002")),(0,l.kt)("h4",{id:"21-poolsubpage\u6570\u636e\u7ed3\u6784\u89e3\u6790"},"2.1 PoolSubpage\u6570\u636e\u7ed3\u6784\u89e3\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final class PoolSubpage<T> implements PoolSubpageMetric {\n\n    final PoolChunk<T> chunk; //\u6240\u5c5e\u7684chunk\n    private final int pageShifts;  //\u9875\u9762\u504f\u79fb\u91cf\n    private final int runOffset; //PoolSubpage \u5728 PoolChunk \u4e2d memory \u7684\u504f\u79fb\u91cf\n    private final int runSize; //Run\u7684\u5927\u5c0f\n    private final long[] bitmap; //\u6bcf\u4e00\u5757\u5c0f\u5185\u5b58\u72b6\u6001\n\n    PoolSubpage<T> prev; //\u524d\u4e00\u4e2aPoolSubpage\n    PoolSubpage<T> next; //\u540e\u4e00\u4e2aPoolSubpage\n\n    boolean doNotDestroy;\n    int elemSize; // \u6bcf\u4e2a\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\uff08\u6700\u5c0f16B\uff09\n    private int maxNumElems; // \u6700\u591a\u53ef\u4ee5\u5b58\u653e\u591a\u5c11\u5c0f\u5185\u5b58\u5757\uff1a8K(page\u9ed8\u8ba4\u5927\u5c0f)/elemSize=512\n    private int bitmapLength;\n    private int nextAvail;\n    private int numAvail; // \u53ef\u7528\u4e8e\u5206\u914d\u7684\u5185\u5b58\u5757\u4e2a\u6570\n}\n")),(0,l.kt)("p",null,"\u8fd9\u91cc\u9700\u8981\u5173\u6ce8\u4e24\u4e2a\u70b9\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"bitmap\u5982\u4f55\u8bb0\u5f55\u5185\u5b58\u72b6\u6001"),(0,l.kt)("li",{parentName:"ul"},"PoolSubpage\u5982\u4f55\u548cPoolArena\u5173\u8054")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"bitmap\u5982\u4f55\u8bb0\u5f55\u5185\u5b58\u72b6\u6001\uff1a")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"bitmap"))," \u6570\u7ec4\u957f\u5ea6\u7531 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolSubpage"))," \u7684\u6784\u9020\u51fd\u6570\u4e2d\u7684\u4e00\u6bb5\u4ee3\u7801\u51b3\u5b9a:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"//LOG2_QUANTUM=4\nbitmap = new long[runSize >>> 6 + LOG2_QUANTUM];\n")),(0,l.kt)("p",null,"\u90a3\u4e48 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"runSize"))," \u7684\u5927\u5c0f\u51b3\u5b9a\u4e86 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"bitmap"))," \u7684\u5927\u5c0f\u3002 ",(0,l.kt)("strong",{parentName:"p"},"PoolChunk#allocateSubpage")," \u5206\u914d ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Run"))," \uff08Run\u7684\u5927\u5c0f\u4e5f\u662f\u8fd9\u91cc\u51b3\u5b9a\uff09"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    private long allocateSubpage(int sizeIdx) {\n        // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.\n        // This is need as we may add it back and so alter the linked-list structure.\n        PoolSubpage<T> head = arena.findSubpagePoolHead(sizeIdx);\n        synchronized (head) {\n            //allocate a new run\n            int runSize = calculateRunSize(sizeIdx);\n            //runSize must be multiples of pageSize\n            long runHandle = allocateRun(runSize);\n            if (runHandle < 0) {\n                return -1;\n            }\n\n            int runOffset = runOffset(runHandle);\n            assert subpages[runOffset] == null;\n            int elemSize = arena.sizeIdx2size(sizeIdx);\n\n            PoolSubpage<T> subpage = new PoolSubpage<T>(head, this, pageShifts, runOffset,\n                               runSize(pageShifts, runHandle), elemSize);\n\n            subpages[runOffset] = subpage;\n            return subpage.allocate();\n        }\n    }\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Tips:  Run\u5fc5\u987b\u662fPageSize\u7684\u500d\u6570\u3002")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolSubpage"))," \u901a\u8fc7\u4f4d\u56fe ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"bitmap"))," \u8bb0\u5f55\u5b50\u5185\u5b58\u662f\u5426\u5df2\u7ecf\u88ab\u4f7f\u7528\uff0cbit \u7684\u53d6\u503c\u4e3a 0 \u6216\u8005 1"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/SubpageBitmap%20(1).png",alt:"SubpageBitmap (1)"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"PoolSubpage\u5982\u4f55\u548cPoolArena\u5173\u8054")),(0,l.kt)("p",null,"\u5728\u524d\u9762\u7684\u56fe\u6709\u4f53\u73b0\uff0c ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena"))," \u7c7b\u4e2d\u6709\u4e00\u4e2a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"smallSubpagePools"))," \u5c5e\u6027\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"abstract class PoolArena<T> extends SizeClasses implements PoolArenaMetric {\n    private final PoolSubpage<T>[] smallSubpagePools;\n    \n     protected PoolArena(PooledByteBufAllocator parent, int pageSize,\n          int pageShifts, int chunkSize, int cacheAlignment) {\n         \n         //\u7701\u7565\u90e8\u5206\u4ee3\u7801 \n        numSmallSubpagePools = nSubpages; // nsubpage = 39 \u67e5\u770b\u4e4b\u524d\u7684 \u300aNetty\u6e90\u7801\u89e3\u6790-SizeClasses\u300b\u6587\u7ae0\u4e2d\u622a\u56fe\u6709\n        smallSubpagePools = newSubpagePoolArray(numSmallSubpagePools);\n        for (int i = 0; i < smallSubpagePools.length; i ++) {\n            smallSubpagePools[i] = newSubpagePoolHead();\n        }\n         \n        //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n     }\n    \n    private PoolSubpage<T> newSubpagePoolHead() {\n        PoolSubpage<T> head = new PoolSubpage<T>();\n        head.prev = head;\n        head.next = head;\n        return head;\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/PoolArena%E5%92%8CSubpage%E5%85%B3%E8%81%94%20(1).png",alt:"PoolArena\u548cSubpage\u5173\u8054 (1)"})),(0,l.kt)("p",null,"Subpage\u670939\u4e2a\u53ef\u4ee5\u9009\u62e9\u7684\u7c7b\u578b\u3002"),(0,l.kt)("h4",{id:"22-poolchunk\u6570\u636e\u7ed3\u6784\u89e3\u6790"},"2.2 PoolChunk\u6570\u636e\u7ed3\u6784\u89e3\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final class PoolChunk<T> implements PoolChunkMetric {\n    private static final int SIZE_BIT_LENGTH = 15;\n    private static final int INUSED_BIT_LENGTH = 1;\n    private static final int SUBPAGE_BIT_LENGTH = 1;\n    private static final int BITMAP_IDX_BIT_LENGTH = 32;\n\n    static final int IS_SUBPAGE_SHIFT = BITMAP_IDX_BIT_LENGTH;\n    static final int IS_USED_SHIFT = SUBPAGE_BIT_LENGTH + IS_SUBPAGE_SHIFT;\n    static final int SIZE_SHIFT = INUSED_BIT_LENGTH + IS_USED_SHIFT;\n    static final int RUN_OFFSET_SHIFT = SIZE_BIT_LENGTH + SIZE_SHIFT;\n\n     \n    final PoolArena<T> arena;   //\u6240\u5c5e\u7684PoolArena\n    final Object base;\n    final T memory; // \u5b58\u50a8\u7684\u6570\u636e\n    final boolean unpooled;  //\u662f\u5426\u6c60\u5316\n    private final LongLongHashMap runsAvailMap; //\u7ba1\u7406PoolChunk\u7684\u6240\u6709\u7684Run\uff08\u4f7f\u7528\u6216\u8005\u6ca1\u6709\u4f7f\u7528\uff09\n    private final LongPriorityQueue[] runsAvail; // \u4f18\u5148\u961f\u5217\uff0c\u6bcf\u4e00\u4e2a\u961f\u5217\u7ba1\u7406\u540c\u6837\u5927\u5c0f\u7684Run\n    private final PoolSubpage<T>[] subpages; //PoolSubpage\u5217\u8868\n    private final int pageSize;\n    private final int pageShifts;\n    private final int chunkSize;\n    private final Deque<ByteBuffer> cachedNioBuffers;\n\n    int freeBytes;  \n    int pinnedBytes;\n\n    PoolChunkList<T> parent;\n    PoolChunk<T> prev; //\u524d\u7f6e\u8282\u70b9\n    PoolChunk<T> next; //\u540e\u7f6e\u8282\u70b9\n    \n    //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n}\n")),(0,l.kt)("p",null,"Chunk\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\u5982\u56fe\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty-Chunk-Layout.png",alt:"Netty-Chunk-Layout"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Page\u7ec4\u6210Run,Run\u7684\u5927\u5c0f\u5fc5\u987b\u662fPage\u7684\u6574\u6570\u500d RunSize = N * PageSize (N >= 1\u7684\u6574\u6570)"),(0,l.kt)("li",{parentName:"ul"},"Subpage\u7684\u5927\u5c0f\u4e3a 16B-28K,\u6240\u4ee5\u6709\u65f6\u5019Subpage\u4e5f\u5305\u542b\u591a\u4e2aPage\uff08\u8fd9\u91cc\u662fjemalloc4\u4e3a\u4e86\u8fdb\u4e00\u6b65\u89e3\u51b3\u5185\u5b58\u788e\u7247\u5316\u7684\u95ee\u9898\uff09"),(0,l.kt)("li",{parentName:"ul"},"Chunk\u4e2d\u8fd8\u6709\u4e00\u4e9b\u6ca1\u6709\u4f7f\u7528\u7684\u5185\u5b58\u6bb5\u3002\u8fd9\u4e9b\u53ef\u4ee5\u5f85\u5206\u914d")),(0,l.kt)("p",null,"\u90a3\u4e48\u8fd9\u4e9b\u5185\u5b58\u7684\u72b6\u6001\u4ee5\u53ca\u5927\u5c0f\u4ec0\u4e48\u7684\u5982\u4f55\u7ba1\u7406\uff1f \u5728Chunk\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a handle\uff08long\u7c7b\u578b\uff09"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty-chunk-handle%20(1).png",alt:"Netty-chunk-handle (1)"})),(0,l.kt)("p",null,"\u5982\u4e0a\u56fe\uff0c\u4ece\u4e0a\u5230\u4e0b\u5206\u522blong\u7684\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"o\uff08runOffset\uff09: runOffset(\u9875\u9762\u7684\u5728Chunk\u7684\u504f\u79fb\u91cf)\uff0c15bit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"s\uff08size\uff09: Run\u7684\u5927\u5c0f(\u8fd9\u4e2a\u5b57\u6bb5\u5b58\u7684\u662fpage\u7684\u6570\u91cf)\uff0c 15bit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"u\uff08isUsed\uff09: \u5f53\u524d\u5185\u5b58\u662f\u5426\u4f7f\u7528\u6807\u8bb0\u4f4d\uff0c1bit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"e\uff08isSubpage\uff09: \u5f53\u524d\u662f\u5426\u4e3aSubpage\u6807\u8bb0\u4f4d\uff0c1bit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"b\uff08bitmapIdx\uff09: Subpage\u7684\u4f4d\u56fe\u7d22\u5f15(bitmapIdx),\u5982\u679c\u4e3a0\u8868\u793a\u4e0d\u662fSubpage,32bit"))),(0,l.kt)("p",null,"\u7136\u540e\u5173\u6ce8\u4e00\u4e0b ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolChunk"))," \u7684\u51e0\u4e2a\u91cd\u8981\u5c5e\u6027\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"runsAvailMap")),(0,l.kt)("p",{parentName:"li"},"\u7ba1\u7406Run\u72b6\u6001\u7684(\u4f7f\u7528\uff0c\u672a\u4f7f\u7528)\u7684map"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"key: runOffset")),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"value: handle"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"runsAvail")),(0,l.kt)("p",{parentName:"li"},"\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u961f\u5217\u7ba1\u7406\u76f8\u540c\u5927\u5c0f\u7684Runs\u3002 Run\u6309\u7167offset\u8fdb\u884c\u5b58\u50a8\uff0c\u6240\u4ee5\u6211\u4eec\u603b\u662f\u7528\u8f83\u5c0f\u7684\u504f\u79fb\u91cf\u5206\u914d\u8fd0\u884c(\u4f18\u5148\u961f\u5217\u7684\u7279\u70b9)"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"PoolChunk\u5173\u952e\u7b97\u6cd5\u89e3\u6790\uff1a")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"\u521d\u59cb\u5316")),(0,l.kt)("p",{parentName:"li"},"\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5b58\u50a8\u4e86\u521d\u59cb\u8fd0\u884c\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a\u6570\u636e\u5757\uff0c\u521d\u59cb\u5316\u7684Run:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-properties"},"runOffset = 0\nsize = chunkSize\nisUsed = false\nisSubpage = false\nbitmapIdx = 0\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"PoolChunk#allocateRun(int runSize)\u7b97\u6cd5")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private long allocateRun(int runSize) {\n    int pages = runSize >> pageShifts;\n    int pageIdx = arena.pages2pageIdx(pages);\n\n    synchronized (runsAvail) {\n        //find first queue which has at least one big enough run\n        int queueIdx = runFirstBestFit(pageIdx);\n        if (queueIdx == -1) {\n            return -1;\n        }\n\n        //get run with min offset in this queue\n        LongPriorityQueue queue = runsAvail[queueIdx];\n        long handle = queue.poll();\n\n        assert handle != LongPriorityQueue.NO_VALUE && !isUsed(handle) : "invalid handle: " + handle;\n\n        removeAvailRun(queue, handle);\n\n        if (handle != -1) {\n            handle = splitLargeRun(handle, pages);\n        }\n\n        int pinnedSize = runSize(pageShifts, handle);\n        freeBytes -= pinnedSize;\n        pinnedBytes += pinnedSize;\n        return handle;\n    }\n}\n')),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u6839\u636erunSize\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684Run\u5728 ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"runsAvail"))," \u6570\u7ec4"),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679cRun\u7684Page\u5927\u4e8e\u8bf7\u6c42Page\uff0c\u5219\u5c06\u5176\u62c6\u5206\uff0c\u5e76\u4e14\u4fdd\u5b58\u5269\u4e0b\u7684Run\u968f\u540e\u4f7f\u7528"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"PoolChunk#allocateSubpage(int sizeIdx)\u7b97\u6cd5")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"private long allocateSubpage(int sizeIdx) {\n    // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.\n    // This is need as we may add it back and so alter the linked-list structure.\n    PoolSubpage<T> head = arena.findSubpagePoolHead(sizeIdx);\n    synchronized (head) {\n        //allocate a new run\n        int runSize = calculateRunSize(sizeIdx);\n        //runSize must be multiples of pageSize\n        long runHandle = allocateRun(runSize);\n        if (runHandle < 0) {\n            return -1;\n        }\n\n        int runOffset = runOffset(runHandle);\n        assert subpages[runOffset] == null;\n        int elemSize = arena.sizeIdx2size(sizeIdx);\n\n        PoolSubpage<T> subpage = new PoolSubpage<T>(head, this, pageShifts, runOffset,\n                           runSize(pageShifts, runHandle), elemSize);\n\n        subpages[runOffset] = subpage;\n        return subpage.allocate();\n    }\n}\n")),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u6839\u636esizeIdx\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u6ee1\u7684Subpage\u3002\u5982\u679c\u5b58\u5728\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u5206\u914d\u4e00\u4e2a\u65b0\u7684PoolSubpage,\u7136\u540e\u8c03\u7528init()\u3002\u6ce8\u610f\uff1a\u5f53\u8c03\u7528init()\u8fd9\u4e2asubpage\u5bf9\u8c61\u88ab\u6dfb\u52a0\u5230PoolArena\u7684 subpagesPool \u4e2d\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u8c03\u7528 ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"subpage.allocate()"))," \u5206\u914d"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"PoolChunk#free(long handle, int normCapacity, ByteBuffer nioBuffer)\u7b97\u6cd5")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    void free(long handle, int normCapacity, ByteBuffer nioBuffer) {\n        int runSize = runSize(pageShifts, handle);\n        pinnedBytes -= runSize;\n        if (isSubpage(handle)) {\n            int sizeIdx = arena.size2SizeIdx(normCapacity);\n            PoolSubpage<T> head = arena.findSubpagePoolHead(sizeIdx);\n\n            int sIdx = runOffset(handle);\n            PoolSubpage<T> subpage = subpages[sIdx];\n            assert subpage != null && subpage.doNotDestroy;\n\n            // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.\n            // This is need as we may add it back and so alter the linked-list structure.\n            synchronized (head) {\n                if (subpage.free(head, bitmapIdx(handle))) {\n                    //the subpage is still used, do not free it\n                    return;\n                }\n                assert !subpage.doNotDestroy;\n                // Null out slot in the array as it was freed and we should not use it anymore.\n                subpages[sIdx] = null;\n            }\n        }\n\n        //start free run\n        synchronized (runsAvail) {\n            // collapse continuous runs, successfully collapsed runs\n            // will be removed from runsAvail and runsAvailMap\n            long finalRun = collapseRuns(handle);\n\n            //set run as not used\n            finalRun &= ~(1L << IS_USED_SHIFT);\n            //if it is a subpage, set it to run\n            finalRun &= ~(1L << IS_SUBPAGE_SHIFT);\n\n            insertAvailRun(runOffset(finalRun), runPages(finalRun), finalRun);\n            freeBytes += runSize;\n        }\n\n        if (nioBuffer != null && cachedNioBuffers != null &&\n            cachedNioBuffers.size() < PooledByteBufAllocator.DEFAULT_MAX_CACHED_BYTEBUFFERS_PER_CHUNK) {\n            cachedNioBuffers.offer(nioBuffer);\n        }\n    }\n\n")),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u662fSubpage,\u90a3\u4e48\u5c06\u5206\u7247\u8fd4\u56de\u5230\u5f53\u524d\u7684Subpage."),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679cSubpage\u6ca1\u6709\u88ab\u4f7f\u7528\u6216\u8005\u662f\u4e00\u4e2aRun,\u5f00\u542f\u91ca\u653eRun"),(0,l.kt)("li",{parentName:"ol"},"\u5408\u5e76\u8fde\u7eed\u53ef\u7528\u7684Run"),(0,l.kt)("li",{parentName:"ol"},"\u4fdd\u5b58\u5408\u5e76\u7684Run")))),(0,l.kt)("h4",{id:"23-poolarena\u6570\u636e\u7ed3\u6784\u89e3\u6790"},"2.3 PoolArena\u6570\u636e\u7ed3\u6784\u89e3\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"abstract class PoolArena<T> extends SizeClasses implements PoolArenaMetric {\n    static final boolean HAS_UNSAFE = PlatformDependent.hasUnsafe();\n\n    enum SizeClass {\n        Small,\n        Normal\n    }\n\n    final PooledByteBufAllocator parent; //\u6240\u5c5e\u5206\u914d\u5668\n\n    final int numSmallSubpagePools;  // 39\n    final int directMemoryCacheAlignment;\n    private final PoolSubpage<T>[] smallSubpagePools;\n\n    private final PoolChunkList<T> q050;\n    private final PoolChunkList<T> q025;\n    private final PoolChunkList<T> q000;\n    private final PoolChunkList<T> qInit;\n    private final PoolChunkList<T> q075;\n    private final PoolChunkList<T> q100;\n\n    private final List<PoolChunkListMetric> chunkListMetrics;\n\n    // Metrics for allocations and deallocations\n    private long allocationsNormal;\n    // We need to use the LongCounter here as this is not guarded via synchronized block.\n    private final LongCounter allocationsSmall = PlatformDependent.newLongCounter();\n    private final LongCounter allocationsHuge = PlatformDependent.newLongCounter();\n    private final LongCounter activeBytesHuge = PlatformDependent.newLongCounter();\n\n    private long deallocationsSmall;\n    private long deallocationsNormal;\n\n    // We need to use the LongCounter here as this is not guarded via synchronized block.\n    private final LongCounter deallocationsHuge = PlatformDependent.newLongCounter();\n\n    // Number of thread caches backed by this arena.\n    final AtomicInteger numThreadCaches = new AtomicInteger();\n    \n    \n    //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n}\n")),(0,l.kt)("p",null,"Netty \u501f\u9274\u4e86 jemalloc \u4e2d Arena \u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u91c7\u7528\u56fa\u5b9a\u6570\u91cf\u7684\u591a\u4e2a Arena \u8fdb\u884c\u5185\u5b58\u5206\u914d\uff0cArena \u7684\u9ed8\u8ba4\u6570\u91cf\u901a\u5e38\u662fCPU\u6838\u6570*2(\u4e5f\u53ef\u80fd\u9009\u62e9\u5185\u5b58\u8ba1\u7b97\u5173\u7cfb\u8f83\u5c0f\u7684\u4e00\u4e2a)\uff0c\u901a\u8fc7\u521b\u5efa\u591a\u4e2a Arena \u6765\u7f13\u89e3\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u4ece\u800c\u63d0\u9ad8\u5185\u5b58\u5206\u914d\u6548\u7387\u3002\u7ebf\u7a0b\u5728\u9996\u6b21\u7533\u8bf7\u5206\u914d\u5185\u5b58\u65f6\uff0c\u4f1a\u901a\u8fc7 round-robin \u7684\u65b9\u5f0f\u8f6e\u8be2 Arena \u6570\u7ec4\uff0c\u9009\u62e9\u4e00\u4e2a\u56fa\u5b9a\u7684 Arena\uff0c\u5728\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u5185\u53ea\u4e0e\u8be5 Arena \u6253\u4ea4\u9053\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4fdd\u5b58\u4e86 Arena \u4fe1\u606f\uff0c\u4ece\u800c\u63d0\u9ad8\u8bbf\u95ee\u6548\u7387\u3002\u4e0b\u9762\u4ee3\u7801\u5c31\u662f\u8ba1\u7b97PoolArena\u9ed8\u8ba4\u4e2a\u6570\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class PooledByteBufAllocator extends AbstractByteBufAllocator implements ByteBufAllocatorMetricProvider {\n    private static final int DEFAULT_NUM_HEAP_ARENA; //\u9ed8\u8ba4arena\u7684\u6570\u91cf\n    private static final int DEFAULT_NUM_DIRECT_ARENA;//\u9ed8\u8ba4arena\u7684\u6570\u91cf\n    \n    static{\n        final int defaultMinNumArena = NettyRuntime.availableProcessors() * 2;\n        final int defaultChunkSize = DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER;\n        DEFAULT_NUM_HEAP_ARENA = Math.max(0,\n                SystemPropertyUtil.getInt(\n                        "io.netty.allocator.numHeapArenas",\n                        (int) Math.min(\n                                defaultMinNumArena,\n                                runtime.maxMemory() / defaultChunkSize / 2 / 3)));\n        DEFAULT_NUM_DIRECT_ARENA = Math.max(0,\n                SystemPropertyUtil.getInt(\n                        "io.netty.allocator.numDirectArenas",\n                        (int) Math.min(\n                                defaultMinNumArena,\n                                PlatformDependent.maxDirectMemory() / defaultChunkSize / 2 / 3)));\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena"))," \u6709\u4e24\u4e2a\u5b9e\u73b0\u5206\u522b\u5bf9\u5e94\u5806\u5185\u5185\u5b58\u548c\u5806\u5916\u5185\u5b58\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"DirectArena")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"HeapArena"))),(0,l.kt)("p",null,"\u56fe\u793a\u6570\u636e\u7ed3\u6784\u5982\u56fe\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/PoolArena%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(1).png",alt:"PoolArena\u6570\u636e\u7ed3\u6784 (1)"})),(0,l.kt)("p",null,"\u5305\u542b\u4e86\u4e00\u4e2a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"smallSubpagePools\uff08 PoolSubpage<T>[]\uff09"))," \u548c6\u4e2aPoolChunkList\\<T",">"," \u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"smallSubpagePools\u5b58\u653esmall Subpage\u7c7b\u578b\u7684\u5185\u5b58\u5feb"),(0,l.kt)("li",{parentName:"ul"},"6\u4e2aPoolChunkList \u5b58\u653e\u4f7f\u7528\u7387\u4e0d\u540c\u7684Chunk,\u6784\u6210\u4e00\u4e2a\u53cc\u5411\u5faa\u73af\u94fe\u8868")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena"))," \u5bf9\u5e94\u5b9e\u73b0\u4e86 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Subpage"))," \u548c ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Chunk"))," \u4e2d\u7684\u5185\u5b58\u5206\u914d\u3002 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolSubpage"))," \u8d1f\u8d23\u5206\u914d\u5c0f\u4e8e\u7b49\u4e8e28K\u7684\u5185\u5b58\uff0c",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolChunkList"))," \u8d1f\u8d23\u5927\u4e8e\u7b49\u4e8e32K\u7684\u5185\u5b58\u3002",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolSubpage"))," \u5206\u914d\u7684\u5185\u5b58\u60c5\u51b5\u670939\u79cd(\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u67e5\u770b\u4e4b\u524d\u7684\u300aNetty\u6e90\u7801\u89e3\u6790-SizeClasses\u300b)\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolChunkList"))," \u5728 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena"))," \u521d\u59cb\u5316\u4e866\u4e2a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"protected PoolArena(PooledByteBufAllocator parent, int pageSize,\n          int pageShifts, int chunkSize, int cacheAlignment) {\n        q100 = new PoolChunkList<T>(this, null, 100, Integer.MAX_VALUE, chunkSize);\n        q075 = new PoolChunkList<T>(this, q100, 75, 100, chunkSize);\n        q050 = new PoolChunkList<T>(this, q075, 50, 100, chunkSize);\n        q025 = new PoolChunkList<T>(this, q050, 25, 75, chunkSize);\n        q000 = new PoolChunkList<T>(this, q025, 1, 50, chunkSize);\n        qInit = new PoolChunkList<T>(this, q000, Integer.MIN_VALUE, 25, chunkSize);\n\n        q100.prevList(q075);\n        q075.prevList(q050);\n        q050.prevList(q025);\n        q025.prevList(q000);\n        q000.prevList(null);\n        qInit.prevList(qInit);\n}\n")),(0,l.kt)("p",null," ",(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/ChunkList%E4%BD%BF%E7%94%A8%E7%8E%87%20(1).png",alt:"ChunkList\u4f7f\u7528\u7387 (1)"})),(0,l.kt)("p",null,"Chunk \u5185\u5b58\u4f7f\u7528\u7387\u7684\u53d8\u5316\uff0cNetty \u4f1a\u91cd\u65b0\u68c0\u67e5\u5185\u5b58\u7684\u4f7f\u7528\u7387\u5e76\u653e\u5165\u5bf9\u5e94\u7684 PoolChunkList\uff0c\u6240\u4ee5 PoolChunk \u4f1a\u5728\u4e0d\u540c\u7684 PoolChunkList \u79fb\u52a8\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u7591\u95ee1\uff1aqInit \u548c q000 \u4e3a\u4ec0\u4e48\u9700\u8981\u8bbe\u8ba1\u6210\u4e24\u4e2a")),(0,l.kt)("p",null,"qInit \u7528\u4e8e\u5b58\u50a8\u521d\u59cb\u5206\u914d\u7684 PoolChunk\uff0c\u56e0\u4e3a\u5728\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d\u65f6\uff0cPoolChunkList \u4e2d\u5e76\u6ca1\u6709\u53ef\u7528\u7684 PoolChunk\uff0c\u6240\u4ee5\u9700\u8981\u65b0\u521b\u5efa\u4e00\u4e2a PoolChunk \u5e76\u6dfb\u52a0\u5230 qInit \u5217\u8868\u4e2d\u3002qInit \u4e2d\u7684 PoolChunk \u5373\u4f7f\u5185\u5b58\u88ab\u5b8c\u5168\u91ca\u653e\u4e5f\u4e0d\u4f1a\u88ab\u56de\u6536\uff0c\u907f\u514d PoolChunk \u7684\u91cd\u590d\u521d\u59cb\u5316\u5de5\u4f5c\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u7591\u95ee2\uff1a\u5728\u65b9\u6cd5 PoolArena#allocateNormal \u4e3a\u4ec0\u4e48\u9996\u5148\u5224\u65ad\u7684\u662f q050")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    private void allocateNormal(PooledByteBuf<T> buf, int reqCapacity, int sizeIdx, PoolThreadCache threadCache) {\n        if (q050.allocate(buf, reqCapacity, sizeIdx, threadCache) ||\n            q025.allocate(buf, reqCapacity, sizeIdx, threadCache) ||\n            q000.allocate(buf, reqCapacity, sizeIdx, threadCache) ||\n            qInit.allocate(buf, reqCapacity, sizeIdx, threadCache) ||\n            q075.allocate(buf, reqCapacity, sizeIdx, threadCache)) {\n            return;\n        }\n\n        // Add a new chunk.\n        PoolChunk<T> c = newChunk(pageSize, nPSizes, pageShifts, chunkSize);\n        boolean success = c.allocate(buf, reqCapacity, sizeIdx, threadCache);\n        assert success;\n        qInit.add(c);\n    }\n")),(0,l.kt)("p",null,"\u5206\u914d\u7684\u903b\u8f91 q050 -----\x3e q025 -----\x3e  q000 ----\x3e qInit ----\x3e q075\u3002"),(0,l.kt)("p",null,"\u7f51\u4e0a\u89e3\u91ca\uff1a\u6298\u4e2d\u7684\u9009\u62e9\uff0c\u5728\u9891\u7e41\u5206\u914d\u5185\u5b58\u7684\u573a\u666f\u4e0b\uff0c\u5982\u679c\u4ece q000 \u5f00\u59cb\uff0c\u4f1a\u6709\u5927\u90e8\u5206\u7684 PoolChunk \u9762\u4e34\u9891\u7e41\u7684\u521b\u5efa\u548c\u9500\u6bc1\uff0c\u9020\u6210\u5185\u5b58\u5206\u914d\u7684\u6027\u80fd\u964d\u4f4e\u3002\u5982\u679c\u4ece q050 \u5f00\u59cb\uff0c\u4f1a\u4f7f PoolChunk \u7684\u4f7f\u7528\u7387\u8303\u56f4\u4fdd\u6301\u5728\u4e2d\u95f4\u6c34\u5e73\uff0c\u964d\u4f4e\u4e86 PoolChunk \u88ab\u56de\u6536\u7684\u6982\u7387\uff0c\u4ece\u800c\u517c\u987e\u4e86\u6027\u80fd\u3002(\u6ca1\u6709\u770b\u5230\u5b98\u65b9\u7684\u8bbe\u8ba1\u8bf4\u660e)"),(0,l.kt)("h4",{id:"24-poolchunklist\u6570\u636e\u7ed3\u6784\u89e3\u6790"},"2.4 PoolChunkList\u6570\u636e\u7ed3\u6784\u89e3\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final class PoolChunkList<T> implements PoolChunkListMetric {\n    private static final Iterator<PoolChunkMetric> EMPTY_METRICS = Collections.<PoolChunkMetric>emptyList().iterator();\n    private final PoolArena<T> arena;\n    private final PoolChunkList<T> nextList;\n    private final int minUsage;\n    private final int maxUsage;\n    private final int maxCapacity;\n    private PoolChunk<T> head;\n    private final int freeMinThreshold;\n    private final int freeMaxThreshold;\n\n    // This is only update once when create the linked like list of PoolChunkList in PoolArena constructor.\n    private PoolChunkList<T> prevList;\n}\n")),(0,l.kt)("p",null,"\u4ece\u4e0a\u9762\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u770b\u51fa\u6765\uff0cPoolChunkList\u7ec4\u6210\u4e86\u4e00\u4e2a\u53cc\u5411\u5faa\u73af\u5217\u8868\u3002"),(0,l.kt)("p",null,"\u4e0a\u9762\u5c31\u662f\u6c60\u5316\u5185\u5b58\u5206\u914d\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u7c7b\u548c\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u3002\u4f46\u662f\u5728\u5206\u914d\u7f13\u5b58\u7684\u8fc7\u7a0b\u4e2d\u8fd8\u6709\u4e00\u4e2a\u7f13\u5b58\u5b58\u5728\u3002\u4e0b\u9762\u6765\u5206\u6790\u4e00\u4e0b\u7f13\u5b58\u3002\u7f13\u5b58\u4e3b\u8981\u6d89\u53ca\u5230\u4e24\u4e2a\u7c7b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"PoolThreadCache")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"MemoryRegionCache"))),(0,l.kt)("h3",{id:"3-\u6c60\u5316\u5206\u914d\u4e2d\u7684\u7f13\u5b58"},"3. \u6c60\u5316\u5206\u914d\u4e2d\u7684\u7f13\u5b58"),(0,l.kt)("h4",{id:"31-poolthreadcache"},"3.1 PoolThreadCache"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final class PoolThreadCache {\n\n    private static final InternalLogger logger = InternalLoggerFactory.getInstance(PoolThreadCache.class);\n    private static final int INTEGER_SIZE_MINUS_ONE = Integer.SIZE - 1;\n\n    final PoolArena<byte[]> heapArena;\n    final PoolArena<ByteBuffer> directArena;\n\n    // Hold the caches for the different size classes, which are tiny, small and normal.\n    private final MemoryRegionCache<byte[]>[] smallSubPageHeapCaches;\n    private final MemoryRegionCache<ByteBuffer>[] smallSubPageDirectCaches;\n    private final MemoryRegionCache<byte[]>[] normalHeapCaches;\n    private final MemoryRegionCache<ByteBuffer>[] normalDirectCaches;\n\n    private final int freeSweepAllocationThreshold;\n    private final AtomicBoolean freed = new AtomicBoolean();\n\n    private int allocations;\n}\n")),(0,l.kt)("p",null,"Netty\u5b98\u65b9\u7684\u8bf4\u660e\uff1a\u5145\u5f53\u5206\u914d\u7684\u7ebf\u7a0b\u7f13\u5b58\u3002\u8fd9\u4e2a\u548cjemalloc\u53ef\u4f38\u7f29\u5185\u5b58\u5206\u914d\u6280\u672f\u4e00\u6837\u3002"),(0,l.kt)("p",null,"\u5f53\u5185\u5b58\u91ca\u653e\u65f6\uff0c\u4e0e jemalloc \u4e00\u6837\uff0cNetty \u5e76\u6ca1\u6709\u5c06\u7f13\u5b58\u5f52\u8fd8\u7ed9 PoolChunk\uff0c\u800c\u662f\u4f7f\u7528 PoolThreadCache \u7f13\u5b58\u8d77\u6765\uff0c\u5f53\u4e0b\u6b21\u6709\u540c\u6837\u89c4\u683c\u7684\u5185\u5b58\u5206\u914d\u65f6\uff0c\u76f4\u63a5\u4ece PoolThreadCache \u53d6\u51fa\u4f7f\u7528\u5373\u53ef\u3002\u8fd9\u4e2a\u53ef\u5728 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolArena#tcacheAllocateSmall"))," \u65b9\u6cd5\u53ef\u4ee5\u770b\u51fa\u6765\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    private void tcacheAllocateSmall(PoolThreadCache cache, PooledByteBuf<T> buf, final int reqCapacity,\n                                     final int sizeIdx) {\n\n        if (cache.allocateSmall(this, buf, reqCapacity, sizeIdx)) {\n            // was able to allocate out of the cache so move on\n            return;\n        }\n        //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n    }\n")),(0,l.kt)("p",null,"\u5728PoolThreadCache\u7f13\u5b58\u7684\u65f6\u5019\u4f7f\u7528\u4e86 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"MemoryRegionCache"))," \u3002 \u5b58\u5728\u4e24\u4e2a\u7eac\u5ea6\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5806\u5185\u6216\u8005\u5806\u5916"),(0,l.kt)("li",{parentName:"ul"},"small\u6216\u8005normal")),(0,l.kt)("h4",{id:"32-memoryregioncache"},"3.2 MemoryRegionCache"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"}," private abstract static class MemoryRegionCache<T> {\n        private final int size;\n        private final Queue<Entry<T>> queue;\n        private final SizeClass sizeClass;\n        private int allocations;\n     \n     //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n      MemoryRegionCache(int size, SizeClass sizeClass) {\n            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);\n            queue = PlatformDependent.newFixedMpscQueue(this.size);\n            this.sizeClass = sizeClass;\n      }\n }\n")),(0,l.kt)("p",null,"\u8fd9\u91cc\u6709\u51e0\u4e2a\u5c5e\u6027\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"size: \u961f\u5217\u957f\u5ea6\uff0c small\u9ed8\u8ba4\u503c\u4e3a256\uff0c Normal\u7684\u9ed8\u8ba4\u503c\u4e3a64")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u7f13\u5b58\u6700\u5927\u6570\u636e\u5927\u5c0f\u4e3a32K(PooledByteBufAllocator\u7684\u9759\u6001\u53d8\u91cfDEFAULT_MAX_CACHED_BUFFER_CAPACITY\u8bbe\u7f6e\u4e86)")),(0,l.kt)("h3",{id:"4-netty-\u6c60\u5316\u5185\u5b58\u5206\u914d\u6d41\u7a0b"},"4. Netty \u6c60\u5316\u5185\u5b58\u5206\u914d\u6d41\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Netty"))," \u6c60\u5316 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"ByteBuf"))," \u5206\u914d\u7531 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"PooledByteBufAllocator"))," \u6765\u5206\u914d\u3002\u5206\u914d\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty%E6%B1%A0%E5%8C%96%E5%88%86%E9%85%8D%E6%B5%81%E7%A8%8B%20.png",alt:"Netty\u6c60\u5316\u5206\u914d\u6d41\u7a0b "})),(0,l.kt)("h3",{id:"5-\u603b\u7ed3"},"5. \u603b\u7ed3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Netty\u5185\u5b58\u5206\u914d\u73b0\u5728\u662f\u57fa\u4e8ejemalloc4\u5b9e\u73b0\u7684\uff0c\u6570\u636e\u7ed3\u6784\u6a21\u578b\u548c\u4e4b\u524d\u7684\u6709\u6240\u533a\u522b\uff0c\u7279\u522b\u662fChunk\u7684\u5206\u914d\u7ba1\u7406\u4e0a\u9762"),(0,l.kt)("li",{parentName:"ul"},"Page, Subpage, PoolSubpage, PoolChunk\u3001ChunkList\u3001Run\uff0c PoolArena\u7b49\u76f8\u5173\u7c7b\u662f\u5b9e\u73b0\u6c60\u5316\u5185\u5b58\u5206\u914d\u7684\u91cd\u8981\u7ec4\u6210"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"PooledByteBufAllocator")),"\u7ee7\u627f\u4e86\u5206\u914d\u7684\u9876\u5c42\u63a5\u53e3 ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"ByteBufAllocator"))," \u6765\u4f5c\u4e3a\u5206\u914d\u5806\u5185\u548c\u5806\u5916\u6c60\u5316\u5185\u5b58\u7684\u5165\u53e3"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"PoolThreadLocalCache"))," \u8d1f\u8d23\u7f13\u5b58\u5206\u914d\u7684\u5185\u5b58\uff0cSmall \u7684\u7f13\u5b58\u961f\u5217\u9ed8\u8ba4\u957f\u5ea6\u4e3a256\uff0cNormal\u7684\u7f13\u5b58\u961f\u5217\u9ed8\u8ba4\u957f\u5ea6\u4e3a64\uff0c\u9ed8\u8ba4\u7684\u6700\u5927\u7f13\u5b58\u5927\u5c0f32K\u3002")))}c.isMDXComponent=!0}}]);