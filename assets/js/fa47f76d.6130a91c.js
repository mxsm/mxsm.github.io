"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[58756],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,u=h["".concat(s,".").concat(m)]||h[m]||d[m]||i;return n?o.createElement(u,r(r({ref:t},c),{},{components:n})):o.createElement(u,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},48234:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(87462),a=(n(67294),n(3905));const i={strip_number_prefixes:!1},r="Adding Mobile",l={unversionedId:"angular/your-first-app/adding-mobile",id:"angular/your-first-app/adding-mobile",isDocsHomePage:!1,title:"Adding Mobile",description:"Our photo gallery app won\u2019t be complete until it runs on iOS, Android, and the web - all using one codebase. All it takes is some small logic changes to support mobile platforms, installing some native tooling, then running the app on a device. Let\u2019s go!",source:"@site/docs/angular/your-first-app/5-adding-mobile.md",sourceDirName:"angular/your-first-app",slug:"/angular/your-first-app/adding-mobile",permalink:"/docs/angular/your-first-app/adding-mobile",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/angular/your-first-app/5-adding-mobile.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{strip_number_prefixes:!1},sidebar:"docs",previous:{title:"Loading Photos",permalink:"/docs/angular/your-first-app/loading-photos"},next:{title:"Deploying Mobile",permalink:"/docs/angular/your-first-app/deploying-mobile"}},s=[{value:"Import Platform API",id:"import-platform-api",children:[],level:2},{value:"Platform-specific Logic",id:"platform-specific-logic",children:[],level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adding-mobile"},"Adding Mobile"),(0,a.kt)("p",null,"Our photo gallery app won\u2019t be complete until it runs on iOS, Android, and the web - all using one codebase. All it takes is some small logic changes to support mobile platforms, installing some native tooling, then running the app on a device. Let\u2019s go!"),(0,a.kt)("h2",{id:"import-platform-api"},"Import Platform API"),(0,a.kt)("p",null,"Let\u2019s start with making some small code changes - then our app will \u201cjust work\u201d when we deploy it to a device."),(0,a.kt)("p",null,"Import the Ionic ",(0,a.kt)("a",{parentName:"p",href:"https://ionicframework.com/docs/angular/platform"},"Platform API")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"photo.service.ts"),", which is used to retrieve information about the current device. In this case, it\u2019s useful for selecting which code to execute based on the platform the app is running on (web or mobile):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Platform } from '@ionic/angular';\n\nexport class PhotoService {\n  public photos: UserPhoto[] = [];\n  private PHOTO_STORAGE: string = 'photos';\n  private platform: Platform;\n\n  constructor(platform: Platform) {\n    this.platform = platform;\n  }\n\n  // other code\n}\n")),(0,a.kt)("h2",{id:"platform-specific-logic"},"Platform-specific Logic"),(0,a.kt)("p",null,"First, we\u2019ll update the photo saving functionality to support mobile. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"readAsBase64()")," function, check which platform the app is running on. If it\u2019s \u201chybrid\u201d (Capacitor or Cordova, two native runtimes), then read the photo file into base64 format using the Filesystem ",(0,a.kt)("inlineCode",{parentName:"p"},"readFile()")," method. Otherwise, use the same logic as before when running the app on the web:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"private async readAsBase64(photo: Photo) {\n  // \"hybrid\" will detect Cordova or Capacitor\n  if (this.platform.is('hybrid')) {\n    // Read the file into base64 format\n    const file = await Filesystem.readFile({\n      path: photo.path\n    });\n\n    return file.data;\n  }\n  else {\n    // Fetch the photo, read as a blob, then convert to base64 format\n    const response = await fetch(photo.webPath);\n    const blob = await response.blob();\n\n    return await this.convertBlobToBase64(blob) as string;\n  }\n}\n")),(0,a.kt)("p",null,"Next, update the ",(0,a.kt)("inlineCode",{parentName:"p"},"savePicture()")," method. When running on mobile, set ",(0,a.kt)("inlineCode",{parentName:"p"},"filepath")," to the result of the ",(0,a.kt)("inlineCode",{parentName:"p"},"writeFile()")," operation - ",(0,a.kt)("inlineCode",{parentName:"p"},"savedFile.uri"),". When setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"webviewPath"),", use the special ",(0,a.kt)("inlineCode",{parentName:"p"},"Capacitor.convertFileSrc()")," method (",(0,a.kt)("a",{parentName:"p",href:"https://ionicframework.com/docs/core-concepts/webview#file-protocol"},"details here"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// Save picture to file on device\n  private async savePicture(photo: Photo) {\n    // Convert photo to base64 format, required by Filesystem API to save\n    const base64Data = await this.readAsBase64(photo);\n\n    // Write the file to the data directory\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (this.platform.is('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  }\n")),(0,a.kt)("p",null,"Next, head back over to the ",(0,a.kt)("inlineCode",{parentName:"p"},"loadSaved()")," function we implemented for the web earlier. On mobile, we can directly set the source of an image tag - ",(0,a.kt)("inlineCode",{parentName:"p"},'<img src="x" />')," - to each photo file on the Filesystem, displaying them automatically. Thus, only the web requires reading each image from the Filesystem into base64 format. Update this function to add an ",(0,a.kt)("em",{parentName:"p"},"if statement")," around the Filesystem code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"public async loadSaved() {\n  // Retrieve cached photo array data\n  const photoList = await Preferences.get({ key: this.PHOTO_STORAGE });\n  this.photos = JSON.parse(photoList.value) || [];\n\n  // Easiest way to detect when running on the web:\n  // \u201cwhen the platform is NOT hybrid, do this\u201d\n  if (!this.platform.is('hybrid')) {\n    // Display the photo by reading into base64 format\n    for (let photo of this.photos) {\n      // Read each saved photo's data from the Filesystem\n      const readFile = await Filesystem.readFile({\n          path: photo.filepath,\n          directory: Directory.Data\n      });\n\n      // Web platform only: Load the photo as base64 data\n      photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Our Photo Gallery now consists of one codebase that runs on the web, Android, and iOS. Next up, the part you\u2019ve been waiting for - deploying the app to a device."))}c.isMDXComponent=!0}}]);