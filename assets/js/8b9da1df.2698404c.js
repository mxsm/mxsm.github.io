"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[2487],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(a),d=r,g=b["".concat(c,".").concat(d)]||b[d]||m[d]||o;return a?t.createElement(g,i(i({ref:n},p),{},{components:a})):t.createElement(g,i({ref:n},p))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[b]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7579:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=a(7462),r=(a(7294),a(3905));const o={title:"doGetBean\u6e90\u7801\u8be6\u89e3",date:new Date("2019-01-25T00:00:00.000Z")},i=void 0,s={unversionedId:"spring/spring-framework/core-source-analysis/doGetBean",id:"spring/spring-framework/core-source-analysis/doGetBean",title:"doGetBean\u6e90\u7801\u8be6\u89e3",description:"1. doGetBean\u65b9\u6cd5\u6e90\u7801\u89e3\u6790",source:"@site/docs/spring/spring-framework/core-source-analysis/doGetBean.md",sourceDirName:"spring/spring-framework/core-source-analysis",slug:"/spring/spring-framework/core-source-analysis/doGetBean",permalink:"/docs/spring/spring-framework/core-source-analysis/doGetBean",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/spring/spring-framework/core-source-analysis/doGetBean.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1678525064,formattedLastUpdatedAt:"Mar 11, 2023",frontMatter:{title:"doGetBean\u6e90\u7801\u8be6\u89e3",date:"2019-01-25T00:00:00.000Z"},sidebar:"springframework",previous:{title:"RootBeanDefinition\u3001ChildBeanDefinition\u3001GenericBeanDefinition\u7684\u533a\u522b",permalink:"/docs/spring/spring-framework/core-source-analysis/beandefinediff"},next:{title:"Spring BeanFactoryPostProcessor\u6267\u884c\u987a\u5e8f",permalink:"/docs/spring/spring-framework/core-source-analysis/spring-BeanFactoryPostProcessor-order"}},c={},l=[{value:"1. doGetBean\u65b9\u6cd5\u6e90\u7801\u89e3\u6790",id:"1-dogetbean\u65b9\u6cd5\u6e90\u7801\u89e3\u6790",level:3},{value:"2. \u65b9\u6cd5\u7684\u6e90\u7801\u89e3\u6790",id:"2-\u65b9\u6cd5\u7684\u6e90\u7801\u89e3\u6790",level:3},{value:"2.1 transformedBeanName",id:"21-transformedbeanname",level:4},{value:"2.2 getSingleton(beanName)",id:"22-getsingletonbeanname",level:4},{value:"2.3 AbstractBeanFactory#getObjectForBeanInstance\u65b9\u6cd5",id:"23-abstractbeanfactorygetobjectforbeaninstance\u65b9\u6cd5",level:4},{value:"2.4  \u521b\u5efa\u5355\u4f8bBean DefaultSingletonBeanRegistry#getSingleton",id:"24--\u521b\u5efa\u5355\u4f8bbean-defaultsingletonbeanregistrygetsingleton",level:4}],p={toc:l},b="wrapper";function m(e){let{components:n,...a}=e;return(0,r.kt)(b,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"1-dogetbean\u65b9\u6cd5\u6e90\u7801\u89e3\u6790"},"1. doGetBean\u65b9\u6cd5\u6e90\u7801\u89e3\u6790"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'protected <T> T doGetBean(final String name, @Nullable final Class<T> requiredType,\n            @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {\n\n        /**\n         * \u901a\u8fc7name\u83b7\u53d6BeanName,\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528name\u4f5c\u4e3abeanName\uff1a\n         * 1. name\u53ef\u80fd\u662f\u522b\u540d\uff0c\u901a\u8fc7\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u5b9e\u4f8b\u540d\u79f0\n         * 2. name\u53ef\u80fd\u4f1a\u4ee5&\u5f00\u5934\uff0c\u8868\u660e\u8c03\u7528\u8005\u60f3\u83b7\u53d6FactoryBean\u672c\u8eab\uff0c\u800c\u975eFactoryBean\u521b\u5efabean\n         *    FactoryBean \u7684\u5b9e\u73b0\u7c7b\u548c\u5176\u4ed6\u7684 bean \u5b58\u50a8\u65b9\u5f0f\u662f\u4e00\u81f4\u7684\uff0c\u5373 <beanName, bean>\uff0c\n         *    beanName \u4e2d\u662f\u6ca1\u6709 & \u8fd9\u4e2a\u5b57\u7b26\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06 name \u7684\u9996\u5b57\u7b26 & \u79fb\u9664\uff0c\u8fd9\u6837\u624d\u80fd\u4ece\n         *    \u7f13\u5b58\u91cc\u53d6\u5230 FactoryBean \u5b9e\u4f8b\u3002\n         *\n         */\n        final String beanName = transformedBeanName(name);\n        Object bean;\n\n        // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6bean\n        Object sharedInstance = getSingleton(beanName);\n\n        /*\n         * \u5982\u679c sharedInstance = null\uff0c\u5219\u8bf4\u660e\u7f13\u5b58\u91cc\u6ca1\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\uff0c\u8868\u660e\u8fd9\u4e2a\u5b9e\u4f8b\u8fd8\u6ca1\u521b\u5efa\u3002\n         *( BeanFactory \u5e76\u4e0d\u4f1a\u5728\u4e00\u5f00\u59cb\u5c31\u5c06\u6240\u6709\u7684\u5355\u4f8b bean \u5b9e\u4f8b\u5316\u597d\uff0c\u800c\u662f\u5728\u8c03\u7528 getBean \u83b7\u53d6bean \u65f6\u518d\u5b9e\u4f8b\u5316\uff0c\u4e5f\u5c31\u662f\u61d2\u52a0\u8f7d)\u3002\n         * getBean \u65b9\u6cd5\u6709\u5f88\u591a\u91cd\u8f7d\uff0c\u6bd4\u5982 getBean(String name, Object... args)\uff0c\u6211\u4eec\u5728\u9996\u6b21\u83b7\u53d6\n         * \u67d0\u4e2a bean \u65f6\uff0c\u53ef\u4ee5\u4f20\u5165\u7528\u4e8e\u521d\u59cb\u5316 bean \u7684\u53c2\u6570\u6570\u7ec4\uff08args\uff09\uff0cBeanFactory \u4f1a\u6839\u636e\u8fd9\u4e9b\u53c2\u6570\n         * \u53bb\u5339\u914d\u5408\u9002\u7684\u6784\u9020\u65b9\u6cd5\u6784\u9020 bean \u5b9e\u4f8b\u3002\u5f53\u7136\uff0c\u5982\u679c\u5355\u4f8b bean \u65e9\u5df2\u521b\u5efa\u597d\uff0c\u8fd9\u91cc\u7684 args \u5c31\u6ca1\u6709\n         * \u7528\u4e86\uff0cBeanFactory \u4e0d\u4f1a\u591a\u6b21\u5b9e\u4f8b\u5316\u5355\u4f8b bean\u3002\n         */\n        if (sharedInstance != null && args == null) {\n            if (logger.isTraceEnabled()) {\n                if (isSingletonCurrentlyInCreation(beanName)) {\n                    logger.trace("Returning eagerly cached instance of singleton bean \'" + beanName +\n                            "\' that is not fully initialized yet - a consequence of a circular reference");\n                }\n                else {\n                    logger.trace("Returning cached instance of singleton bean \'" + beanName + "\'");\n                }\n            }\n\n            /*\n             * \u5982\u679c sharedInstance \u662f\u666e\u901a\u7684\u5355\u4f8b bean\uff0c\u4e0b\u9762\u7684\u65b9\u6cd5\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002\u4f46\u5982\u679c\n             * sharedInstance \u662f FactoryBean \u7c7b\u578b\u7684\uff0c\u5219\u9700\u8c03\u7528 getObject \u5de5\u5382\u65b9\u6cd5\u83b7\u53d6\u771f\u6b63\u7684\n             * bean \u5b9e\u4f8b\u3002\u5982\u679c\u7528\u6237\u60f3\u83b7\u53d6 FactoryBean \u672c\u8eab\uff0c\u8fd9\u91cc\u4e5f\u4e0d\u4f1a\u505a\u7279\u522b\u7684\u5904\u7406\uff0c\u76f4\u63a5\u8fd4\u56de\n             * \u5373\u53ef\u3002\u6bd5\u7adf FactoryBean \u7684\u5b9e\u73b0\u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd bean\uff0c\u53ea\u4e0d\u8fc7\u5177\u6709\u4e00\u70b9\u7279\u6b8a\u7684\u529f\u80fd\u800c\u5df2\u3002\n             */\n            bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n        }\n\n        /*\n         * \u5982\u679c\u4e0a\u9762\u7684\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5219\u8868\u660e sharedInstance \u53ef\u80fd\u4e3a\u7a7a\uff0c\u6b64\u65f6 beanName \u5bf9\u5e94\u7684 bean\n         * \u5b9e\u4f8b\u53ef\u80fd\u8fd8\u672a\u521b\u5efa\u3002\u8fd9\u91cc\u8fd8\u5b58\u5728\u53e6\u4e00\u79cd\u53ef\u80fd\uff0c\u5982\u679c\u5f53\u524d\u5bb9\u5668\u6709\u7236\u5bb9\u5668\uff0cbeanName \u5bf9\u5e94\u7684 bean \u5b9e\u4f8b\n         * \u53ef\u80fd\u662f\u5728\u7236\u5bb9\u5668\u4e2d\u88ab\u521b\u5efa\u4e86\uff0c\u6240\u4ee5\u5728\u521b\u5efa\u5b9e\u4f8b\u524d\uff0c\u9700\u8981\u5148\u53bb\u7236\u5bb9\u5668\u91cc\u68c0\u67e5\u4e00\u4e0b\u3002\n         */\n        else {\n            // BeanFactory \u4e0d\u7f13\u5b58 Prototype \u7c7b\u578b\u7684 bean\uff0c\u65e0\u6cd5\u5904\u7406\u8be5\u7c7b\u578b bean \u7684\u5faa\u73af\u4f9d\u8d56\u95ee\u9898\n            //\u5224\u65ad\u662f\u5426\u5b58\u5728\u5faa\u73af\u4f9d\u8d56\n            if (isPrototypeCurrentlyInCreation(beanName)) {\n                throw new BeanCurrentlyInCreationException(beanName);\n            }\n\n            // \u5982\u679c sharedInstance = null\uff0c\u5219\u5230\u7236\u5bb9\u5668\u4e2d\u67e5\u627e bean \u5b9e\u4f8b\n            BeanFactory parentBeanFactory = getParentBeanFactory();\n            if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n                // Not found -> check parent.\n                String nameToLookup = originalBeanName(name);\n                if (parentBeanFactory instanceof AbstractBeanFactory) {\n                    return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                            nameToLookup, requiredType, args, typeCheckOnly);\n                }\n                else if (args != null) {\n                    // Delegation to parent with explicit args.\n                    return (T) parentBeanFactory.getBean(nameToLookup, args);\n                }\n                else if (requiredType != null) {\n                    // No args -> delegate to standard getBean method.\n                    return parentBeanFactory.getBean(nameToLookup, requiredType);\n                }\n                else {\n                    return (T) parentBeanFactory.getBean(nameToLookup);\n                }\n            }\n\n            if (!typeCheckOnly) {\n                markBeanAsCreated(beanName);\n            }\n\n            try {\n                // \u5408\u5e76\u7236 BeanDefinition \u4e0e\u5b50 BeanDefinition\n                final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n                checkMergedBeanDefinition(mbd, beanName, args);\n\n                // \u68c0\u67e5\u662f\u5426\u6709 dependsOn \u4f9d\u8d56\uff0c\u5982\u679c\u6709\u5219\u5148\u521d\u59cb\u5316\u6240\u4f9d\u8d56\u7684 bean\n                String[] dependsOn = mbd.getDependsOn();\n                if (dependsOn != null) {\n                    for (String dep : dependsOn) {\n\n                        /*\n                         * \u68c0\u6d4b\u662f\u5426\u5b58\u5728 depends-on \u5faa\u73af\u4f9d\u8d56\uff0c\u82e5\u5b58\u5728\u5219\u629b\u5f02\u5e38\u3002\u6bd4\u5982 A \u4f9d\u8d56 B\uff0c\n                         * B \u53c8\u4f9d\u8d56 A\uff0c\u4ed6\u4eec\u7684\u914d\u7f6e\u5982\u4e0b\uff1a\n                         *   <bean id="beanA" class="BeanA" depends-on="beanB">\n                         *   <bean id="beanB" class="BeanB" depends-on="beanA">\n                         *\n                         * beanA \u8981\u6c42 beanB \u5728\u5176\u4e4b\u524d\u88ab\u521b\u5efa\uff0c\u4f46 beanB \u53c8\u8981\u6c42 beanA \u5148\u4e8e\u5b83\n                         * \u521b\u5efa\u3002\u8fd9\u4e2a\u65f6\u5019\u5f62\u6210\u4e86\u5faa\u73af\uff0c\u5bf9\u4e8e depends-on \u5faa\u73af\uff0cSpring \u4f1a\u76f4\u63a5\n                         * \u629b\u51fa\u5f02\u5e38\n                         */\n\n                        if (isDependent(beanName, dep)) {\n                            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                    "Circular depends-on relationship between \'" + beanName + "\' and \'" + dep + "\'");\n                        }\n                        // \u6ce8\u518c\u4f9d\u8d56\u8bb0\u5f55\n                        registerDependentBean(dep, beanName);\n                        try {\n                            // \u52a0\u8f7d depends-on \u4f9d\u8d56\n                            getBean(dep);\n                        }\n                        catch (NoSuchBeanDefinitionException ex) {\n                            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                    "\'" + beanName + "\' depends on missing bean \'" + dep + "\'", ex);\n                        }\n                    }\n                }\n\n                // \u521b\u5efa bean \u5b9e\u4f8b\n                if (mbd.isSingleton()) {\n\n                    /*\n                     * \u8fd9\u91cc\u5e76\u6ca1\u6709\u76f4\u63a5\u8c03\u7528 createBean \u65b9\u6cd5\u521b\u5efa bean \u5b9e\u4f8b\uff0c\u800c\u662f\u901a\u8fc7\n                     * getSingleton(String, ObjectFactory) \u65b9\u6cd5\u83b7\u53d6 bean \u5b9e\u4f8b\u3002\n                     * getSingleton(String, ObjectFactory) \u65b9\u6cd5\u4f1a\u5728\u5185\u90e8\u8c03\u7528\n                     * ObjectFactory \u7684 getObject() \u65b9\u6cd5\u521b\u5efa bean\uff0c\u5e76\u4f1a\u5728\u521b\u5efa\u5b8c\u6210\u540e\uff0c\n                     * \u5c06 bean \u653e\u5165\u7f13\u5b58\u4e2d\u3002\n                     */\n\n                    sharedInstance = getSingleton(beanName, () -> {\n                        try {\n                            return createBean(beanName, mbd, args);\n                        }\n                        catch (BeansException ex) {\n                            // Explicitly remove instance from singleton cache: It might have been put there\n                            // eagerly by the creation process, to allow for circular reference resolution.\n                            // Also remove any beans that received a temporary reference to the bean.\n                            destroySingleton(beanName);\n                            throw ex;\n                        }\n                    });\n                    // \u5982\u679c bean \u662f FactoryBean \u7c7b\u578b\uff0c\u5219\u8c03\u7528\u5de5\u5382\u65b9\u6cd5\u83b7\u53d6\u771f\u6b63\u7684 bean \u5b9e\u4f8b\u3002\u5426\u5219\u76f4\u63a5\u8fd4\u56de bean \u5b9e\u4f8b\n                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n                }\n                // \u521b\u5efa prototype \u7c7b\u578b\u7684 bean \u5b9e\u4f8b\n                else if (mbd.isPrototype()) {\n                    // It\'s a prototype -> create a new instance.\n                    Object prototypeInstance = null;\n                    try {\n                        beforePrototypeCreation(beanName);\n                        prototypeInstance = createBean(beanName, mbd, args);\n                    }\n                    finally {\n                        afterPrototypeCreation(beanName);\n                    }\n                    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n                }\n                // \u521b\u5efa\u5176\u4ed6\u7c7b\u578b\u7684 bean \u5b9e\u4f8b\n                else {\n                    String scopeName = mbd.getScope();\n                    final Scope scope = this.scopes.get(scopeName);\n                    if (scope == null) {\n                        throw new IllegalStateException("No Scope registered for scope name \'" + scopeName + "\'");\n                    }\n                    try {\n                        Object scopedInstance = scope.get(beanName, () -> {\n                            beforePrototypeCreation(beanName);\n                            try {\n                                return createBean(beanName, mbd, args);\n                            }\n                            finally {\n                                afterPrototypeCreation(beanName);\n                            }\n                        });\n                        bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n                    }\n                    catch (IllegalStateException ex) {\n                        throw new BeanCreationException(beanName,\n                                "Scope \'" + scopeName + "\' is not active for the current thread; consider " +\n                                "defining a scoped proxy for this bean if you intend to refer to it from a singleton",\n                                ex);\n                    }\n                }\n            }\n            catch (BeansException ex) {\n                cleanupAfterBeanCreationFailure(beanName);\n                throw ex;\n            }\n        }\n\n        // Check if required type matches the type of the actual bean instance.\n        if (requiredType != null && !requiredType.isInstance(bean)) {\n            try {\n                T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n                if (convertedBean == null) {\n                    throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n                }\n                return convertedBean;\n            }\n            catch (TypeMismatchException ex) {\n                if (logger.isTraceEnabled()) {\n                    logger.trace("Failed to convert bean \'" + name + "\' to required type \'" +\n                            ClassUtils.getQualifiedName(requiredType) + "\'", ex);\n                }\n                throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n            }\n        }\n        return (T) bean;\n    }\n')),(0,r.kt)("p",null,"\u4ece\u6e90\u7801\u5206\u6790\u4e00\u4e0b ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"doGetBean"))," \u7684\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u8f6c\u6362beanName")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u4f20\u5165\u7684name\u53c2\u6570\u53ef\u80fd\u662f\u522b\u540d\uff0c\u4e5f\u53ef\u80fd\u662fFactoryBean\uff0c\u7d22\u5f15\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u7cfb\u5217\u89e3\u6790")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'\u53bb\u9664FactoryBean\u7684\u4fee\u9970\u7b26\uff0c\u4e5f\u5c31\u662f\u5982\u679cname=\u4e5f\u5c31\u662f\u5982\u679cname = "&factoryBean"\uff0c\u90a3\u4e48\u4f1a\u9996\u5148\u53bb\u9664&\u800c\u4f7fname = "factoryBean"'),(0,r.kt)("li",{parentName:"ul"},"\u5c06\u522b\u540dalias\u8f6c\u6362\u4e3a\u6700\u7ec8\u6307\u5411\u7684beanName\uff0c\u6bd4\u5982\u522b\u540dA\u6267\u884c\u540d\u79f0\u4e3aB\u7684bean\uff0c\u800cB\u6ca1\u6709\u6307\u5411\u4efb\u4f55\u5176\u4ed6\u7684bean\uff0c\u5373\u4e3a\u6700\u7ec8\u7684bean\uff0c\u5219\u8fd4\u56deB;\u4f46\u662f\u5982\u679cB\u53c8\u6307\u5411C\uff0c\u800c\u662fC\u662f\u6700\u7ec8\u7684bean\uff0c\u5219\u8fd4\u56deC\u3002"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u5c1d\u8bd5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u539f\u59cb\u5355\u4f8b")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u8fd9\u5c31\u662fSpring\u7684IOC\uff0c\u9996\u5148\u5c1d\u8bd5\u4ece\u7f13\u5b58\u4e2d\u52a0\u8f7d\u5355\u4f8b\u6a21\u5f0f")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("h4",{parentName:"li",id:"\u68c0\u6d4b\u662f\u5426\u4e3afactorybean\u5e76\u83b7\u53d6bean\u4ee5\u53ca\u521d\u59cb\u5316\u540e\u5904\u7406"},"\u68c0\u6d4b\u662f\u5426\u4e3aFactoryBean\u5e76\u83b7\u53d6Bean\u4ee5\u53ca\u521d\u59cb\u5316\u540e\u5904\u7406"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u5728doGetBean\u65b9\u6cd5\u4e2d\u9891\u7e41\u51fa\u73b0getObjectForBeanInstance\u65b9\u6cd5\uff0c\u5b83\u4e3b\u8981\u5b8c\u6210\u5bf9\u83b7\u53d6\u7684Bean Instance\u8fdb\u884c\u68c0\u6d4b\u662f\u5426\u4e3aFactoryBean\uff0c\u5982\u679c\u662fFactoryBean\u5219\u901a\u8fc7\u5de5\u5382\u65b9\u6cd5\u83b7\u53d6Bean\u4ee5\u53ca\u521d\u59cb\u5316\u540e\u5904\u7406"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("h4",{parentName:"li",id:"\u521b\u5efa\u5355\u4f8bbean"},"\u521b\u5efa\u5355\u4f8bBean"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u5355\u4f8bBean\u7684\u7f13\u5b58\uff0c\u5219\u9700\u8981\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u5355\u4f8bBean\uff0c\u8fd9\u4e3b\u8981\u662f\u91cd\u8f7dgetSingleton\u7684\u91cd\u8f7d\u65b9\u6cd5\u6765\u5b9e\u73b0\u5355\u4f8bBean\u7684\u52a0\u8f7d\u3002"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("h4",{parentName:"li",id:"\u539f\u578b\u6a21\u5f0f\u7684\u4f9d\u8d56\u68c0\u67e5"},"\u539f\u578b\u6a21\u5f0f\u7684\u4f9d\u8d56\u68c0\u67e5"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u53ea\u6709\u5355\u4f8b\u6a21\u5f0f\u624d\u4f1a\u5c1d\u8bd5\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\uff0c\u5982\u679c\u5b58\u5728A\u4e2d\u6709B\u7684\u5c5e\u6027\uff0cB\u4e2d\u6709A\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u5f53\u4f9d\u8d56\u6ce8\u5165\u7684\u65f6\u5019\u770b\uff0c\u5c31\u4f1a\u4ea7\u751f\u5f53A\u8fd8\u672a\u521b\u5efa\u5b8c\u7684\u65f6\u5019\u56e0\u4e3a\u5bf9\u4e8eB\u7684\u521b\u5efa\u518d\u6b21\u8fd4\u56de\u521b\u5efaA\uff0c\u9020\u6210\u5faa\u73af\u4f9d\u8d56\uff0c\u4e5f\u5c31\u662f\u60c5\u51b5\uff1aisPrototypeCurrentlyInCreation(beanName)\u5224\u65ad\u4e3atrue"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u5904\u7406 depends-on \u4f9d\u8d56"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u521b\u5efa\u5e76\u7f13\u5b58 bean"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u8c03\u7528 getObjectForBeanInstance \u65b9\u6cd5\uff0c\u5e76\u6309 name \u89c4\u5219\u8fd4\u56de\u76f8\u5e94\u7684 bean \u5b9e\u4f8b"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u6309\u9700\u8f6c\u6362 bean \u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u8f6c\u6362\u540e\u7684 bean \u5b9e\u4f8b")))),(0,r.kt)("h3",{id:"2-\u65b9\u6cd5\u7684\u6e90\u7801\u89e3\u6790"},"2. \u65b9\u6cd5\u7684\u6e90\u7801\u89e3\u6790"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u9010\u6b65\u5206\u6790\u6bcf\u4e00\u4e2a\u65b9\u6cd5"),(0,r.kt)("h4",{id:"21-transformedbeanname"},"2.1 transformedBeanName"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"transformedBeanName(name)")),"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"beanName"))," \u7684\u8f6c\u6362\uff0c\u4e4b\u524d\u5206\u6790\u8fc7\u7531\u4e8e ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"name"))," \u53ef\u80fd\u662f ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"FactoryBean"))," \u6216\u8005\u666e\u901a\u7684 Bean\u7684\u522b\u540d\u6240\u4ee5\u9700\u8981\u8f6c\u6362\u3002"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"name\u53ef\u80fd\u662fFactoryBean\u6216\u8005\u662fbeanName\u7684\u522b\u540d\uff0c\u7528\u5f53\u524d\u8fd9\u4e2a\u65b9\u6cd5\u6765\u8fdb\u884c\u8f6c\u6362\u6210\u771f\u6b63\u7684beanName\u6765\u8fdb\u884c\u540e\u7eed\u7684\u64cd\u4f5c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"protected String transformedBeanName(String name) {\n    //BeanFactoryUtils.transformedBeanName(name)\u5904\u7406 FactoryBean \u7c7b\u578b\n    return canonicalName(BeanFactoryUtils.transformedBeanName(name));\n}\n\n//FactoryBean\u8f6c\u6362\npublic static String transformedBeanName(String name) {\n        //\u5224\u7a7a\n        Assert.notNull(name, \"'name' must not be null\");\n        //\u5224\u65ad\u662f\u5426\u5df2 & \u5f00\u5934\u662f\u5426\u4e3aFactoryBean\n        if (!name.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {\n            return name;\n        }\n        return transformedBeanNameCache.computeIfAbsent(name, beanName -> {\n            do {\n                beanName = beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length());\n            }\n            while (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX));\n            return beanName;\n        });\n}\n\n//\u5c06\u522b\u540d\u5904\u7406\u6210BeanName\npublic String canonicalName(String name) {\n        String canonicalName = name;\n        // Handle aliasing...\n        String resolvedName;\n        do {\n            resolvedName = this.aliasMap.get(canonicalName);\n            if (resolvedName != null) {\n                canonicalName = resolvedName;\n            }\n        }\n        while (resolvedName != null);\n        return canonicalName;\n    }\n\n")),(0,r.kt)("p",null,"\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u6765 ",(0,r.kt)("strong",{parentName:"p"},"transformedBeanName")," \u65b9\u6cd5\u4e3b\u8981\u662f\u7528\u6765\u5904\u7406beanName\u3002"),(0,r.kt)("h4",{id:"22-getsingletonbeanname"},"2.2 getSingleton(beanName)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getSingleton(beanName)"))," \u4e3b\u8981\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6bean\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public Object getSingleton(String beanName) {\n        return getSingleton(beanName, true);\n}\n\n    protected Object getSingleton(String beanName, boolean allowEarlyReference) {\n        //\u4ece\u7f13\u5b58Map\u4e2d\u83b7\u53d6\n        Object singletonObject = this.singletonObjects.get(beanName);\n        if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n            synchronized (this.singletonObjects) {\n                //\u4eceearlySingletonObjects\u83b7\u53d6bean\n                singletonObject = this.earlySingletonObjects.get(beanName);\n                if (singletonObject == null && allowEarlyReference) {\n                    ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n                    if (singletonFactory != null) {\n                        singletonObject = singletonFactory.getObject();\n                        this.earlySingletonObjects.put(beanName, singletonObject);\n                        this.singletonFactories.remove(beanName);\n                    }\n                }\n            }\n        }\n        return singletonObject;\n    }\n")),(0,r.kt)("h4",{id:"23-abstractbeanfactorygetobjectforbeaninstance\u65b9\u6cd5"},"2.3 AbstractBeanFactory#getObjectForBeanInstance\u65b9\u6cd5"),(0,r.kt)("p",null,"\u901a\u8fc7\u7ed9\u5b9a\u7684bean\u5b9e\u4f8b\u83b7\u53d6\u5bf9\u8c61\uff0c\u8fd4\u56de\u7684bean\u4e3a\u81ea\u5df1\u6216\u8005\u662fFactoryBean\u521b\u5efa\u7684\u5bf9\u8c61\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    protected Object getObjectForBeanInstance(\n            Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd) {\n\n        //\u5224\u65adname\u662f\u5426\u4e3aBean FactoryBean\u7684\u5f15\u7528\n        if (BeanFactoryUtils.isFactoryDereference(name)) {\n            if (beanInstance instanceof NullBean) {\n                return beanInstance;\n            }\n            if (!(beanInstance instanceof FactoryBean)) {\n                throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n            }\n        }\n\n        //\u73b0\u5728beanInstance\u53ef\u80fd\u662f\u666e\u901a\u7684bena\u6216\u8005FactoryBean\uff0c\u5982\u679c\u662f\u666e\u901a\u7684Bean\u76f4\u63a5\u8fd4\u56de\u5b9e\u4f8b\n        if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {\n            return beanInstance;\n        }\n\n        //\u5982\u679c\u662fFactoryBean\uff0c\u4f7f\u7528FactoryBean\u6765\u521b\u5efa\u4e00\u4e2abean\u5b9e\u4f8b\n        Object object = null;\n        if (mbd == null) {\n            object = getCachedObjectForFactoryBean(beanName);\n        }\n        if (object == null) {\n            // Return bean instance from factory.\n            FactoryBean<?> factory = (FactoryBean<?>) beanInstance;\n            // Caches object obtained from FactoryBean if it is a singleton.\n            if (mbd == null && containsBeanDefinition(beanName)) {\n                mbd = getMergedLocalBeanDefinition(beanName);\n            }\n            boolean synthetic = (mbd != null && mbd.isSynthetic());\n            //\u8fd9\u91cc\u4eceFactoryBean\u4e2d\u83b7\u53d6\u521b\u5efa\u7684Bean\n            object = getObjectFromFactoryBean(factory, beanName, !synthetic);\n        }\n        return object;\n    }\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"FactoryBean\u521b\u5efa\u7684Bean\u7684\u540d\u79f0FactoryBean\u672c\u8eab\u4f5c\u4e3a\u4e00\u4e2aBean\u5728Spring\u5bb9\u5668\u4e2d\u662f\u7528\u662f\u5426\u5305\u542b ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"&"))," \u524d\u7f00\u6765\u533a\u5206\u7684\u3002")),(0,r.kt)("h4",{id:"24--\u521b\u5efa\u5355\u4f8bbean-defaultsingletonbeanregistrygetsingleton"},"2.4  \u521b\u5efa\u5355\u4f8bBean DefaultSingletonBeanRegistry#getSingleton"),(0,r.kt)("p",null,"\u5728bean\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u901a\u8fc7\u5224\u65ad ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"scope"))," \u6765\u5224\u65ad\u521b\u5efa\u7684Bean\u7684\u7c7b\u578b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"                if (mbd.isSingleton()) {\n                    //\u521b\u5efa\u5355\u4f8b\n                    sharedInstance = getSingleton(beanName, () -> {\n                        try {\n                            return createBean(beanName, mbd, args);\n                        }\n                        catch (BeansException ex) {\n                            destroySingleton(beanName);\n                            throw ex;\n                        }\n                    });\n                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n                }\n")),(0,r.kt)("p",null,"\u901a\u8fc7\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u4e3b\u8981\u662f\u901a\u8fc7\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"DefaultSingletonBeanRegistry#getSingleton"))," \u6765\u521b\u5efaBean"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'        public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {\n        Assert.notNull(beanName, "Bean name must not be null");\n        synchronized (this.singletonObjects) {\n            //\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6Bean\n            Object singletonObject = this.singletonObjects.get(beanName);\n            if (singletonObject == null) {\n\n                beforeSingletonCreation(beanName);\n                boolean newSingleton = false;\n                boolean recordSuppressedExceptions = (this.suppressedExceptions == null);\n                if (recordSuppressedExceptions) {\n                    this.suppressedExceptions = new LinkedHashSet<>();\n                }\n                try {\n                    //\u521b\u5efaBean\n                    singletonObject = singletonFactory.getObject();\n                    newSingleton = true;\n                }\n                catch (IllegalStateException ex) {\n                    //\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\n                    singletonObject = this.singletonObjects.get(beanName);\n                    if (singletonObject == null) {\n                        throw ex;\n                    }\n                }\n                catch (BeanCreationException ex) {\n                    if (recordSuppressedExceptions) {\n                        for (Exception suppressedException : this.suppressedExceptions) {\n                            ex.addRelatedCause(suppressedException);\n                        }\n                    }\n                    throw ex;\n                }\n                finally {\n                    if (recordSuppressedExceptions) {\n                        this.suppressedExceptions = null;\n                    }\n                    afterSingletonCreation(beanName);\n                }\n                if (newSingleton) {\n                    addSingleton(beanName, singletonObject);\n                }\n            }\n            return singletonObject;\n        }\n    }\n')),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u4e3b\u8981\u4e00\u884c\u4ee3\u7801 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"singletonObject = singletonFactory.getObject();"))," \u6765\u83b7\u53d6\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u4e2d\u6267\u884c\u7684 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"createBean(beanName, mbd, args)")),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"sharedInstance = getSingleton(beanName, () -> {\n                        try {\n                            //\u8fd9\u91cc\u624d\u662f\u771f\u6b63\u7684\u8c03\u7528\u521b\u5efaBean\n                            return createBean(beanName, mbd, args);\n                        }\n                        catch (BeansException ex) {\n                            destroySingleton(beanName);\n                            throw ex;\n                        }\n                    });\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"createbean"))," \u662f ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"AbstractBeanFactory"))," \u7c7b\u7684\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5b9e\u73b0\u770b\u5177\u4f53\u7684\u5b50\u7c7b\u3002 \u62bd\u8c61\u5b50\u7c7b ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"AbstractAutowireCapableBeanFactory"))," \u5bf9  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"createBean"))," \u65b9\u6cd5\u8fdb\u884c\u4e86\u5b9e\u73b0\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n            throws BeanCreationException {\n\n\n        RootBeanDefinition mbdToUse = mbd;\n\n        //\u786e\u5b9a\u5e76\u52a0\u8f7dbean\u7684class\n        Class<?> resolvedClass = resolveBeanClass(mbd, beanName);\n        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n            mbdToUse = new RootBeanDefinition(mbd);\n            mbdToUse.setBeanClass(resolvedClass);\n        }\n\n        // \u51c6\u5907\u9700\u8981\u7684\u65b9\u6cd5\n        try {\n            mbdToUse.prepareMethodOverrides();\n        }\n        catch (BeanDefinitionValidationException ex) {\n            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n                    beanName, "Validation of method overrides failed", ex);\n        }\n\n        try {\n            // \u7ed9InstantiationAwareBeanPostProcessor\u8fd4\u56de\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u800c\u4e0d\u662f\u771f\u6b63\u7684\u5bf9\u8c61\n            // \u8fd9\u91cc\u4e3b\u8981\u5904\u7406\u7684InstantiationAwareBeanPostProcessor\uff0c\u5904\u7406\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\n            Object bean = resolveBeforeInstantiation(beanName, mbdToUse);\n            if (bean != null) {\n                return bean;\n            }\n        }\n        catch (Throwable ex) {\n            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n                    "BeanPostProcessor before instantiation of bean failed", ex);\n        }\n\n        try {\n            //\u521b\u5efa\u771f\u6b63\u7684bean\n            Object beanInstance = doCreateBean(beanName, mbdToUse, args);\n\n            return beanInstance;\n        }\n        catch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n            throw ex;\n        }\n        catch (Throwable ex) {\n            throw new BeanCreationException(\n                    mbdToUse.getResourceDescription(), beanName, "Unexpected exception during bean creation", ex);\n        }\n    }\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Object bean = resolveBeforeInstantiation(beanName, mbdToUse) \u4e0a\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u662f\u9700\u8981\u5173\u6ce8\u7684\uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u6765\u5904\u7406\u5b9e\u73b0\u4e86InstantiationAwareBeanPostProcessor\u63a5\u53e3\u7684\u7c7b"))),(0,r.kt)("p",null,"\u5728\u5bf9\u4e8e\u4e0d\u662f\u5b9e\u73b0\u4ee3\u7406\u7c7b\u4f3c\u901a\u8fc7\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"doCreateBean"))," \u65b9\u6cd5\u6765\u521b\u5efa\u5bf9\u8c61\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n            throws BeanCreationException {\n\n        // \u5b9e\u4f8b\u5316 bean.\n        BeanWrapper instanceWrapper = null;\n        if (mbd.isSingleton()) {\n            instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n        }\n        if (instanceWrapper == null) {\n            instanceWrapper = createBeanInstance(beanName, mbd, args);\n        }\n        final Object bean = instanceWrapper.getWrappedInstance();\n        Class<?> beanType = instanceWrapper.getWrappedClass();\n        if (beanType != NullBean.class) {\n            mbd.resolvedTargetType = beanType;\n        }\n\n        // \u4e0b\u9762\u5f00\u59cb\u5904\u7406 Bean\u5b9e\u73b0\u7684 BeanPostProcessor\n        synchronized (mbd.postProcessingLock) {\n            if (!mbd.postProcessed) {\n                try {\n                    //\u5904\u7406\u5b9e\u73b0\u4e86MergedBeanDefinitionPostProcessor\u63a5\u53e3\u7684\n                    applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n                }\n                catch (Throwable ex) {\n                    throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                            "Post-processing of merged bean definition failed", ex);\n                }\n                mbd.postProcessed = true;\n            }\n        }\n\n        //\u5faa\u73af\u5f15\u7528\u7684\u5904\u7406\n        boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n                isSingletonCurrentlyInCreation(beanName));\n        if (earlySingletonExposure) {\n            addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n        }\n\n        // \u521d\u59cb\u5316Bean\n        Object exposedObject = bean;\n        try {\n            //\u5904\u7406InstantiationAwareBeanPostProcessor\u7684postProcessAfterInstantiation\n            populateBean(beanName, mbd, instanceWrapper);\n            //\u521d\u59cb\u5316Bean -- \u5305\u542b\u5904\u7406 BeanPostProcessor\u7684\u5b9e\u73b0\u4ee5\u53cainit\u65b9\u6cd5\n            exposedObject = initializeBean(beanName, exposedObject, mbd);\n        }\n        catch (Throwable ex) {\n            if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n                throw (BeanCreationException) ex;\n            }\n            else {\n                throw new BeanCreationException(\n                        mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);\n            }\n        }\n\n        if (earlySingletonExposure) {\n            Object earlySingletonReference = getSingleton(beanName, false);\n            if (earlySingletonReference != null) {\n                if (exposedObject == bean) {\n                    exposedObject = earlySingletonReference;\n                }\n                else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n                    String[] dependentBeans = getDependentBeans(beanName);\n                    Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n                    for (String dependentBean : dependentBeans) {\n                        if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n                            actualDependentBeans.add(dependentBean);\n                        }\n                    }\n                    if (!actualDependentBeans.isEmpty()) {\n                        throw new BeanCurrentlyInCreationException(beanName,\n                                "Bean with name \'" + beanName + "\' has been injected into other beans [" +\n                                StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n                                "] in its raw version as part of a circular reference, but has eventually been " +\n                                "wrapped. This means that said other beans do not use the final version of the " +\n                                "bean. This is often the result of over-eager type matching - consider using " +\n                                "\'getBeanNamesOfType\' with the \'allowEagerInit\' flag turned off, for example.");\n                    }\n                }\n            }\n        }\n\n        // \u5904\u7406\u5b9e\u73b0\u4e86DisposableBean\u63a5\u53e3\u7684bean\n        try {\n            registerDisposableBeanIfNecessary(beanName, bean, mbd);\n        }\n        catch (BeanDefinitionValidationException ex) {\n            throw new BeanCreationException(\n                    mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);\n        }\n\n        return exposedObject;\n    }\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"exposedObject = initializeBean(beanName, exposedObject, mbd)"))," \u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u6267\u884c\u4e86\u6211\u4eec\u5b9e\u73b0\u7684 BeanPostProcessor\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"BeanPostProcessor\u7684Bean\u88ab\u5355\u72ec\u4fdd\u5b58\u5bf9\u8c61\u7684\u79c1\u6709\u53d8\u91cf")))}m.isMDXComponent=!0}}]);