"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[3030],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>f});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=t.createContext({}),s=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(i.Provider,{value:n},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=s(a),c=l,f=h["".concat(i,".").concat(c)]||h[c]||u[c]||r;return a?t.createElement(f,p(p({ref:n},d),{},{components:a})):t.createElement(f,p({ref:n},d))}));function f(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,p=new Array(r);p[0]=c;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[h]="string"==typeof e?e:l,p[1]=o;for(var s=2;s<r;s++)p[s]=a[s];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1395:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var t=a(7462),l=(a(7294),a(3905));const r={title:"HashMap\u6e90\u7801\u89e3\u6790",likeTitle:"HashMap\u6e90\u7801\u89e3\u6790",date:new Date("2018-11-10T00:00:00.000Z")},p=void 0,o={unversionedId:"java/java-se/jdksourcereading/map/HashMap",id:"java/java-se/jdksourcereading/map/HashMap",title:"HashMap\u6e90\u7801\u89e3\u6790",description:"1. \u54c8\u5e0c\u7b97\u6cd5",source:"@site/docs/java/java-se/jdksourcereading/map/HashMap.md",sourceDirName:"java/java-se/jdksourcereading/map",slug:"/java/java-se/jdksourcereading/map/HashMap",permalink:"/docs/java/java-se/jdksourcereading/map/HashMap",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/java/java-se/jdksourcereading/map/HashMap.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1678285899,formattedLastUpdatedAt:"Mar 8, 2023",frontMatter:{title:"HashMap\u6e90\u7801\u89e3\u6790",likeTitle:"HashMap\u6e90\u7801\u89e3\u6790",date:"2018-11-10T00:00:00.000Z"},sidebar:"javase",previous:{title:"HashMap\u548cHashTable\u7684\u533a\u522b",permalink:"/docs/java/java-se/jdksourcereading/map/HashMap-HashTable-diff"},next:{title:"String StringBuffer StringBuilder",permalink:"/docs/java/java-se/others/String StringBuffer StringBuilder"}},i={},s=[{value:"1. \u54c8\u5e0c\u7b97\u6cd5",id:"1-\u54c8\u5e0c\u7b97\u6cd5",level:3},{value:"2. HashMap\u7684\u54c8\u5e0c\u51b2\u7a81",id:"2-hashmap\u7684\u54c8\u5e0c\u51b2\u7a81",level:3},{value:"2.1 HashMap\u89e3\u51b3\u51b2\u7a81\u65b9\u5f0f",id:"21-hashmap\u89e3\u51b3\u51b2\u7a81\u65b9\u5f0f",level:4},{value:"2.2 \u7531\u94fe\u8868\u6539\u8fdb\u4e3a\u7ea2\u9ed1\u6811\u7684\u597d\u5904",id:"22-\u7531\u94fe\u8868\u6539\u8fdb\u4e3a\u7ea2\u9ed1\u6811\u7684\u597d\u5904",level:4},{value:"2.3 \u54c8\u5e0c\u78b0\u649e\u653b\u51fb\u539f\u7406",id:"23-\u54c8\u5e0c\u78b0\u649e\u653b\u51fb\u539f\u7406",level:4},{value:"3. jdk1.8\u548cJDK 1.8 \u4ee5\u524d HashMap\u5bf9\u6bd4",id:"3-jdk18\u548cjdk-18-\u4ee5\u524d-hashmap\u5bf9\u6bd4",level:3},{value:"4. JDK8 HashMap",id:"4-jdk8-hashmap",level:3}],d={toc:s},h="wrapper";function u(e){let{components:n,...a}=e;return(0,l.kt)(h,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"1-\u54c8\u5e0c\u7b97\u6cd5"},"1. \u54c8\u5e0c\u7b97\u6cd5"),(0,l.kt)("p",null,"hash\u662f\u5177\u6709\u552f\u4e00\u6027\u4e14\u4e0d\u53ef\u9006\u7684\uff0c\u552f\u4e00\u6027\u6307\u7684\u662f\u76f8\u540c\u7684\u8f93\u5165\u4ea7\u751f\u7684hash code\u6c38\u8fdc\u662f\u4e00\u6837\u7684\uff0c\u800c\u4e0d\u53ef\u9006\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u6570\u636e\u6458\u8981\u7b97\u6cd5\u5e76\u4e0d\u662f\u538b\u7f29\u7b97\u6cd5\uff0c\u5b83\u53ea\u662f\u751f\u6210\u4e86\u4e00\u4e2a\u8be5\u6570\u636e\u7684\u6458\u8981\uff0c\u6ca1\u6709\u5c06\u6570\u636e\u8fdb\u884c\u538b\u7f29\u3002\u538b\u7f29\u7b97\u6cd5\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u4e00\u79cd\u66f4\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\u89c4\u5219\u5c06\u6570\u636e\u91cd\u65b0\u7f16\u7801\uff0c\u89e3\u538b\u7f29\u53ea\u9700\u8981\u6309\u7740\u7f16\u7801\u89c4\u5219\u89e3\u7801\u5c31\u662f\u4e86\uff0c\u8bd5\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\u51e0\u767eMB\u751a\u81f3\u51e0GB\u7684\u6570\u636e\u751f\u6210\u7684hash code\u90fd\u53ea\u662f\u4e00\u4e2a\u62e5\u6709\u56fa\u5b9a\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u5982\u679c\u518d\u80fd\u9006\u5411\u89e3\u538b\u7f29\uff0c\u90a3\u4e48\u5176\u4ed6\u538b\u7f29\u7b97\u6cd5\u8be5\u60c5\u4f55\u4ee5\u582a\uff1f"),(0,l.kt)("p",null,"\u6211\u4eec\u4e0a\u8ff0\u8ba8\u8bba\u7684\u4ec5\u4ec5\u662f\u5728\u5bc6\u7801\u5b66\u4e2d\u7684hash\u7b97\u6cd5\uff0c\u800c\u5728\u6563\u5217\u8868\u4e2d\u6240\u9700\u8981\u7684\u6563\u5217\u51fd\u6570\u662f\u8981\u80fd\u591f\u5c06key\u5bfb\u5740\u5230buckets\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6563\u5217\u51fd\u6570\u7684\u5b9e\u73b0\u5f71\u54cd\u5230\u6574\u4e2a\u6563\u5217\u8868\u7684\u6027\u80fd\u3002"),(0,l.kt)("p",null,"\u4e00\u4e2a\u5b8c\u7f8e\u7684\u6563\u5217\u51fd\u6570\u8981\u80fd\u591f\u505a\u5230\u5747\u5300\u5730\u5c06key\u5206\u5e03\u5230buckets\u4e2d\uff0c\u6bcf\u4e00\u4e2akey\u5206\u914d\u5230\u4e00\u4e2abucket\uff0c\u4f46\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u867d\u7136hash\u7b97\u6cd5\u5177\u6709\u552f\u4e00\u6027\uff0c\u4f46\u540c\u65f6\u5b83\u8fd8\u5177\u6709\u91cd\u590d\u6027\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u552f\u4e00\u6027\u4fdd\u8bc1\u4e86\u76f8\u540c\u8f93\u5165\u7684\u8f93\u51fa\u662f\u4e00\u81f4\u7684\uff0c\u5374\u6ca1\u6709\u4fdd\u8bc1\u4e0d\u540c\u8f93\u5165\u7684\u8f93\u51fa\u662f\u4e0d\u4e00\u81f4\u7684"),"\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u5b8c\u5168\u6709\u53ef\u80fd\u4e24\u4e2a\u4e0d\u540c\u7684key\u88ab\u5206\u914d\u5230\u4e86\u540c\u4e00\u4e2abucket\uff08\u56e0\u4e3a\u5b83\u4eec\u7684hash code\u53ef\u80fd\u662f\u76f8\u540c\u7684\uff09\uff0c\u8fd9\u53eb\u505a\u78b0\u649e\u51b2\u7a81"),"\u3002\u603b\u4e4b\uff0c\u7406\u60f3\u5f88\u4e30\u6ee1\uff0c\u73b0\u5b9e\u5f88\u9aa8\u611f\uff0c\u6563\u5217\u51fd\u6570\u53ea\u80fd\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u51b2\u7a81\uff0c\u6ca1\u6709\u529e\u6cd5\u5b8c\u5168\u6d88\u9664\u51b2\u7a81\u3002"),(0,l.kt)("h3",{id:"2-hashmap\u7684\u54c8\u5e0c\u51b2\u7a81"},"2. HashMap\u7684\u54c8\u5e0c\u51b2\u7a81"),(0,l.kt)("p",null,"HashMap\u4e2d\u8c03\u7528hashCode()\u65b9\u6cd5\u6765\u8ba1\u7b97hashCode\u3002\n\u7531\u4e8e\u5728Java\u4e2d\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u53ef\u80fd\u6709\u4e00\u6837\u7684hashCode,\u6240\u4ee5\u4e0d\u540c\u7684\u952e\u53ef\u80fd\u6709\u4e00\u6837hashCode\uff0c\u4ece\u800c\u5bfc\u81f4\u51b2\u7a81\u7684\u4ea7\u751f\u3002"),(0,l.kt)("h4",{id:"21-hashmap\u89e3\u51b3\u51b2\u7a81\u65b9\u5f0f"},"2.1 HashMap\u89e3\u51b3\u51b2\u7a81\u65b9\u5f0f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"HashMap\u5728\u5904\u7406\u51b2\u7a81\u65f6\u4f7f\u7528\u94fe\u8868\u5b58\u50a8\u76f8\u540c\u7d22\u5f15(\u6876)\u7684\u5143\u7d20"),(0,l.kt)("li",{parentName:"ul"},"\u4eceJava 8\u5f00\u59cb\uff0cHashMap\uff0cConcurrentHashMap\u548cLinkedHashMap\u5728\u5904\u7406\u9891\u7e41\u51b2\u7a81\u65f6\u5c06\u4f7f\u7528\u5e73\u8861\u6811\u6765\u4ee3\u66ff\u94fe\u8868\uff0c\u5f53\u540c\u4e00hash\u6876\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u8d85\u8fc7\u7279\u5b9a\u7684\u503c\u4fbf\u4f1a\u7531\u94fe\u8868\u5207\u6362\u5230\u5e73\u8861\u6811\uff0c\u8fd9\u4f1a\u5c06get()\u65b9\u6cd5\u7684\u6027\u80fd\u4eceO(n)\u63d0\u9ad8\u5230O(logn)"),(0,l.kt)("li",{parentName:"ul"},"\u5f53\u4ece\u94fe\u8868\u5207\u6362\u5230\u5e73\u8861\u6811\u65f6\uff0cHashMap\u8fed\u4ee3\u7684\u987a\u5e8f\u5c06\u4f1a\u6539\u53d8\u3002\u4e0d\u8fc7\u8fd9\u5e76\u4e0d\u4f1a\u9020\u6210\u4ec0\u4e48\u95ee\u9898\uff0c\u56e0\u4e3aHashMap\u5e76\u6ca1\u6709\u5bf9\u8fed\u4ee3\u7684\u987a\u5e8f\u63d0\u4f9b\u4efb\u4f55\u4fdd\u8bc1"),(0,l.kt)("li",{parentName:"ul"},"\u4f7f\u7528HashMap\u4e4b\u6240\u4ee5\u4f1a\u4ea7\u751f\u51b2\u7a81\u662f\u56e0\u4e3a\u4f7f\u7528\u4e86\u952e\u5bf9\u8c61\u7684hashCode()\u65b9\u6cd5\uff0c\u800cequals()\u548chashCode()\u65b9\u6cd5\u4e0d\u4fdd\u8bc1\u4e0d\u540c\u5bf9\u8c61\u7684hashCode\u662f\u4e0d\u540c\u7684\u3002\u9700\u8981\u8bb0\u4f4f\u7684\u662f\uff0c",(0,l.kt)("strong",{parentName:"li"},"\u76f8\u540c\u5bf9\u8c61\u7684hashCode\u4e00\u5b9a\u662f\u76f8\u540c\u7684\uff0c\u4f46\u76f8\u540c\u7684hashCode\u4e0d\u4e00\u5b9a\u662f\u76f8\u540c\u7684\u5bf9\u8c61"),"  ")),(0,l.kt)("p",null,"\u4ee5\u4e0a\u5c31\u662fJava\u4e2dHashMap\u5982\u4f55\u5904\u7406\u51b2\u7a81\u3002\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a\u94fe\u5730\u5740\u6cd5\uff0c\u56e0\u4e3a\u4f7f\u7528\u94fe\u8868\u5b58\u50a8\u540c\u4e00\u6876\u5185\u7684\u5143\u7d20\u3002\u901a\u5e38\u60c5\u51b5HashMap\uff0cHashSet\uff0cLinkedHashSet\uff0cLinkedHashMap\uff0cConcurrentHashMap\uff0cHashTable\uff0cIdentityHashMap\u548cWeakHashMap\u5747\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u5904\u7406\u51b2\u7a81\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u4eceJDK 8\u5f00\u59cb\uff0cHashMap\uff0cLinkedHashMap\u548cConcurrentHashMap\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\uff0c\u5728\u9891\u7e41\u51b2\u7a81\u7684\u65f6\u5019\u4f7f\u7528\u5e73\u8861\u6811\u6765\u66ff\u4ee3\u94fe\u8868\u3002\u56e0\u4e3aHashSet\u5185\u90e8\u4f7f\u7528\u4e86HashMap\uff0cLinkedHashSet\u5185\u90e8\u4f7f\u7528\u4e86LinkedHashMap\uff0c\u6240\u4ee5\u4ed6\u4eec\u7684\u6027\u80fd\u4e5f\u4f1a\u5f97\u5230\u63d0\u5347\u3002"),(0,l.kt)("p",null,"\u5728Java 8 \u4e4b\u524d\uff0c \u5982\u679c\u53d1\u751f\u78b0\u649e\u5f80\u5f80\u662f\u5c06\u8be5value\u76f4\u63a5\u94fe\u63a5\u5230\u8be5\u4f4d\u7f6e\u7684\u5176\u4ed6\u6240\u6709value\u7684\u672b\u5c3e\uff0c\u5373\u76f8\u4e92\u78b0\u649e\u7684\u6240\u6709value\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\u3002\u56e0\u6b64\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0cHashMap\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u9000\u5316\u5230O\uff08n\uff09.\u4f46\u662f\u5728Java 8 \u4e2d\uff0c\u8be5\u78b0\u649e\u540e\u7684\u5904\u7406\u8fdb\u884c\u4e86\u6539\u8fdb\u3002\u5f53\u4e00\u4e2a\u4f4d\u7f6e\u6240\u5728\u7684\u51b2\u7a81\u8fc7\u591a\u65f6\uff0c\u5b58\u50a8\u7684value\u5c06\u5f62\u6210\u4e00\u4e2a\u6392\u5e8f\u4e8c\u53c9\u6811\uff0c\u6392\u5e8f\u4f9d\u636e\u4e3akey\u7684hashcode\u3002\u5219\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0cHashMap\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4eceO\uff081\uff09\u9000\u5316\u5230O\uff08logn\uff09\u3002"),(0,l.kt)("h4",{id:"22-\u7531\u94fe\u8868\u6539\u8fdb\u4e3a\u7ea2\u9ed1\u6811\u7684\u597d\u5904"},"2.2 \u7531\u94fe\u8868\u6539\u8fdb\u4e3a\u7ea2\u9ed1\u6811\u7684\u597d\u5904"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u6700\u574f\u7684\u60c5\u51b5\u7684\u65f6\u95f4\u5f00\u9500\u7531O\uff08n\uff09\u964d\u5230\u4e86O\uff08logn\uff09"),(0,l.kt)("li",{parentName:"ol"},"\u6539\u5584\u54c8\u5e0c\u78b0\u649e\u653b\u51fb")),(0,l.kt)("h4",{id:"23-\u54c8\u5e0c\u78b0\u649e\u653b\u51fb\u539f\u7406"},"2.3 \u54c8\u5e0c\u78b0\u649e\u653b\u51fb\u539f\u7406"),(0,l.kt)("p",null,"\u54c8\u5e0c\u8868\u7684\u539f\u7406\u662f\u7528\u6570\u7ec4\u6765\u4fdd\u5b58\u952e\u503c\u5bf9\uff0c\u952e\u503c\u5bf9\u5b58\u653e\u7684\u4f4d\u7f6e\uff08\u4e0b\u6807\uff09\u7531\u952e\u7684\u54c8\u5e0c\u503c\u51b3\u5b9a\uff0c\u952e\u7684\u54c8\u5e0c\u503c\u53ef\u4ee5\u5728\u53c2\u6570\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u6765\uff0c\u8fd9\u6837\u54c8\u5e0c\u8868\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u4f46\u662f\u8fd9\u662f\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u771f\u5b9e\u7684\u60c5\u51b5\u662f\uff0c\u952e\u7684\u54c8\u5e0c\u503c\u5b58\u5728\u51b2\u7a81\u78b0\u649e\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u952e\u7684\u54c8\u5e0c\u503c\u53ef\u80fd\u76f8\u7b49\uff0c\u4e00\u4e2a\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u5e94\u8be5\u662f\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u78b0\u649e\u3002\u89e3\u51b3\u51b2\u7a81\u78b0\u649e\u7684\u65b9\u6cd5\u6709\u5206\u4e3a\u4e24\u79cd\uff1a\u5f00\u653e\u5730\u5740\u6cd5\u548c \u94fe\u63a5\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u5177\u4f53\u5c55\u5f00\u3002\u54c8\u5e0c\u8868\u4e00\u822c\u90fd\u91c7\u7528\u94fe\u63a5\u6cd5\u6765\u89e3\u51b3\u51b2\u7a81\u78b0\u649e\uff0c\u4e5f\u5c31\u662f\u7528\u4e00\u4e2a\u94fe\u8868\u6765\u5c06\u5206\u914d\u5230\u540c\u4e00\u4e2a\u6876\uff08\u952e\u7684\u54c8\u5e0c\u503c\u4e00\u6837\uff09\u7684\u952e\u503c\u5bf9\u4fdd\u5b58\u8d77\u6765\u3002"),(0,l.kt)("p",null,"\u6240\u8c13\u7684\u54c8\u5e0c\u78b0\u649e\u653b\u51fb\u5c31\u662f\uff0c\u9488\u5bf9\u54c8\u5e0c\u51fd\u6570\u7684\u7279\u6027\uff0c\u7cbe\u5fc3\u6784\u9020\u6570\u636e\uff0c\u4f7f\u6240\u6709\u6570\u636e\u7684\u54c8\u5e0c\u503c\u76f8\u540c\uff0c\u5f53\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u54c8\u5e0c\u8868\u5c31\u4f1a\u9000\u5316\u4e3a\u5355\u94fe\u8868\uff0c\u54c8\u5e0c\u8868\u7684\u5404\u79cd\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u5347\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u56e0\u6b64\u4f1a\u6d88\u8017\u5927\u91cfCPU\u8d44\u6e90\uff0c\u5bfc\u81f4\u7cfb\u7edf\u65e0\u6cd5\u5feb\u901f\u54cd\u5e94\u8bf7\u6c42\uff0c\u4ece\u800c\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08Dos\uff09\u7684\u76ee\u7684\u3002"),(0,l.kt)("h3",{id:"3-jdk18\u548cjdk-18-\u4ee5\u524d-hashmap\u5bf9\u6bd4"},"3. jdk1.8\u548cJDK 1.8 \u4ee5\u524d HashMap\u5bf9\u6bd4"),(0,l.kt)("p",null,"HashMap\u4e4b\u524d\u5b9e\u73b0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u65b9\u5f0f\uff1a\u6570\u7ec4+\u94fe\u8868\n\u7f3a\u70b9\uff1a\u54c8\u5e0c\u51fd\u6570\u53d6\u5f97\u518d\u597d\uff0c\u4e5f\u5f88\u96be\u8fbe\u5230\u5143\u7d20\u767e\u5206\u767e\u5747\u5300\u5206\u5e03\u3002\u5f53 HashMap \u4e2d\u6709\u5927\u91cf\u7684\u5143\u7d20\u90fd\u5b58\u653e\u5230\u540c\u4e00\u4e2a\u6876\u4e2d\u65f6\uff0c\n\u8fd9\u4e2a\u6876\u4e0b\u6709\u4e00\u6761\u957f\u957f\u7684\u94fe\u8868\uff0c\u8fd9\u4e2a\u65f6\u5019 HashMap \u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5047\u5982\u5355\u94fe\u8868\u6709 n\n\u4e2a\u5143\u7d20\uff0c\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\uff0c\u5b8c\u5168\u5931\u53bb\u4e86\u5b83\u7684\u4f18\u52bf\n")),(0,l.kt)("p",null,"\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0cJDK 1.8 \u4e2d\u5f15\u5165\u4e86 \u7ea2\u9ed1\u6811\uff08\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logn)\uff09\u6765\u4f18\u5316\u8fd9\u4e2a\u95ee\u9898\n\u5e38\u89c1\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u4e3a\uff1a  \u039f(1)\uff1c\u039f(log2n)\uff1c\u039f(n)\uff1c\u039f(nlog2n)\uff1c\u039f(n2)\uff1c\u039f(n3)\uff1c\u2026\uff1c\u039f(2n)\uff1c\u039f(n!)"),(0,l.kt)("h3",{id:"4-jdk8-hashmap"},"4. JDK8 HashMap"),(0,l.kt)("p",null,"HashMap\u6570\u636e\u7ed3\u6784\u793a\u610f\u56fe\u89c1(\u54c8\u5e0c\u8868+\u5355\u94fe\u8868+\u7ea2\u9ed1\u6811)\uff1a",(0,l.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/hashmapdatastruct.png?raw=true",alt:"HashMap\u5185\u90e8\u7ed3\u6784\u56fe\u793a"})),(0,l.kt)("p",null,"HashMap\u51e0\u4e2a\u91cd\u8981\u7684\u53d8\u91cf\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"   /**\n     * The default initial capacity - MUST be a power of two.\n     * \u9ed8\u8ba4\u7684\u5bb9\u91cf16--\u5e76\u4e14\u5bb9\u91cf\u5fc5\u987b\u662f2\u7684\u5e42\n     */\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //16\n    /**\n     * \u6700\u5927\u9650\u5ea6\u5bb9\u91cf\n     * \n     */\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n\n    /**\n     * \u9ed8\u8ba4\u52a0\u8f7d\u56e0\u5b500.75f\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    /**\n     * \u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u7684\u9608\u503c\n     */\n    static final int TREEIFY_THRESHOLD = 8;\n\n    /**\n     * \u7ea2\u9ed1\u6811\u8f6c\u6362\u4e3a\u94fe\u8868\u7684\u9608\u503c\n     */\n    static final int UNTREEIFY_THRESHOLD = 6;\n\n   /**\n     * \u5982\u679c\u5728\u521b\u5efaHashMap\u5b9e\u4f8b\u65f6\u6ca1\u6709\u7ed9\u5b9acapacity\u3001loadFactor\u5219\u9ed8\u8ba4\u503c\u5206\u522b\u662f16\u548c0.75\n     * \u5f53\u597d\u591abin\u88ab\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u6876\u4e2dbin\u7684\u6570\u91cf\u5c0f\u4e8eTREEIFY_THRESHOLD\u5f53\u7136\u4e0d\n     * \u4f1a\u8f6c\u5316\u6210\u6811\u5f62\u7ed3\u6784\u5b58\u50a8\uff1b\u5982\u679c\u8fd9\u4e2a\u6876\u4e2dbin\u7684\u6570\u91cf\u5927\u4e8e\u4e86 TREEIFY_THRESHOLD \uff0c\n     * \u4f46\u662fcapacity\u5c0f\u4e8eMIN_TREEIFY_CAPACITY\u5219\u4f9d\u7136\u4f7f\u7528\u94fe\u8868\u7ed3\u6784\u8fdb\u884c\u5b58\u50a8\uff0c\u6b64\u65f6\u4f1a\u5bf9H\n     * ashMap\u8fdb\u884c\u6269\u5bb9\uff1b\u5982\u679ccapacity\u5927\u4e8e\u4e86MIN_TREEIFY_CAPACITY \uff0c\u5219\u4f1a\u8fdb\u884c\u6811\u5316\u3002\n     */\n    static final int MIN_TREEIFY_CAPACITY = 64;\n\n   /**\n     * The table, initialized on first use, and resized as\n     * necessary. When allocated, length is always a power of two.\n     * (We also tolerate length zero in some operations to allow\n     * bootstrapping mechanics that are currently not needed.)\n     * \u4fdd\u5b58HashMap\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u61d2\u52a0\u8f7d\u65b9\u5f0f\uff0c\u5206\u914d\u957f\u5ea6\u603b\u662f2\u7684\u5e42\u3002\n     */\n    transient Node<K,V>[] table;\n\n    /**\n     * Holds cached entrySet(). Note that AbstractMap fields are used\n     * for keySet() and values().\n     */\n    transient Set<Map.Entry<K,V>> entrySet;\n\n    /**\n     * The number of key-value mappings contained in this map.\n     * K-V map\u4e2d\u4fdd\u5b58\u7684\u6570\u91cf  -- \u65b9\u6cd5size() \u83b7\u53d6\u7684\u5c31\u662f\u8fd9\u4e2a\u5b57\u6bb5\n     */\n    transient int size;\n\n    /**\n     * The number of times this HashMap has been structurally modified\n     * Structural modifications are those that change the number of mappings in\n     * the HashMap or otherwise modify its internal structure (e.g.,\n     * rehash).  This field is used to make iterators on Collection-views of\n     * the HashMap fail-fast.  (See ConcurrentModificationException).\n     * HashMap\u7684\u6570\u636e\u7ed3\u6784\u6539\u53d8\u7684\u6b21\u6570\n     */\n    transient int modCount;\n\n    /**\n     * The next size value at which to resize (capacity * load factor).\n     * \u6269\u5bb9\u7684\u9608\u503c\n     * @serial\n     */\n    // (The javadoc description is true upon serialization.\n    // Additionally, if the table array has not been allocated, this\n    // field holds the initial array capacity, or zero signifying\n    // DEFAULT_INITIAL_CAPACITY.)\n    int threshold;\n\n    /**\n     * The load factor for the hash table.\n     * \u8d1f\u8f7d\u56e0\u5b50\n     * @serial\n     */\n    final float loadFactor;\n")),(0,l.kt)("p",null,"\u8282\u70b9\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"static class Node<K,V> implements Map.Entry<K,V> {\n    //\u54c8\u5e0c\u503c\uff0c\u5c31\u662f\u4f4d\u7f6e\n    final int hash;\n    //\u952e\n    final K key;\n    //\u503c\n    V value;\n    //\u6307\u5411\u4e0b\u4e00\u4e2a\u51e0\u70b9\u7684\u6307\u9488\n    Node<K,V> next;\n    //...\n}\n")),(0,l.kt)("p",null,"\u7ea2\u9ed1\u6811\u8282\u70b9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    TreeNode<K,V> parent;  // red-black tree links\n    TreeNode<K,V> left;\n    TreeNode<K,V> right;\n    TreeNode<K,V> prev;    // needed to unlink next upon deletion\n    boolean red;\n}\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"tableSizeFor--\u627e\u5230\u6700\u63a5\u8fd1\u4f20\u5165cap\u76842\u7684\u5e42")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"static final int tableSizeFor(int cap) {\n        int n = cap - 1;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        //(n < 0) ? 1:()\u540e\u9762\u7684 (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1\u662f\n        //\u662f\u4e00\u5757\n        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"tableSizeFor"),"\u65b9\u6cd5\u56fe\u89e3\u5982\u4e0b\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/tablesize%E7%A4%BA%E6%84%8F%E5%9B%BE.png?raw=true",alt:"\u56fe\u89e3"})),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"put--\u5b58\u5165\u6570\u636e")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) {\n        Node<K,V>[] tab; \n        Node<K,V> p; \n        //\u6876\u7684\u5bb9\u91cf\n        int n\uff1b\n        //\u6876\u7684\u7d22\u5f15\n        int i;\n\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //\u61d2\u52a0\u8f7d---\u6ca1\u6709\u521d\u59cb\u5316\u8fdb\u884c\u521d\u59cb\u5316\n            n = (tab = resize()).length;\n        //\u83b7\u53d6hash\u6876\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            //\u6ca1\u6709\u54c8\u5e0c\u78b0\u649e\u76f4\u63a5\u653e\u5728\u5bf9\u5e94\u7684\u6876\u4e2d\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; \n            K k;\n            //\u5224\u65ad\u6876\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u548c\u63d2\u5165\u7684\u6570\u636e\u76f8\u7b49--\u4e0d\u662f\u8d70\u4e0b\u4e00\u4e2aelse if\n            if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            //\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u4e86--\u4e0d\u662f\u8d70\u4e0b\u9762\u7684else\n            else if (p instanceof TreeNode)\n               //\u505a\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u6570\u636e\u64cd\u4f5c\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n             \n            else {\n             //\u6876\u91cc\u9762\u7684\u6570\u636e\u8fd8\u662f\u94fe\u8868\u7684\u7ed3\u6784\n            //\u904d\u5386\u67e5\u627e\u66ff\u6362\u6216\u8005\u76f4\u63a5\u5b58\u653e\u5230\u94fe\u8868\u6700\u540e\u9762\n                for (int binCount = 0; ; ++binCount) {\n                //\u627e\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\u7684\u8282\u70b9\n                    if ((e = p.next) == null) {\n                        //\u63d2\u5165\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n                        p.next = newNode(hash, key, value, null);\n                        //\u5224\u65ad\u662f\u5426\u8981\u5c06\u94fe\u8868\u7ed3\u6784\u8f6c\u6362\u6210\u7ea2\u9ed1\u6811(TREEIFY_THRESHOLD=8)\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            //\u6876\u5bb9\u5668\u7684\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    //\u67e5\u627e\u5230key\u503c\u76f8\u7b49\u7684\u76f4\u63a5\u8df3\u51fa\n                    if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            //HashMap\u4e2d\u5b58\u5728\u63d2\u5165\u7684key\u503c\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        //\u66f4\u65b0\u4fee\u6539\u6b21\u6570\n        ++modCount;\n        //\u589e\u52a0map\u7684size\n        if (++size > threshold)\n        //\u5927\u4e8e\u9608\u503c\u6269\u5bb9\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"treeifyBin\u2014\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final void treeifyBin(Node<K,V>[] tab, int hash) {\n        int n, index; Node<K,V> e;\n        //tab\u4e3a\u7a7a\u8fdb\u884c\u6269\u5bb9\n        //tab\u7684\u5bb9\u91cf\u5c0f\u4e8eMIN_TREEIFY_CAPACITY\u8fdb\u884c\u6269\u5bb9\n        if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n            resize();\n        else if ((e = tab[index = (n - 1) & hash]) != null) {\n            //\u83b7\u53d6\u5230\u8282\u70b9\u8fdb\u884c\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\n            TreeNode<K,V> hd = null, tl = null;\n            do {\n                //Node --\x3e TreeNode\n                TreeNode<K,V> p = replacementTreeNode(e, null);\n                if (tl == null)\n                    hd = p;\n                else {\n                    p.prev = tl;\n                    tl.next = p;\n                }\n                tl = p;\n            } while ((e = e.next) != null);\n            if ((tab[index] = hd) != null)\n                //\u7ea2\u9ed1\u6811\u9000\u5316\u4e3a\u94fe\u8868\n                hd.treeify(tab);\n        }\n    }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u94fe\u8868\u7684\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u7684\u4e24\u4e2a\u6761\u4ef6"),"\uff1a"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u94fe\u8868\u7684\u957f\u5ea6>=TREEIFY_THRESHOLD\uff088\u4e3a\u9ed8\u8ba4\u503c\uff09"),(0,l.kt)("li",{parentName:"ol"},"\u5bb9\u91cf>=MIN_TREEIFY_CAPACITY(64\u9ed8\u8ba4\u503c)")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"putTreeVal--\u7ea2\u9ed1\u6811\u7684\u6dfb\u52a0\u64cd\u4f5c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final TreeNode<K,V> putTreeVal(HashMap<K,V> map, Node<K,V>[] tab,int h, K k, V v) {\n            Class<?> kc = null;\n            boolean searched = false;\n            //\u83b7\u53d6\u6839\u8282\u70b9\n            TreeNode<K,V> root = (parent != null) ? root() : this;\n            //\u6bcf\u6b21\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u4ece\u6839\u8282\u70b9\u904d\u5386\uff0c\u5bf9\u6bd4\u54c8\u5e0c\u503c\n            for (TreeNode<K,V> p = root;;) {\n                int dir; //\u63d2\u5165\u7684\u4f4d\u7f6e\n                int ph; \n                K pk;\n                if ((ph = p.hash) > h)\n                    dir = -1;//\u5de6\u5b50\u6811\n                else if (ph < h)\n                    dir = 1; //\u53f3\u5b50\u6811\n                else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n                //\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u3001\u952e\u548c\u8981\u6dfb\u52a0\u7684\u90fd\u4e00\u81f4\uff0c\u5c31\u8fd4\u56de\u5f53\u524d\u8282\u70b9\n                    return p;\n                else if ((kc == null && (kc = comparableClassFor(k)) == null) \n                       || (dir = compareComparables(kc, k, pk)) == 0) {\n                    if (!searched) {\n                        TreeNode<K,V> q, ch;\n                        searched = true;\n                        if (((ch = p.left) != null &&\n                             (q = ch.find(h, k, kc)) != null) ||\n                            ((ch = p.right) != null &&\n                             (q = ch.find(h, k, kc)) != null))\n                             //\u5982\u679c\u4ece ch \u6240\u5728\u5b50\u6811\u4e2d\u53ef\u4ee5\u627e\u5230\u8981\u6dfb\u52a0\u7684\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\n                            return q;\n                    }\n                    //\u54c8\u5e0c\u503c\u76f8\u7b49\uff0c\u4f46\u952e\u65e0\u6cd5\u6bd4\u8f83\uff0c\u53ea\u597d\u901a\u8fc7\u7279\u6b8a\u7684\u65b9\u6cd5\u7ed9\u4e2a\u7ed3\u679c\n                    dir = tieBreakOrder(k, pk);\n                }\n            //\u7ecf\u8fc7\u524d\u9762\u7684\u8ba1\u7b97\uff0c\u5f97\u5230\u4e86\u5f53\u524d\u8282\u70b9\u548c\u8981\u63d2\u5165\u8282\u70b9\u7684\u4e00\u4e2a\u5927\u5c0f\u5173\u7cfb\n            //\u8981\u63d2\u5165\u7684\u8282\u70b9\u6bd4\u5f53\u524d\u8282\u70b9\u5c0f\u5c31\u63d2\u5230\u5de6\u5b50\u6811\uff0c\u5927\u5c31\u63d2\u5230\u53f3\u5b50\u6811\n                TreeNode<K,V> xp = p;\n            //\u5982\u679c\u5f53\u524d\u8282\u70b9\u8fd8\u6ca1\u6709\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\u65f6\u624d\u80fd\u63d2\u5165\uff0c\u5426\u5219\u5c31\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af\n                if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                    Node<K,V> xpn = xp.next;\n                    TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);\n                    if (dir <= 0)\n                        xp.left = x;\n                    else\n                        xp.right = x;\n                    xp.next = x;\n                    x.parent = x.prev = xp;\n                    if (xpn != null)\n                        ((TreeNode<K,V>)xpn).prev = x;\n                    //\u7ea2\u9ed1\u6811\u4e2d\uff0c\u63d2\u5165\u5143\u7d20\u540e\u5fc5\u8981\u7684\u5e73\u8861\u8c03\u6574\u64cd\u4f5c\n                    moveRootToFront(tab, balanceInsertion(root, x));\n                    return null;\n                }\n            }\n        }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"balanceInsertion -- \u8c03\u6574\u63d2\u5165\u540e\u6570\u636e\u7684\u5e73\u8861")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"static <K,V> TreeNode<K,V> balanceInsertion(TreeNode<K,V> root,TreeNode<K,V> x) {\n            //\u6bcf\u4e2a\u65b0\u589e\u8282\u70b9\u9ed8\u8ba4\u4e3a\u7ea2\u8272\n            x.red = true;\n            // xp\u7236\u8282\u70b9 xpp\u7956\u7236\u8282\u70b9 xppl\u7956\u7236\u5de6\u8282\u70b9 xppr \u7956\u7236\u53f3\u8282\u70b9\n            for (TreeNode<K,V> xp, xpp, xppl, xppr;;) {\n                if ((xp = x.parent) == null) {\n                    // x\u7684\u7236\u8282\u70b9\u4e3a\u7a7a\uff0cx\u5e94\u4e3a\u6839\u8282\u70b9\uff0c\u5e94\u4e3a\u9ed1\u8272 --(\u7ea2\u9ed1\u6811\u6839\u8282\u70b9\u4e3a\u9ed1\u8272)\n                    x.red = false;\n                    return x;\n                }\n                else if (!xp.red || (xpp = xp.parent) == null)\n                // \u7236\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u7956\u7236\u8282\u70b9\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\n                    return root;\n                //\u4e00\u4e0b\u5904\u7406\u4e3a\u903b\u8f91--\u7236\u8282\u70b9\u662f\u7ea2\u8272\n                \n                //\u7236\u8282\u70b9\u4e3a\u7956\u7236\u8282\u70b9\u7684\u5de6\u8282\u70b9\n                if (xp == (xppl = xpp.left)) {\n                    //\u7236\u8282\u70b9\u662f\u7956\u7236\u8282\u70b9\u7684\u5de6\u8282\u70b9\n                    if ((xppr = xpp.right) != null && xppr.red) {\n                        //\u53d4\u7236\u8282\u70b9\u4e3a\u7ea2\u8272--\u5c06\u53d4\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a\u9ed1\u8272\n                        xppr.red = false;\n                        //\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a\u9ed1\u8272\n                        xp.red = false;\n                        //\u5c06\u7956\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a\u7ea2\u8272\n                        xpp.red = true;\n                        //\u5c06\u7956\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7ee7\u7eed\u64cd\u4f5c\n                        x = xpp;\n                    }\n                    else {\n                        //\u53d4\u7236\u8282\u70b9\u4e3a\u7a7a\u6216\u8005\u9ed1\u8272\n                        if (x == xp.right) {\n                           // x\u4e3a\u7236\u8282\u70b9\u53f3\u8282\u70b9\uff0c\u5219\u8981\u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c\n                            root = rotateLeft(root, x = xp);\n                            xpp = (xp = x.parent) == null ? null : xp.parent;\n                        }\n                        // \u7ecf\u8fc7\u5de6\u65cbx\u4e3a\u5de6\u8282\u70b9\n                        if (xp != null) {\n                            //\u7236\u8282\u70b9\u6d82\u6210\u9ed1\u8272\n                            xp.red = false;\n                            if (xpp != null) {\n                                // \u7956\u7236\u8282\u70b9\u4e0d\u4e3a\u7a7a\n                                // \u7956\u7236\u8282\u70b9\u8bbe\u4e3a\u7ea2\u8272\n                                xpp.red = true;\n                                // \u4ee5\u7956\u7236\u8282\u70b9\u4e3a\u652f\u70b9\u53f3\u65cb\u8f6c\n                                root = rotateRight(root, xpp);\n                            }\n                        }\n                    }\n                }\n                 //\u7236\u8282\u70b9\u4e3a\u7956\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9\n                else {\n                    if (xppl != null && xppl.red) {\n                        // \u53d4\u7236\u8282\u70b9\u4e3a\u7ea2\u8272\n                        // \u5c06\u53d4\u7236\u8282\u70b9\u8bbe\u4e3a\u9ed1\u8272\n                        xppl.red = false;\n                        xp.red = false;\n                        xpp.red = true;\n                        x = xpp;\n                    }\n                    else {\n                        if (x == xp.left) {\n                            root = rotateRight(root, x = xp);\n                            xpp = (xp = x.parent) == null ? null : xp.parent;\n                        }\n                        if (xp != null) {\n                            xp.red = false;\n                            if (xpp != null) {\n                                xpp.red = true;\n                                root = rotateLeft(root, xpp);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"rotateLeft\u548crotateRight")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"//\u7ea2\u9ed1\u6811\u5de6\u65cb\nstatic <K,V> TreeNode<K,V> rotateLeft(TreeNode<K,V> root,TreeNode<K,V> p) {\n            TreeNode<K,V> r, pp, rl;\n            if (p != null && (r = p.right) != null) {\n                if ((rl = p.right = r.left) != null)\n                    rl.parent = p;\n                if ((pp = r.parent = p.parent) == null)\n                    (root = r).red = false;\n                else if (pp.left == p)\n                    pp.left = r;\n                else\n                    pp.right = r;\n                r.left = p;\n                p.parent = r;\n            }\n            return root;\n        }\n\n//\u7ea2\u9ed1\u6811\u53f3\u65cb\nstatic <K,V> TreeNode<K,V> rotateRight(TreeNode<K,V> root,TreeNode<K,V> p) {\n            TreeNode<K,V> l, pp, lr;\n            if (p != null && (l = p.left) != null) {\n                if ((lr = p.left = l.right) != null)\n                    lr.parent = p;\n                if ((pp = l.parent = p.parent) == null)\n                    (root = l).red = false;\n                else if (pp.right == p)\n                    pp.right = l;\n                else\n                    pp.left = l;\n                l.right = p;\n                p.parent = l;\n            }\n            return root;\n        }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"resize--\u6269\u5bb9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},' final Node<K,V>[] resize() {\n        //\u4fdd\u5b58\u539f\u6709\u7684\u6570\u636e\n        Node<K,V>[] oldTab = table;\n        //\u539f\u6709\u7684\u5bb9\u91cf\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        //\u4e34\u754c\u503c \u5f53\u5b9e\u9645\u5927\u5c0f(\u5bb9\u91cf*\u586b\u5145\u6bd4)\u8d85\u8fc7\u4e34\u754c\u503c\u65f6\uff0c\u4f1a\u8fdb\u884c\u6269\u5bb9\n        int oldThr = threshold;\n        int newCap =0;\n        int newThr = 0;\n        if (oldCap > 0) {\n            //\u539f\u6709\u5bb9\u91cf\u5927\u4e8e\u6700\u5927\u9650\u5ea6\u5bb9\u91cf\uff0c\u4e34\u754c\u503c=\u6574\u6570\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u539f\u6709\u7684\u4e0d\u8fdb\u884c\u6269\u5bb9\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        else {               // zero initial threshold signifies using defaults\n            //\u4f7f\u7528\u7684\u662f\u65e0\u53c2\u6784\u9020\u65b9\u6cd5\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        threshold = newThr;\n        @SuppressWarnings({"rawtypes","unchecked"})\n        //\u521b\u5efa\u65b0\u7684Node\u6570\u7ec4\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        //\u4ee5\u4e0b\u5c31\u662f\u6269\u5bb9--\u5224\u65ad\u662f\u4e0d\u662f\u65b0new\u7684\u5bf9\u8c61\n        if (oldTab != null) {\n            for (int j = 0; j < oldCap; ++j) {\n            //\u5904\u7406\u65e7\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e--\u4e09\u79cd\u60c5\u51b5\n                Node<K,V> e;\n                if ((e = oldTab[j]) != null) {\n                    oldTab[j] = null;\n                    //\u65e7\u6570\u636e\u6ca1\u6709\u5b50\u8282\u70b9\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                    //TreeNode\u8282\u70b9--\u7ea2\u9ed1\u6811\u7684\u5f62\u5f0f\u5b58\u653e\n                    else if (e instanceof TreeNode)\n                        //\u6811\u5f62\u7ed3\u6784\u4fee\u526a\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    else { // preserve order\n                    //\u94fe\u8868\u6709\u5b50\u8282\u70b9\u6570\u636e\u79fb\u52a8\n                    //\u4fdd\u8bc1\u987a\u5e8f\n                        Node<K,V> loHead = null;\n                        Node<K,V> loTail = null;\n                        Node<K,V> hiHead = null;\n                        Node<K,V> hiTail = null;\n                        Node<K,V> next = null;\n                        do {\n                            //\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\n                            next = e.next;\n                           /**\n                            * e.hash & oldCap \u8bf4\u660ee.hash\u540e\u7684\u503c\u5c0f\u4e8eoldCap,\u5373\u4f7f\u6269\u5145\u4e86,\n                            *\u4e5f\u662f\u6269\u5145\u94fe\u8868\u7684\u540e\u534a\u90e8\u5206,\u524d\u9762\u5df2\u7ecf\u6709\u7684\u5143\u7d20\u8fd8\u662f\u5728\u539f\u6765\u7684\u4f4d\u7f6e\n                            *\uff08\u5bb9\u91cf\u9664\u4e86\u6700\u5927\u5bb9\u91cf\u5176\u4ed6\u90fd\u662f2\u7684\u500d\u6570\uff0c\u901a\u8fc7(e.hash & oldCap) == 0)\n                            *\u5c31\u53ef\u4ee5\u5224\u65ad\u94fe\u8868\u7684\u6269\u5145\uff09\n                            *\n                            */\n                            if ((e.hash & oldCap) == 0) {\n                            //\u5982\u679cloTail==null\u8bf4\u660e\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20,\u628a\u8fd9\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9loHead\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                //\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5c31\u628a\u4ed6\u52a0\u5230\u540e\u9762\n                                    loTail.next = e;\n                                loTail = e;\n                            }else {\n                            //\u5982\u679c\u8d70\u4e0b\u9762\u7684\u4ee3\u7801,\u5219\u8bf4\u660e,\u65b0\u7684\u5143\u7d20\u7684key\u503c\u7684hash\u5df2\u7ecf\u8d85\u8fc7\u4e86oldCap,\u6240\u6709\u8981\u52a0\u5165\u5230\u65b0\u5e93\u5145\u7684\u94fe\u8868\u4e2d\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n')),(0,l.kt)("p",null,"\u4e0b\u5217\u4ee3\u7801\u7684\u56fe\u89e3\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"(e.hash & oldCap) == 0\n")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/hashMap1.8%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE1.png?raw=true",alt:"\u56fe\u89e3"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/hashMap1.8%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE2.png?raw=true",alt:"\u56fe\u89e3"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/jdk1.8hashMap%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png?raw=true",alt:"\u56fe\u89e3"})),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"split--\u6811\u5f62\u7ed3\u6784\u4fee\u526a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"//tab \u8868\u793a\u4fdd\u5b58\u6876\u5934\u7ed3\u70b9\u7684\u54c8\u5e0c\u8868\n//index \u8868\u793a\u4ece\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4fee\u526a\n//bit \u8981\u4fee\u526a\u7684\u4f4d\u6570\uff08\u54c8\u5e0c\u503c\uff09\n\nfinal void split(HashMap<K,V> map, Node<K,V>[] tab, int index, int bit) {\n            TreeNode<K,V> b = this;\n            // Relink into lo and hi lists, preserving order\n            TreeNode<K,V> loHead = null;\n            TreeNode<K,V> loTail = null;\n            TreeNode<K,V> hiHead = null;\n            TreeNode<K,V> hiTail = null;\n            int lc = 0;\n            int hc = 0;\n            for (TreeNode<K,V> e = b, next; e != null; e = next) {\n                //\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e2a\u8282\u70b9\n                next = (TreeNode<K,V>)e.next;\n                e.next = null;\n                if ((e.hash & bit) == 0) {\n                    if ((e.prev = loTail) == null)\n                        loHead = e;\n                    else\n                        loTail.next = e;\n                    loTail = e;\n                    ++lc;\n                }\n                else {\n                    if ((e.prev = hiTail) == null)\n                        hiHead = e;\n                    else\n                        hiTail.next = e;\n                    hiTail = e;\n                    ++hc;\n                }\n            }\n\n            if (loHead != null) {\n                if (lc <= UNTREEIFY_THRESHOLD)\n                    tab[index] = loHead.untreeify(map);\n                else {\n                    tab[index] = loHead;\n                    if (hiHead != null) // (else is already treeified)\n                        loHead.treeify(tab);\n                }\n            }\n            if (hiHead != null) {\n                if (hc <= UNTREEIFY_THRESHOLD)\n                    tab[index + bit] = hiHead.untreeify(map);\n                else {\n                    tab[index + bit] = hiHead;\n                    if (loHead != null)\n                        hiHead.treeify(tab);\n                }\n            }\n        }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"remove--\u5220\u9664")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    /**\n     * Implements Map.remove and related methods.\n     *\n     * @param hash key\u7684\u54c8\u5e0c\u503c\n     * @param key the key\n     * @param value the value to match if matchValue, else ignored\n     * @param matchValue if true only remove if value is equal\n     * @param movable if false do not move other nodes while removing\n     * @return the node, or null if none\n     */\n    final Node<K,V> removeNode(int hash, Object key, Object value,\n                               boolean matchValue, boolean movable) {\n        Node<K,V>[] tab; \n        Node<K,V> p; \n        int n;//\u54c8\u5e0c\u8868\u957f\u5ea6\u4fdd\u5b58\u53d8\u91cf\n        int index; //\u54c8\u5e0c\u8868\u7684\u7d22\u5f15\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (p = tab[index = (n - 1) & hash]) != null) {\n            Node<K,V> node = null, e; K k; V v;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                node = p;\n            else if ((e = p.next) != null) {\n                if (p instanceof TreeNode)\n                    //\u7ea2\u9ed1\u6811\u67e5\u627e\n                    node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n                else {\n                    //\u94fe\u8868\u67e5\u627e\n                    do {\n                        if (e.hash == hash &&\n                            ((k = e.key) == key ||\n                             (key != null && key.equals(k)))) {\n                            node = e;\n                            break;\n                        }\n                        p = e;\n                    } while ((e = e.next) != null);\n                }\n            }\n            if (node != null && (!matchValue || (v = node.value) == value ||\n                                 (value != null && value.equals(v)))) {\n                if (node instanceof TreeNode)\n                    //\u7ea2\u9ed1\u6811\u5220\u9664\n                    ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n                else if (node == p)\n                    //\u94fe\u8868\u5220\u9664\n                    tab[index] = node.next;\n                else\n                    p.next = node.next;\n                ++modCount;\n                --size;\n                afterNodeRemoval(node);\n                return node;\n            }\n        }\n        return null;\n    }\n")),(0,l.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"removeTreeNode\u2014\u7ea2\u9ed1\u6811\u5220\u9664\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"final void removeTreeNode(HashMap<K,V> map, Node<K,V>[] tab,boolean movable) {\n            int n;\n            if (tab == null || (n = tab.length) == 0)\n                return;\n            int index = (n - 1) & hash;\n            //\u83b7\u53d6\u5230\u54c8\u5e0c\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n            TreeNode<K,V> first = (TreeNode<K,V>)tab[index]; \n            //\u54c8\u5e0c\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5373\u4e3a\u7ea2\u9ed1\u6811\u7684\u8ddf\u8282\u70b9\n            TreeNode<K,V>  root = first;\n            TreeNode<K,V> rl;\n            //\u5220\u9664\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9--\u94fe\u8868\u7684\u60c5\u51b5\n            TreeNode<K,V> succ = (TreeNode<K,V>)next;\n            //\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n            TreeNode<K,V> pred = prev;\n    \n            //pred\u8282\u70b9\u4e3a\u7a7a\u8bf4\u660e\u5220\u9664\u8282\u70b9\u4e3a\u8ddf\u8282\u70b9\n            if (pred == null)\n                tab[index] = first = succ;\n            else\n                //pred\u975e\u7a7a\u7684--\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u5220\u9664\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n                pred.next = succ;\n            \n            if (succ != null)\n                //\u5220\u9664\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5c06\u5c06\u5220\u9664\u8282\u70b9\u7684next\u8282\u70b9\u7684prev\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n                succ.prev = pred;\n            \n            if (first == null)\n                //first\u4e3a\u7a7a\u8bf4\u660e\u5220\u9664\u7684\u662f\u6839\u8282\u70b9\u4e14\u6ca1\u6709\u5176\u4ed6\u8282\u70b9\n                //\u82e5\u5220\u9664\u7684\u7ed3\u70b9\u662f\u6811\u4e2d\u7684\u552f\u4e00\u7ed3\u70b9\u5219\u76f4\u63a5\u7ed3\u675f\n                return;\n    \n            if (root.parent != null)\n                //\u83b7\u53d6\u6839\u8282\u70b9--\u786e\u4fddroot\u6307\u5411\u6839\u8282\u70b9\n                root = root.root();\n    \n            if (root == null || root.right == null ||\n                (rl = root.left) == null || rl.left == null) {\n                // \u6839\u81ea\u8eab\u6216\u8005\u5de6\u53f3\u513f\u5b50\u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\u8bf4\u660e\u7ed3\u70b9\u6570\u8fc7\u5c11\uff08\u4e0d\u8d85\u8fc72\uff09\u8f6c\u4e3a\u7ebf\u6027\u8868\u5e76\u7ed3\u675f\n                tab[index] = first.untreeify(map);  // too small\n                return;\n            }\n            \n            \n            TreeNode<K,V> p = this;//\u6307\u5411\u5220\u9664\u8282\u70b9\n            TreeNode<K,V> pl = left;//\u6307\u5411\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b50\u6811\n            TreeNode<K,V> pr = right;//\u6307\u5411\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b50\u6811\n            TreeNode<K,V> replacement;//\u66ff\u4ee3\u7684\u8282\u70b9\n            //\u5220\u9664\u8282\u70b9\u7684\u5de6\u53f3\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\n            if (pl != null && pr != null) {\n                TreeNode<K,V> s = pr;\n                TreeNode<K,V> sl;\n                //\u627e\u5230\u5220\u9664\u8282\u70b9\u7684hashCode\u6700\u5c0f\u503c--\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5220\u9664\u539f\u7406\n                //\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u90fd\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5bfb\u627e\u53f3\u5b50\u6811\u4e2d\u6700\u5de6\u7684\u53f6\u7ed3\u70b9\u4f5c\u4e3a\u540e\u7ee7\uff0cs\u6307\u5411\u8fd9\u4e2a\u540e\u7ee7\u7ed3\u70b9\n                while ((sl = s.left) != null) // find successor\n                    s = sl;\n                //\u4ea4\u6362s\u548c\u5220\u9664\u8282\u70b9p\u7684\u989c\u8272--\u4ea4\u6362\u540e\u7ee7\u7ed3\u70b9\u548c\u8981\u5220\u9664\u7ed3\u70b9\u7684\u989c\u8272\n                boolean c = s.red; \n                boolean s.red = p.red;\n                boolean  p.red = c; // swap colors\n                \n                TreeNode<K,V> sr = s.right;\n                TreeNode<K,V> pp = p.parent;\n                //\u4ea4\u6362s\u548cp\u7684\u4f4d\u7f6e\n                if (s == pr) { // p was s's direct parent\n                    p.parent = s;\n                    s.right = p;\n                }\n                else {\n                    TreeNode<K,V> sp = s.parent;\n                    if ((p.parent = sp) != null) {\n                        if (s == sp.left)\n                            sp.left = p;\n                        else\n                            sp.right = p;\n                    }\n                    if ((s.right = pr) != null)\n                        pr.parent = s;\n                }\n                p.left = null;\n                if ((p.right = sr) != null)\n                    sr.parent = p;\n                if ((s.left = pl) != null)\n                    pl.parent = s;\n                if ((s.parent = pp) == null)\n                    root = s;\n                else if (p == pp.left)\n                    pp.left = s;\n                else\n                    pp.right = s;\n                if (sr != null)\n                    replacement = sr;\n                else\n                    replacement = p;\n            }\n            else if (pl != null)\n                replacement = pl;\n            else if (pr != null)\n                replacement = pr;\n            else\n                replacement = p;\n            if (replacement != p) {\n                TreeNode<K,V> pp = replacement.parent = p.parent;\n                if (pp == null)\n                    root = replacement;\n                else if (p == pp.left)\n                    pp.left = replacement;\n                else\n                    pp.right = replacement;\n                p.left = p.right = p.parent = null;\n            }\n\n            TreeNode<K,V> r = p.red ? root : balanceDeletion(root, replacement);\n\n            if (replacement == p) {  // detach\n                TreeNode<K,V> pp = p.parent;\n                p.parent = null;\n                if (pp != null) {\n                    if (p == pp.left)\n                        pp.left = null;\n                    else if (p == pp.right)\n                        pp.right = null;\n                }\n            }\n            if (movable)\n                moveRootToFront(tab, r);\n        }\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f\uff1aHashMap\u5982\u679ckey\u4e3anull,\u90a3\u4e48\u5b58\u653e\u7684\u6876\u7684\u4f4d\u7f6e\u4e3a\u7b2c\u4e00\u4e2a\u4e5f\u5c31\u662findex=0\u7684\u4f4d\u7f6e\u3002\u7531\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\u6765"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n"))),(0,l.kt)("p",null,"\u53c2\u8003\u6587\u6863\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.cnblogs.com/CarpenterLee/p/5503882.html"},"https://www.cnblogs.com/CarpenterLee/p/5503882.html")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://blog.csdn.net/wushiwude/article/details/75331926"},"https://blog.csdn.net/wushiwude/article/details/75331926")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://www.importnew.com/29724.html"},"http://www.importnew.com/29724.html")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.jianshu.com/p/5b157d4be1ad"},"https://www.jianshu.com/p/5b157d4be1ad"))))}u.isMDXComponent=!0}}]);