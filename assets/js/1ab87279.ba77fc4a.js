"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[5534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var l=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},s=Object.keys(e);for(l=0;l<s.length;l++)t=s[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)t=s[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=l.createContext({}),o=function(e){var n=l.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=o(e.components);return l.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},g=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(t),g=a,d=p["".concat(i,".").concat(g)]||p[g]||m[g]||s;return t?l.createElement(d,r(r({ref:n},c),{},{components:t})):l.createElement(d,r({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=g;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u[p]="string"==typeof e?e:a,r[1]=u;for(var o=2;o<s;o++)r[o]=t[o];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>o});var l=t(7462),a=(t(7294),t(3905));const s={title:"RocketMQ\u6e90\u7801\u89e3\u6790-\u6d88\u8d39\u8005\u6d88\u8d39\u7b56\u7565\u6e90\u7801\u89e3\u6790",date:new Date("2020-03-27T00:00:00.000Z"),weight:202106112127},r=void 0,u={unversionedId:"rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy",id:"rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy",title:"RocketMQ\u6e90\u7801\u89e3\u6790-\u6d88\u8d39\u8005\u6d88\u8d39\u7b56\u7565\u6e90\u7801\u89e3\u6790",description:"\u4ee5\u4e0b\u6e90\u7801\u57fa\u4e8eRocket MQ 4.7.0",source:"@site/docs/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy.md",sourceDirName:"rocketmq/rocketmq4/consumer",slug:"/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy",permalink:"/docs/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-strategy.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1684512823,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-\u6d88\u8d39\u8005\u6d88\u8d39\u7b56\u7565\u6e90\u7801\u89e3\u6790",date:"2020-03-27T00:00:00.000Z",weight:202106112127},sidebar:"rocketmq4",previous:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-\u6d88\u8d39\u8005\u5b9a\u65f6\u4efb\u52a1\u89e3\u6790",permalink:"/docs/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer-scheduledtask"},next:{title:"RocketMQ\u6e90\u7801\u89e3\u6790-\u6d88\u8d39\u8005\u542f\u52a8\u6e90\u7801\u89e3\u6790",permalink:"/docs/rocketmq/rocketmq4/consumer/RocketMQ-analysis-consumer"}},i={},o=[{value:"1. \u6d88\u8d39\u8005\u7684\u4e24\u79cd\u6d88\u8d39\u65b9\u5f0f",id:"1-\u6d88\u8d39\u8005\u7684\u4e24\u79cd\u6d88\u8d39\u65b9\u5f0f",level:3},{value:"2. \u6d88\u8d39\u8005\u6d88\u8d39\u6a21\u578b",id:"2-\u6d88\u8d39\u8005\u6d88\u8d39\u6a21\u578b",level:3},{value:"3. \u6d88\u8d39\u8005\u5e76\u53d1\u6d88\u8d39\u6570\u636e",id:"3-\u6d88\u8d39\u8005\u5e76\u53d1\u6d88\u8d39\u6570\u636e",level:3},{value:"4. \u5206\u914d\u6d88\u606f\u961f\u5217\u7b56\u7565",id:"4-\u5206\u914d\u6d88\u606f\u961f\u5217\u7b56\u7565",level:3},{value:"AllocateMessageQueueAveragely-\u5e73\u5747\u5206\u914d\u7b97\u6cd5",id:"allocatemessagequeueaveragely-\u5e73\u5747\u5206\u914d\u7b97\u6cd5",level:4},{value:"AllocateMessageQueueAveragelyByCircle -\u57fa\u4e8e\u73af\u5f62\u5e73\u5747\u7b97\u6cd5",id:"allocatemessagequeueaveragelybycircle--\u57fa\u4e8e\u73af\u5f62\u5e73\u5747\u7b97\u6cd5",level:4},{value:"AllocateMessageQueueConsistentHash-\u57fa\u4e8e\u4e00\u81f4\u6027hash\u7b97\u6cd5",id:"allocatemessagequeueconsistenthash-\u57fa\u4e8e\u4e00\u81f4\u6027hash\u7b97\u6cd5",level:4}],c={toc:o},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u4ee5\u4e0b\u6e90\u7801\u57fa\u4e8eRocket MQ 4.7.0")),(0,a.kt)("h3",{id:"1-\u6d88\u8d39\u8005\u7684\u4e24\u79cd\u6d88\u8d39\u65b9\u5f0f"},"1. \u6d88\u8d39\u8005\u7684\u4e24\u79cd\u6d88\u8d39\u65b9\u5f0f"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Push\u6d88\u8d39--\u5e95\u5c42\u901a\u8fc7\u957f\u8f6e\u8be2\u6765\u5b9e\u73b0(DefaultMQPushConsumer\u6765\u5b9e\u73b0\u7684)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Pull\u6d88\u8d39--(4.7.0\u4e2d\u4ee3\u7801\u5df2\u7ecf\u7528Deprecated\u6807\u8bb0\u4e86DefaultMQPullConsumer\u7684\u5b9e\u73b0)"))),(0,a.kt)("h3",{id:"2-\u6d88\u8d39\u8005\u6d88\u8d39\u6a21\u578b"},"2. \u6d88\u8d39\u8005\u6d88\u8d39\u6a21\u578b"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/mxsm/document/master/image/MQ/RocketMQ/Cosume%E6%B6%88%E8%B4%B9%E6%9E%B6%E6%9E%84.png",alt:null})),(0,a.kt)("h3",{id:"3-\u6d88\u8d39\u8005\u5e76\u53d1\u6d88\u8d39\u6570\u636e"},"3. \u6d88\u8d39\u8005\u5e76\u53d1\u6d88\u8d39\u6570\u636e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class Consumer {\n\n  public static void main(String[] args) throws InterruptedException, MQClientException {\n\n        // Instantiate with specified consumer group name.\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");\n         \n        // Specify name server addresses.\n        consumer.setNamesrvAddr("localhost:9876");\n        \n        // Subscribe one more more topics to consume.\n        consumer.subscribe("TopicTest", "*");\n        // Register callback to execute on arrival of messages fetched from brokers.\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        //Launch the consumer instance.\n        consumer.start();\n\n        System.out.printf("Consumer Started.%n");\n    }\n}\n\n')),(0,a.kt)("p",null,"\u4ee3\u7801\u6765\u81ea\u5b98\u7f51\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u5c31\u662f\u5e76\u53d1\u6d88\u8d39MQ\u6d88\u606f\u3002\u901a\u8fc7\u8bbe\u7f6eMessageListenerConcurrently\u5e76\u53d1\u7684\u76d1\u542c\u5668\u6765\u5b9e\u73b0\u76d1\u542c\u6d88\u8d39\u7684\u6d88\u606f\u7136\u540e\u505a\u540e\u7eed\u7684\u5904\u7406\u3002\u901a\u8fc7\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"DefaultMQPushConsumer.start"))," \u65b9\u6cd5\u6765\u542f\u52a8\u6d88\u8d39\u8005\u6d88\u8d39\u3002 "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsumer {\n    \n    //\u6d88\u8d39\u5b9e\u73b0\u7c7b\n    protected final transient DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;\n    \n    //\u6d88\u8d39\u7ec4\n    private String consumerGroup;\n    \n    //\u6d88\u8d39\u6a21\u5f0f--\u9ed8\u8ba4\u4e3a\u96c6\u7fa4\u6d88\u8d39\uff0c\u8fd8\u6709\u4e00\u79cdBROADCASTING \u5e7f\u64ad\u6d88\u8d39\n    private MessageModel messageModel = MessageModel.CLUSTERING;\n    \n    //\u6d88\u8d39\u7684\u8d77\u59cb\u4f4d\u7f6e--\u9ed8\u8ba4\u4e3a\u672b\u5c3e\u7684offset\n    private ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;\n    \n    //\u6d88\u606f\u961f\u5217\u5206\u914d\u7b56\u7565\n    private AllocateMessageQueueStrategy allocateMessageQueueStrategy;\n    \n    //topic\u548c\u8ba2\u9605\u5173\u7cfb \n    private Map<String /* topic */, String /* sub expression */> subscription = new HashMap<String, String>();\n    \n    //\u6d88\u606f\u76d1\u542c\u5668--\u5e76\u53d1\u6d88\u8d39\u548c\u987a\u5e8f\u6d88\u8d39 \n    private MessageListener messageListener;\n    \n    //\u6d88\u8d39offset\u5b58\u50a8\u5b9e\u73b0 \n    private OffsetStore offsetStore;\n    \n    //\u6700\u5c0f\u6d88\u8d39\u7ebf\u7a0b\u6570  \n    private int consumeThreadMin = 20;\n\n    //\u6700\u5927\u6d88\u8d39\u7ebf\u7a0b\u6570\n    private int consumeThreadMax = 20;\n\n    //\u7528\u4e8e\u52a8\u6001\u8c03\u6574\u7ebf\u7a0b\u6c60\u6570\u76ee\u7684\u9608\u503c\n    private long adjustThreadPoolNumsThreshold = 100000;\n\n    //\u5e76\u53d1\u540c\u65f6\u6700\u5927\u8de8\u5ea6\u504f\u79fb\u3002\u5b83\u5bf9\u987a\u5e8f\u6d88\u8d39\u6ca1\u6709\u5f71\u54cd\n    private int consumeConcurrentlyMaxSpan = 2000;\n\n    //\u6d41\u63a7\u5236\u9608\u503c\u5728\u961f\u5217\u7ea7\u522b\uff0c\u6bcf\u4e2a\u6d88\u606f\u961f\u5217\u9ed8\u8ba4\u6700\u591a\u7f13\u5b581000\u6761\u6d88\u606f\n    private int pullThresholdForQueue = 1000;\n\n    //\u5728\u961f\u5217\u7ea7\u522b\u9650\u5236\u7f13\u5b58\u7684\u6d88\u606f\u5927\u5c0f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u6d88\u606f\u961f\u5217\u6700\u591a\u7f13\u5b58100 MiB\u6d88\u606f\n    private int pullThresholdSizeForQueue = 100;\n    \n    //\u62c9Topic\u7684\u9608\u503c--\u65e0\u9650\u5236\n    private int pullThresholdForTopic = -1;\n\n    \u9650\u5236\u4e3b\u9898\u7ea7\u522b\u4e0a\u7f13\u5b58\u7684\u6d88\u606f\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c\u4e3a-1 MiB(\u65e0\u9650\u5236)\n    private int pullThresholdSizeForTopic = -1;\n\n    //\u6d88\u606f\u62c9\u53d6\u95f4\u9694\n    private long pullInterval = 0;\n\n    //\u6279\u91cf\u6d88\u8d39\u89c4\u6a21\n    private int consumeMessageBatchMaxSize = 1;\n\n    //\u6279\u5904\u7406\u62c9\u53d6\u5927\u5c0f\n    private int pullBatchSize = 32;\n\n    //\u662f\u5426\u6bcf\u6b21\u62c9\u53d6\u7684\u65f6\u5019\u66f4\u65b0\u8ba2\u9605\u5173\u7cfb\n    private boolean postSubscriptionWhenPull = false;\n\n\n    private boolean unitMode = false;\n\n    //\u6700\u5927\u91cd\u590d\u6d88\u8d39\u6b21\u6570- -1-16\n    private int maxReconsumeTimes = -1;\n\n    //\u5bf9\u4e8e\u9700\u8981\u7f13\u6162\u62c9\u52a8\u7684\u60c5\u51b5\uff0c\u5982\u6d41\u91cf\u63a7\u5236\u60c5\u51b5\uff0c\u6682\u505c\u62c9\u52a8\u65f6\u95f4\u3002\n    private long suspendCurrentQueueTimeMillis = 1000;\n\n    //\u4ee5\u5206\u949f\u4e3a\u5355\u4f4d\u7684\u6700\u5927\u65f6\u95f4\u91cf\u53ef\u80fd\u4f1a\u963b\u585e\u6b63\u5728\u4f7f\u7528\u7684\u7ebf\u7a0b\u3002\n    private long consumeTimeout = 15;\n\n    //\u5f02\u6b65\u4f20\u8f93\u6570\u636e\u7684\u63a5\u53e3\n    private TraceDispatcher traceDispatcher = null;\n    \n    //.........\u7701\u7565\u90e8\u5206\u4ee3\u7801\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void start() throws MQClientException {\n        setConsumerGroup(NamespaceUtil.wrapNamespace(this.getNamespace(), this.consumerGroup));\n        this.defaultMQPushConsumerImpl.start();\n        if (null != traceDispatcher) {\n            try {\n                traceDispatcher.start(this.getNamesrvAddr(), this.getAccessChannel());\n            } catch (MQClientException e) {\n                log.warn("trace dispatcher start failed ", e);\n            }\n        }\n    }\n')),(0,a.kt)("p",null,"\u901a\u8fc7\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"DefaultMQPushConsumerImpl.start"))," \u65b9\u6cd5\u6765\u542f\u52a8\u6d88\u8d39\u3002\u770b\u4e00\u4e0bDefaultMQPushConsumerImpl\u7684\u521b\u5efa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," // this \u4e3aDefaultMQPushConsumer\u7684\u5b9e\u4f8b\n defaultMQPushConsumerImpl = new DefaultMQPushConsumerImpl(this, rpcHook);\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b start\u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public synchronized void start() throws MQClientException {\n        switch (this.serviceState) {\n            case CREATE_JUST:\n                log.info("the consumer [{}] start beginning. messageModel={}, isUnitMode={}", this.defaultMQPushConsumer.getConsumerGroup(),\n                    this.defaultMQPushConsumer.getMessageModel(), this.defaultMQPushConsumer.isUnitMode());\n                this.serviceState = ServiceState.START_FAILED;\n\n                //\u68c0\u67e5\u914d\u7f6e\u4fe1\u606f\u5305\u62ec \u662f\u5426\u8bbe\u7f6e\u4e86\u6d88\u8d39\u7ec4\uff0c\u6d88\u8d39\u6a21\u5f0f\u7b49\u7b49\n                this.checkConfig();\n\n                //\u62f7\u8d1d\u8ba2\u9605\u5173\u7cfb\u5230RebalanceImpl\u4e2d\n                this.copySubscription();\n\n                if (this.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) {\n                    this.defaultMQPushConsumer.changeInstanceNameToPID();\n                }\n\n                //\u83b7\u53d6MQClientInstance\n                this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);\n\n                //\u8bbe\u7f6erebalanceImpl\u914d\u7f6e\n                this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());\n                this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());\n                this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());\n                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);\n                                //\u521b\u5efaPullAPIWrapper--pull\u7684api\u7684\u5305\u88c5\u7c7b\n                this.pullAPIWrapper = new PullAPIWrapper(\n                    mQClientFactory,\n                    this.defaultMQPushConsumer.getConsumerGroup(), isUnitMode());\n                this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);\n\n                //\u5904\u7406offerSet\u7684\u5b58\u50a8\n                if (this.defaultMQPushConsumer.getOffsetStore() != null) {\n                    this.offsetStore = this.defaultMQPushConsumer.getOffsetStore();\n                } else {\n                    switch (this.defaultMQPushConsumer.getMessageModel()) {\n                        case BROADCASTING:\n                            this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());\n                            break;\n                        case CLUSTERING:\n                            this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());\n                            break;\n                        default:\n                            break;\n                    }\n                    this.defaultMQPushConsumer.setOffsetStore(this.offsetStore);\n                }\n                this.offsetStore.load();\n                               //\u6839\u636e\u4e0d\u7684\u76d1\u542c\u5668\u521b\u5efa\u4e0d\u540c\u7684\u6d88\u606f\u6d88\u8d39\u670d\u52a1\n                if (this.getMessageListenerInner() instanceof MessageListenerOrderly) {\n                    this.consumeOrderly = true;\n                    this.consumeMessageService =\n                        new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());\n                } else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) {\n                    this.consumeOrderly = false;\n                    this.consumeMessageService =\n                        new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());\n                }\n\n                //\u542f\u52a8\u6d88\u8d39\u670d\u52a1--\u5b9a\u65f6\u6e05\u7406\u8fc7\u671f\u7684\u6d88\u606f\n                this.consumeMessageService.start();\n\n                boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this);\n                if (!registerOK) {\n                    this.serviceState = ServiceState.CREATE_JUST;\n                    this.consumeMessageService.shutdown();\n                    throw new MQClientException("The consumer group[" + this.defaultMQPushConsumer.getConsumerGroup()\n                        + "] has been created before, specify another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),\n                        null);\n                }\n                               //MQClientInstance\u542f\u52a8\n                mQClientFactory.start();\n                log.info("the consumer [{}] start OK.", this.defaultMQPushConsumer.getConsumerGroup());\n                this.serviceState = ServiceState.RUNNING;\n                break;\n            case RUNNING:\n            case START_FAILED:\n            case SHUTDOWN_ALREADY:\n                throw new MQClientException("The PushConsumer service state not OK, maybe started once, "\n                    + this.serviceState\n                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),\n                    null);\n            default:\n                break;\n        }\n\n        this.updateTopicSubscribeInfoWhenSubscriptionChanged();\n        this.mQClientFactory.checkClientInBroker();\n        this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();\n        //\u6b63\u5728\u5f00\u59cb\u6d88\u8d39\u6570\u636e\u542f\u52a8\n        this.mQClientFactory.rebalanceImmediately();\n    }\n')),(0,a.kt)("p",null,"\u5728\u542f\u52a8MQClientInstance\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u6d88\u606f\u62c9\u53d6\u7ebf\u7a0b\u8fdb\u884c\u4e86start()\u3002\u6d88\u606f\u62c9\u53d6\u7ebf\u7a0b\u5f00\u59cb\u8fd0\u884c\uff0c\u770b\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    public void start() throws MQClientException {\n\n        synchronized (this) {\n            switch (this.serviceState) {\n                case CREATE_JUST:\n                    this.serviceState = ServiceState.START_FAILED;\n                    // If not specified,looking address from name server\n                    if (null == this.clientConfig.getNamesrvAddr()) {\n                        this.mQClientAPIImpl.fetchNameServerAddr();\n                    }\n                    // \u542f\u52a8\u5ba2\u6237\u7aef\u901a\u8baf\n                    this.mQClientAPIImpl.start();\n                    // \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\n                    this.startScheduledTask();\n                    // \u542f\u52a8\u62c9\u53d6\u6d88\u606f\n                    this.pullMessageService.start();\n                    // \u542f\u52a8\u8d1f\u8f7d\u5747\u8861\n                    this.rebalanceService.start();\n                    // Start push service\n                    this.defaultMQProducer.getDefaultMQProducerImpl().start(false);\n                    log.info("the client factory [{}] start OK", this.clientId);\n                    this.serviceState = ServiceState.RUNNING;\n                    break;\n                case START_FAILED:\n                    throw new MQClientException("The Factory object[" + this.getClientId() + "] has been created before, and failed.", null);\n                default:\n                    break;\n            }\n        }\n    }\n')),(0,a.kt)("p",null,"\u542f\u52a8\u8d1f\u8f7d\u5747\u8861\u662f\u6d88\u8d39\u8005\u6d88\u8d39Message\u7684\u5165\u53e3\uff0c\u63a5\u4e0b\u6765\u5165\u624b\u5206\u6790RebalanceService.start\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class RebalanceService extends ServiceThread {\n    private static long waitInterval =\n        Long.parseLong(System.getProperty(\n            "rocketmq.client.rebalance.waitInterval", "20000"));\n    private final InternalLogger log = ClientLogger.getLog();\n    private final MQClientInstance mqClientFactory;\n\n    public RebalanceService(MQClientInstance mqClientFactory) {\n        this.mqClientFactory = mqClientFactory;\n    }\n\n    @Override\n    public void run() {\n        log.info(this.getServiceName() + " service started");\n\n        while (!this.isStopped()) {\n            this.waitForRunning(waitInterval);\n            this.mqClientFactory.doRebalance();\n        }\n\n        log.info(this.getServiceName() + " service end");\n    }\n\n    @Override\n    public String getServiceName() {\n        return RebalanceService.class.getSimpleName();\n    }\n}\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"RebalanceService")," \u662f\u4e00\u4e2a\u670d\u52a1\u7ebf\u7a0b\uff0c\u7ee7\u627f\u4e86ServiceThread\uff0c\u8c03\u7528start\u65b9\u6cd5\u6700\u7ec8\u662f\u6267\u884c ",(0,a.kt)("strong",{parentName:"p"},"RebalanceService.run")," \u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Override\n    public void run() {\n        log.info(this.getServiceName() + " service started");\n\n        while (!this.isStopped()) {\n            this.waitForRunning(waitInterval);\n            //\u8d1f\u8f7d\u5904\u7406\n            this.mqClientFactory.doRebalance();\n        }\n\n        log.info(this.getServiceName() + " service end");\n    }\n')),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("strong",{parentName:"p"},"RebalanceService.run")," \u65b9\u6cd5\u4e2d\u4e3b\u8981\u901a\u8fc7 ",(0,a.kt)("strong",{parentName:"p"},"MQClientInstance.doRebalance")," \u6765\u5b9e\u73b0\u6d88\u8d39\u8005\u7684\u8d1f\u8f7d\u5747\u8861\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    public void doRebalance() {\n        for (Map.Entry<String, MQConsumerInner> entry : this.consumerTable.entrySet()) {\n            MQConsumerInner impl = entry.getValue();\n            if (impl != null) {\n                try {\n                    impl.doRebalance();\n                } catch (Throwable e) {\n                    log.error("doRebalance exception", e);\n                }\n            }\n        }\n    }\n')),(0,a.kt)("p",null,"\u901a\u8fc7\u4ece\u6d88\u8d39\u5217\u8868 ",(0,a.kt)("strong",{parentName:"p"},"consumerTable\u4e2d")," \u4e2d\u83b7\u53d6\u4fdd\u5b58\u7684  ",(0,a.kt)("strong",{parentName:"p"},"MQConsumerInner"),"  \u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},"MQConsumerInner.doRebalance")," \u65b9\u6cd5\u3002\u90a3\u4e48 ",(0,a.kt)("strong",{parentName:"p"},"consumerTable")," \u4e2d\u4fdd\u5b58\u7684\u662f\u4ec0\u4e48\uff1f\u4ec0\u4e48\u65f6\u5019\u4fdd\u5b58\u7684\u3002\u5728 DefaultMQPushConsumerImpl.start\u65b9\u6cd5\u4e2d\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this);\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u5c31\u662f\u5f80consumerTable\u4e2d\u6ce8\u5165\u6d88\u8d39\u8005\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public boolean registerConsumer(final String group, final MQConsumerInner consumer) {\n        if (null == group || null == consumer) {\n            return false;\n        }\n\n        MQConsumerInner prev = this.consumerTable.putIfAbsent(group, consumer);\n        if (prev != null) {\n            log.warn("the consumer group[" + group + "] exist already.");\n            return false;\n        }\n\n        return true;\n    }\n')),(0,a.kt)("p",null,"\u6240\u4ee5consumerTable\u4e2d\u4fdd\u5b58\u7684\u662f\u6d88\u8d39\u7ec4\u548c\u6d88\u8d39\u8005\u7684\u5173\u7cfb\uff0cconsumerTable\u4e2d\u7684value\u4e3aDefaultMQPushConsumerImpl\u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u8be5\u7c7b\u5b9e\u73b0\u4e86MQConsumerInner\u63a5\u53e3\u3002\n\u90a3\u4e48\u5728 ",(0,a.kt)("strong",{parentName:"p"},"MQClientInstance.doRebalance")," \u65b9\u6cd5\u4e2d\u8c03\u7528\u7684 ",(0,a.kt)("strong",{parentName:"p"},"MQConsumerInner. doRebalance")," \u65b9\u6cd5\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f ",(0,a.kt)("strong",{parentName:"p"},"DefaultMQPushConsumerImpl.doRebalance")," \u65b9\u6cd5\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},"DefaultMQPushConsumerImpl.doRebalance")," \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    @Override\n    public void doRebalance() {\n        if (!this.pause) {\n            //\u53c2\u6570\u4e3a\u662f\u5426\u4e3a\u987a\u5e8f\u6d88\u8d39\n            this.rebalanceImpl.doRebalance(this.isConsumeOrderly());\n        }\n    }\n")),(0,a.kt)("p",null,"\u6700\u7ec8\u7684\u8d1f\u8f7d\u5747\u8861\u662f\u7531 ",(0,a.kt)("strong",{parentName:"p"},"RebalanceImpl")," \u7684\u5b9e\u73b0\u7c7b ",(0,a.kt)("strong",{parentName:"p"},"RebalancePushImpl")," \u6765\u5904\u7406\u3002\u5148\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},"RebalanceImpl.doRebalance")," \u8fd9\u4e2a\u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    public void doRebalance(final boolean isOrder) {\n        //\u83b7\u53d6topic\u548c\u8ba2\u9605\u5173\u7cfb--\u4e4b\u524d\u5728\u542f\u52a8\u65f6\u5019\u6709copy\n        Map<String, SubscriptionData> subTable = this.getSubscriptionInner();\n        if (subTable != null) {\n            for (final Map.Entry<String, SubscriptionData> entry : subTable.entrySet()) {\n                final String topic = entry.getKey();\n                try {\n                    //\u6309topic\u6765\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\n                    this.rebalanceByTopic(topic, isOrder);\n                } catch (Throwable e) {\n                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n                        log.warn("rebalanceByTopic Exception", e);\n                    }\n                }\n            }\n        }\n\n        this.truncateMessageQueueNotMyTopic();\n    }\n')),(0,a.kt)("p",null,"\u901a\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},"RebalanceImpl.rebalanceByTopic")," \u79c1\u6709\u65b9\u6cd5\u6765\u5904\u7406Topic\u7684\u6d88\u8d39\u7684\u8d1f\u8f7d\u5747\u8861\u95ee\u9898\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e86\u4e24\u5927\u7c7b\u5904\u7406"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5e7f\u64ad\u6d88\u8d39")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'        switch (messageModel) {\n            case BROADCASTING: {\n                Set<MessageQueue> mqSet = this.topicSubscribeInfoTable.get(topic);\n                if (mqSet != null) {\n                    boolean changed = this.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);\n                    if (changed) {\n                        this.messageQueueChanged(topic, mqSet, mqSet);\n                        log.info("messageQueueChanged {} {} {} {}",\n                            consumerGroup,\n                            topic,\n                            mqSet,\n                            mqSet);\n                    }\n                } else {\n                    log.warn("doRebalance, {}, but the topic[{}] not exist.", consumerGroup, topic);\n                }\n                break;\n            }\n')),(0,a.kt)("p",null,"\u5e7f\u64ad\u6d88\u8d39\u6682\u65f6\u4e0d\u5206\u6790"),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\u96c6\u7fa4\u6d88\u8d39")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'            case CLUSTERING: {\n                //\u6839\u636etopic\u83b7\u53d6\u8ba2\u9605\u6d88\u606f\u961f\u5217\n                Set<MessageQueue> mqSet = this.topicSubscribeInfoTable.get(topic);\n                //\u83b7\u53d6\u6d88\u8d39\u8005ID\u5217\u8868\n                List<String> cidAll = this.mQClientFactory.findConsumerIdList(topic, consumerGroup);\n                if (null == mqSet) {\n                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n                        log.warn("doRebalance, {}, but the topic[{}] not exist.", consumerGroup, topic);\n                    }\n                }\n\n                if (null == cidAll) {\n                    log.warn("doRebalance, {} {}, get consumer id list failed", consumerGroup, topic);\n                }\n\n                if (mqSet != null && cidAll != null) {\n                    List<MessageQueue> mqAll = new ArrayList<MessageQueue>();\n                    mqAll.addAll(mqSet);\n\n                    Collections.sort(mqAll);\n                    Collections.sort(cidAll);\n                    //\u5206\u914d\u6d88\u606f\u961f\u5217\u7684\u7b56\u7565\n                    AllocateMessageQueueStrategy strategy = this.allocateMessageQueueStrategy;\n\n                    List<MessageQueue> allocateResult = null;\n                    try {\n                        allocateResult = strategy.allocate(\n                            this.consumerGroup,\n                            this.mQClientFactory.getClientId(),\n                            mqAll,\n                            cidAll);\n                    } catch (Throwable e) {\n                        log.error("AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName={}", strategy.getName(),\n                            e);\n                        return;\n                    }\n\n                    Set<MessageQueue> allocateResultSet = new HashSet<MessageQueue>();\n                    if (allocateResult != null) {\n                        allocateResultSet.addAll(allocateResult);\n                    }\n                    //\u66f4\u65b0\u5904\u7406\u961f\u5217\n                    boolean changed = this.updateProcessQueueTableInRebalance(topic, allocateResultSet, isOrder);\n                    if (changed) {\n                        log.info(\n                            "rebalanced result changed. allocateMessageQueueStrategyName={}, group={}, topic={}, clientId={}, mqAllSize={}, cidAllSize={}, rebalanceResultSize={}, rebalanceResultSet={}",\n                            strategy.getName(), consumerGroup, topic, this.mQClientFactory.getClientId(), mqSet.size(), cidAll.size(),\n                            allocateResultSet.size(), allocateResultSet);\n                        this.messageQueueChanged(topic, mqSet, allocateResultSet);\n                    }\n                }\n                break;\n            }\n')),(0,a.kt)("p",null,"\u901a\u8fc7 ",(0,a.kt)("strong",{parentName:"p"},"RebalanceImpl.updateProcessQueueTableInRebalance")," \u5904\u7406\u6d88\u606f\u961f\u5217\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private boolean updateProcessQueueTableInRebalance(final String topic, final Set<MessageQueue> mqSet,\n        final boolean isOrder) {\n            \n        List<PullRequest> pullRequestList = new ArrayList<PullRequest>();\n        //\u5c06MessageQueue\u53d8\u6210PullRequest\n        for (MessageQueue mq : mqSet) {\n            if (!this.processQueueTable.containsKey(mq)) {\n                if (isOrder && !this.lock(mq)) {\n                    log.warn("doRebalance, {}, add a new mq failed, {}, because lock failed", consumerGroup, mq);\n                    continue;\n                }\n\n                this.removeDirtyOffset(mq);\n                ProcessQueue pq = new ProcessQueue();\n                long nextOffset = this.computePullFromWhere(mq);\n                if (nextOffset >= 0) {\n                    ProcessQueue pre = this.processQueueTable.putIfAbsent(mq, pq);\n                    if (pre != null) {\n                        log.info("doRebalance, {}, mq already exists, {}", consumerGroup, mq);\n                    } else {\n                        log.info("doRebalance, {}, add a new mq, {}", consumerGroup, mq);\n                        PullRequest pullRequest = new PullRequest();\n                        pullRequest.setConsumerGroup(consumerGroup);\n                        pullRequest.setNextOffset(nextOffset);\n                        pullRequest.setMessageQueue(mq);\n                        pullRequest.setProcessQueue(pq);\n                        pullRequestList.add(pullRequest);\n                        changed = true;\n                    }\n                } else {\n                    log.warn("doRebalance, {}, add new mq failed, {}", consumerGroup, mq);\n                }\n            }\n        }\n        \n        //\u5206\u6d3ePullRequest\n        this.dispatchPullRequest(pullRequestList);\n\n        return changed;\n            \n            \n}\n')),(0,a.kt)("p",null,"\u901a\u8fc7 ",(0,a.kt)("strong",{parentName:"p"},"RebalanceImpl.dispatchPullRequest")," \u6765\u5904\u7406\u3002\u5728RebalanceImpl\u4e2d\u65b9\u6cd5dispatchPullRequest\u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u3002\u5177\u4f53\u5b9e\u73b0\u770bRebalanceImpl\u7684\u5b9e\u73b0\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0bRebalancePushImpl.dispatchPullRequest"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Override\n    public void dispatchPullRequest(List<PullRequest> pullRequestList) {\n        for (PullRequest pullRequest : pullRequestList) {\n            this.defaultMQPushConsumerImpl.executePullRequestImmediately(pullRequest);\n            log.info("doRebalance, {}, add a new pull request {}", consumerGroup, pullRequest);\n        }\n    }\n')),(0,a.kt)("p",null,"\u7136\u540e\u901a\u8fc7 ",(0,a.kt)("strong",{parentName:"p"},"DefaultMQPushConsumerImpl.executePullRequestImmediately")," \u6765\u5904\u7406PullRequest\u6570\u636e\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void executePullRequestImmediately(final PullRequest pullRequest) {\n    this.mQClientFactory.getPullMessageService().executePullRequestImmediately(pullRequest);\n}\n")),(0,a.kt)("p",null,"\u901a\u8fc7\u83b7\u53d6 ",(0,a.kt)("strong",{parentName:"p"},"MQClientInstance")," \u5b9e\u4f8b\u4e2d\u7684 ",(0,a.kt)("strong",{parentName:"p"},"PullMessageService")," \u6d88\u606f\u62c9\u53d6\u670d\u52a1(\u7ebf\u7a0b)\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},"PullMessageService.executePullRequestImmediately")," \u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public void executePullRequestImmediately(final PullRequest pullRequest) {\n        try {\n            this.pullRequestQueue.put(pullRequest);\n        } catch (InterruptedException e) {\n            log.error("executePullRequestImmediately pullRequestQueue.put", e);\n        }\n    }\n')),(0,a.kt)("p",null,"\u5c06 ",(0,a.kt)("strong",{parentName:"p"},"PullRequest")," \u8bf7\u6c42\u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\u3002\u7136\u540e\u901a\u8fc7\u83b7\u53d6\u961f\u5217\u4e2d\u7684PullRequest\u6765\u62c9\u53d6Broker\u4e2d\u7684Message\u3002\u5728 ",(0,a.kt)("strong",{parentName:"p"},"PullMessageService.run")," \u65b9\u6cd5\u4e2d\u83b7\u53d6\u961f\u5217\u4e2d\u7684PullRequest\u6765\u8fdb\u884c\u5904\u7406\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    @Override\n    public void run() {\n        log.info(this.getServiceName() + " service started");\n\n        while (!this.isStopped()) {\n            try {\n                //\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u6570\u636e\n                PullRequest pullRequest = this.pullRequestQueue.take();\n                //\u5904\u7406\u6570\u636e\n                this.pullMessage(pullRequest);\n            } catch (InterruptedException ignored) {\n            } catch (Exception e) {\n                log.error("Pull Message Service Run Method exception", e);\n            }\n        }\n\n        log.info(this.getServiceName() + " service end");\n    }\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"PullMessageService\u7684\u670d\u52a1\u542f\u52a8\u5728MQClientInstance\u7c7b\u7684start\u65b9\u6cd5\u4e2d\u542f\u52a8")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"PullMessageService.pullMessage")," \u65b9\u6cd5\u4e2d\u7684\u5904\u7406\u903b\u8f91\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    private void pullMessage(final PullRequest pullRequest) {\n        //\u83b7\u53d6DefaultMQPushConsumerImpl\u5b9e\u4f8b\u6839\u636e\u6d88\u8d39\u7ec4\n        final MQConsumerInner consumer = this.mQClientFactory.selectConsumer(pullRequest.getConsumerGroup());\n        if (consumer != null) {\n            DefaultMQPushConsumerImpl impl = (DefaultMQPushConsumerImpl) consumer;\n            //\u62c9\u53d6\u6d88\u606f\n            impl.pullMessage(pullRequest);\n        } else {\n            log.warn("No matched consumer for the PullRequest {}, drop it", pullRequest);\n        }\n    }\n')),(0,a.kt)("p",null,"\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},"DefaultMQPushConsumerImpl.pullMessage")," \u662f\u5982\u4f55\u5904\u7406\u62c9\u53d6\u6d88\u606f\u8bf7\u6c42\u7684\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u7684\u4ee3\u7801\u6709\u70b9\u591a\uff0c\u8fd9\u91cc\u5206\u5f00\u6765\u8fdb\u884c\u5206\u6790\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'        final ProcessQueue processQueue = pullRequest.getProcessQueue();\n        if (processQueue.isDropped()) {\n            log.info("the pull request[{}] is dropped.", pullRequest.toString());\n            return;\n        }\n\n        pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());\n')),(0,a.kt)("p",null,"\u4e0a\u9762\u4ee3\u7801\u4e3b\u8981\u662f\u5224\u65ad\u5904\u7406\u961f\u5217\u7684 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ProcessQueue"))," \u4e00\u4e9b\u72b6\u6001\uff0c\u7136\u540e\u5c31\u662f\u5224\u65ad ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"DefaultMQPushConsumerImpl"))," \u7684\u72b6\u6001\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'        try {\n            //\u72b6\u6001\u662f\u5426\u4e3aServiceState.RUNNING\n            this.makeSureStateOK();\n        } catch (MQClientException e) {\n            log.warn("pullMessage exception, consumer state not ok", e);\n            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);\n            return;\n        }\n\n        if (this.isPause()) {\n            log.warn("consumer was paused, execute pull request later. instanceName={}, group={}", this.defaultMQPushConsumer.getInstanceName(), this.defaultMQPushConsumer.getConsumerGroup());\n            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);\n            return;\n        }\n')),(0,a.kt)("p",null,"\u7136\u540e\u5c31\u662f\u4e00\u4e9b\u9650\u6d41\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u5305\u62ec\u4e00\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4ece\u6d88\u606f\u7684\u6761\u6570\u8fdb\u884c\u9650\u6d41\uff08\u5927\u4e8e1000\u6761\uff09"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'        if (cachedMessageCount > this.defaultMQPushConsumer.getPullThresholdForQueue()) {\n            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n            if ((queueFlowControlTimes++ % 1000) == 0) {\n                log.warn(\n                    "the cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",\n                    this.defaultMQPushConsumer.getPullThresholdForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);\n            }\n            return;\n        }\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4ece\u7f13\u5b58\u6d88\u606f\u7684\u5927\u5c0f(\u5927\u4e8e100M)"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'        if (cachedMessageSizeInMiB > this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) {\n            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n            if ((queueFlowControlTimes++ % 1000) == 0) {\n                log.warn(\n                    "the cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",\n                    this.defaultMQPushConsumer.getPullThresholdSizeForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);\n            }\n    \n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u975e\u987a\u5e8f\u6d88\u606f\u7684\u8de8\u5ea6(\u4e0d\u80fd\u5927\u4e8e2000)"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'if (!this.consumeOrderly) {\n            if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {\n                //\u5ef6\u8fdf50\u6beb\u79d2\u6d88\u8d39\n                this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n                if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {\n                    log.warn(\n                        "the queue\'s messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, pullRequest={}, flowControlTimes={}",\n                        processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),\n                        pullRequest, queueMaxSpanFlowControlTimes);\n                }\n                return;\n            }\n        } else {\n            if (processQueue.isLocked()) {\n                if (!pullRequest.isLockedFirst()) {\n                    final long offset = this.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());\n                    boolean brokerBusy = offset < pullRequest.getNextOffset();\n                    log.info("the first time to pull message, so fix offset from broker. pullRequest: {} NewOffset: {} brokerBusy: {}",\n                        pullRequest, offset, brokerBusy);\n                    if (brokerBusy) {\n                        log.info("[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: {} NewOffset: {}",\n                            pullRequest, offset);\n                    }\n\n                    pullRequest.setLockedFirst(true);\n                    pullRequest.setNextOffset(offset);\n                }\n            } else {\n                this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);\n                log.info("pull message later because not locked in broker, {}", pullRequest);\n                return;\n            }\n        }\n')))),(0,a.kt)("p",null,"\u7136\u540e\u83b7\u53d6topic\u7684\u8ba2\u9605\u5173\u7cfb\u6570\u636eSubscriptionData\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'final SubscriptionData subscriptionData = this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\n        if (null == subscriptionData) {\n            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);\n            log.warn("find the consumer\'s subscription failed, {}", pullRequest);\n            return;\n        }\n')),(0,a.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"PullCallback"))," \u5bf9\u8c61\uff0c\u7528\u4e8e\u56de\u8c03\u8fd9\u4e2a\u56de\u5230\u51fd\u6570\u7684\u521b\u5efa\u4f1a\u5728\u8c03\u7528\u7684\u5730\u65b9\u8fdb\u884c\u5206\u6790\u3002\u7136\u540e\u6839\u636e\u6d88\u8d39\u6a21\u5f0f\u662f\u5426\u4e3a\u96c6\u7fa4\u6d88\u8d39\uff08CLUSTERING\uff09\u83b7\u53d6\u6d88\u8d39\u7684\u504f\u79fb\u91cf\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," boolean commitOffsetEnable = false;\n        long commitOffsetValue = 0L;\n        if (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) {\n            commitOffsetValue = this.offsetStore.readOffset(pullRequest.getMessageQueue(), ReadOffsetType.READ_FROM_MEMORY);\n            if (commitOffsetValue > 0) {\n                commitOffsetEnable = true;\n            }\n        }\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u90fd\u662f\u5904\u7406\u548c\u504f\u79fb\u91cf\u76f8\u5173\u7684\u6570\u636e\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"String subExpression = null;\n        boolean classFilter = false;\n        SubscriptionData sd = this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\n        if (sd != null) {\n            if (this.defaultMQPushConsumer.isPostSubscriptionWhenPull() && !sd.isClassFilterMode()) {\n                subExpression = sd.getSubString();\n            }\n\n            classFilter = sd.isClassFilterMode();\n        }\n        //\u540c\u6b65\u6807\u8bb0\n        int sysFlag = PullSysFlag.buildSysFlag(\n            commitOffsetEnable, // commitOffset\n            true, // suspend\n            subExpression != null, // subscription\n            classFilter // class filter\n        );\n")),(0,a.kt)("p",null,"\u7136\u540e\u901a\u8fc7 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"PullAPIWrapper.pullKernelImpl"))," \u62c9\u53bb\u6d88\u606f\u8fdb\u884c\u6d88\u8d39\u3002\u63a5\u7740\u5c31\u6765\u5206\u6790\u5f53\u524d\u8fd9\u4e2a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public PullResult pullKernelImpl(\n        final MessageQueue mq,\n        final String subExpression,\n        final String expressionType,\n        final long subVersion,\n        final long offset,\n        final int maxNums,\n        final int sysFlag,\n        final long commitOffset,\n        final long brokerSuspendMaxTimeMillis,\n        final long timeoutMillis,\n        final CommunicationMode communicationMode,  // CommunicationMode.ASYNC\n        final PullCallback pullCallback\n    ) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {\n        FindBrokerResult findBrokerResult =\n            this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),\n                this.recalculatePullFromWhichNode(mq), false);\n        if (null == findBrokerResult) {\n            this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());\n            findBrokerResult =\n                this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),\n                    this.recalculatePullFromWhichNode(mq), false);\n        }\n\n        if (findBrokerResult != null) {\n            {\n                // check version\n                if (!ExpressionType.isTagType(expressionType)\n                    && findBrokerResult.getBrokerVersion() < MQVersion.Version.V4_1_0_SNAPSHOT.ordinal()) {\n                    throw new MQClientException("The broker[" + mq.getBrokerName() + ", "\n                        + findBrokerResult.getBrokerVersion() + "] does not upgrade to support for filter message by " + expressionType, null);\n                }\n            }\n            int sysFlagInner = sysFlag;\n\n            if (findBrokerResult.isSlave()) {\n                sysFlagInner = PullSysFlag.clearCommitOffsetFlag(sysFlagInner);\n            }\n            \n            //\u7ec4\u88c5\u8bf7\u6c42\u53c2\u6570\n            PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();\n            requestHeader.setConsumerGroup(this.consumerGroup);\n            requestHeader.setTopic(mq.getTopic());\n            requestHeader.setQueueId(mq.getQueueId());\n            requestHeader.setQueueOffset(offset);\n            requestHeader.setMaxMsgNums(maxNums);\n            requestHeader.setSysFlag(sysFlagInner);\n            requestHeader.setCommitOffset(commitOffset);\n            requestHeader.setSuspendTimeoutMillis(brokerSuspendMaxTimeMillis);\n            requestHeader.setSubscription(subExpression);\n            requestHeader.setSubVersion(subVersion);\n            requestHeader.setExpressionType(expressionType);\n\n            String brokerAddr = findBrokerResult.getBrokerAddr();\n            if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {\n                brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);\n            }\n            \n            //\u62c9\u53d6\u6d88\u606f\n            PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(\n                brokerAddr,\n                requestHeader,\n                timeoutMillis,\n                communicationMode,\n                pullCallback);\n\n            return pullResult;\n        }\n\n        throw new MQClientException("The broker[" + mq.getBrokerName() + "] not exist", null);\n    }\n')),(0,a.kt)("p",null,"\u7136\u540e\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"MQClientAPIImpl.pullMessage"))," \u65b9\u6cd5\u83b7\u53d6\u6570\u636e:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public PullResult pullMessage(\n        final String addr,\n        final PullMessageRequestHeader requestHeader,\n        final long timeoutMillis,\n        final CommunicationMode communicationMode,\n        final PullCallback pullCallback\n    ) throws RemotingException, MQBrokerException, InterruptedException {\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);\n\n        switch (communicationMode) {\n            case ONEWAY:\n                assert false;\n                return null;\n            case ASYNC:\n                this.pullMessageAsync(addr, request, timeoutMillis, pullCallback);\n                return null;\n            case SYNC:\n                return this.pullMessageSync(addr, request, timeoutMillis);\n            default:\n                assert false;\n                break;\n        }\n\n        return null;\n    }\n")),(0,a.kt)("p",null,"\u9ed8\u8ba4\u83b7\u53d6\u6d88\u606f\u662f\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u6570\u636e\u3002"),(0,a.kt)("h3",{id:"4-\u5206\u914d\u6d88\u606f\u961f\u5217\u7b56\u7565"},"4. \u5206\u914d\u6d88\u606f\u961f\u5217\u7b56\u7565"),(0,a.kt)("p",null,"RocketMQ\u5b9a\u4e49\u4e86\u7b56\u7565\u63a5\u53e3",(0,a.kt)("inlineCode",{parentName:"p"},"AllocateMessageQueueStrategy"),"\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"\u6d88\u8d39\u8005\u5206\u7ec4"),",\u548c",(0,a.kt)("inlineCode",{parentName:"p"},"\u6d88\u606f\u961f\u5217\u5217\u8868"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"\u6d88\u8d39\u8005\u5217\u8868"),"\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"\u5f53\u524d\u6d88\u8d39\u8005"),"\u5e94\u5f53\u88ab\u5206\u914d\u5230\u54ea\u4e9b",(0,a.kt)("inlineCode",{parentName:"p"},"queue\u961f\u5217"),"\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"//\u6d88\u606f\u961f\u5217\u5206\u914d\u7b56\u7565\u63a5\u53e3\npublic interface AllocateMessageQueueStrategy {\n\n    /**\n     * Allocating by consumer id\n     *\n     * @param consumerGroup \u5f53\u524d\u6d88\u8d39\u7ec4\n     * @param currentCID \u5f53\u524d\u6d88\u8d39ID\n     * @param mqAll \u5f53\u524dTopic\u7684\u6240\u6709\u6d88\u606f\u961f\u5217\n     * @param cidAll consumer\u7fa4\u7ec4\u4e0b\u6240\u6709\u7684consumer id set\u96c6\u5408\n     * @return \u6839\u636e\u7b56\u7565\u7ed9\u5f53\u524dconsumer\u5206\u914d\u7684queue\u5217\u8868\n     */\n    List<MessageQueue> allocate(\n        final String consumerGroup,\n        final String currentCID,\n        final List<MessageQueue> mqAll,\n        final List<String> cidAll\n    );\n\n    /**\n     * \u7b97\u6cd5\u540d\u79f0\n     *\n     * @return \u8fd4\u56de\u7b56\u7565\u540d\u79f0\n     */\n    String getName();\n}\n\n")),(0,a.kt)("p",null,"\u5b9e\u73b0\u7ee7\u627f\u56fe\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/MQ/RocketMQ/AllocateMessageQueueStrategy.png?raw=true",alt:null})),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"\u7b97\u6cd5\u540d\u79f0"),(0,a.kt)("th",{parentName:"tr",align:"left"},"\u542b\u4e49"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMessageQueueAveragely"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u5e73\u5747\u5206\u914d\u7b97\u6cd5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMessageQueueAveragelyByCircle"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u57fa\u4e8e\u73af\u5f62\u5e73\u5747\u5206\u914d\u7b97\u6cd5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMachineRoomNearby"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u57fa\u4e8e\u673a\u623f\u4e34\u8fd1\u539f\u5219\u7b97\u6cd5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMessageQueueByMachineRoom"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u57fa\u4e8e\u673a\u623f\u5206\u914d\u7b97\u6cd5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMessageQueueConsistentHash"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u57fa\u4e8e\u4e00\u81f4\u6027hash\u7b97\u6cd5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AllocateMessageQueueByConfig"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u57fa\u4e8e\u914d\u7f6e\u5206\u914d\u7b97\u6cd5")))),(0,a.kt)("h4",{id:"allocatemessagequeueaveragely-\u5e73\u5747\u5206\u914d\u7b97\u6cd5"},"AllocateMessageQueueAveragely-\u5e73\u5747\u5206\u914d\u7b97\u6cd5"),(0,a.kt)("p",null,"\u8fd9\u91cc\u6240\u8c13\u7684\u5e73\u5747\u5206\u914d\u7b97\u6cd5\uff0c\u5e76\u4e0d\u662f\u6307\u7684\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u5b8c\u5168\u5e73\u5747\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c10\u4e2aqueue\uff0c\u800c\u6d88\u8d39\u8005\u53ea\u67094\u4e2a\uff0c\u65e0\u6cd5\u662f\u6574\u9664\u5173\u7cfb\uff0c\u9664\u4e86\u6574\u9664\u4e4b\u5916\u7684\u591a\u51fa\u6765\u7684queue,\u5c06\u4f9d\u6b21\u6839\u636e\u6d88\u8d39\u8005\u7684\u987a\u5e8f\u5747\u644a\u3002 \u6309\u7167\u4e0a\u8ff0\u4f8b\u5b50\u6765\u770b\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"10/4=2"),"\uff0c\u5373\u8868\u793a\u6bcf\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"\u6d88\u8d39\u8005"),"\u5e73\u5747\u5747\u644a2\u4e2aqueue\uff1b\u800c",(0,a.kt)("inlineCode",{parentName:"p"},"10%4=2"),"\uff0c\u5373\u9664\u4e86\u5747\u644a\u4e4b\u5916\uff0c\u591a\u51fa\u67652\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"queue"),"\u8fd8\u6ca1\u6709\u5206\u914d\uff0c\u90a3\u4e48\uff0c\u6839\u636e\u6d88\u8d39\u8005\u7684\u987a\u5e8f",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-1"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-2"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-3"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-4"),",\u5219\u591a\u51fa\u6765\u76842\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"queue"),"\u5c06\u5206\u522b\u7ed9",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-1"),"\u548c",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-2"),"\u3002\u6700\u7ec8\uff0c\u5206\u644a\u5173\u7cfb\u5982\u4e0b\uff1a ",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-1"),":",(0,a.kt)("inlineCode",{parentName:"p"},"3\u4e2a"),";",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-2"),":",(0,a.kt)("inlineCode",{parentName:"p"},"3\u4e2a"),";",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-3"),":",(0,a.kt)("inlineCode",{parentName:"p"},"2\u4e2a"),";",(0,a.kt)("inlineCode",{parentName:"p"},"consumer-4"),":",(0,a.kt)("inlineCode",{parentName:"p"},"2\u4e2a"),",\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/MQ/RocketMQ/%E5%B9%B3%E5%9D%87%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95.png?raw=true",alt:null})),(0,a.kt)("p",null,"\u770b\u4e00\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package org.apache.rocketmq.client.consumer.rebalance;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\n/**\n * Average Hashing queue algorithm\n */\npublic class AllocateMessageQueueAveragely implements AllocateMessageQueueStrategy {\n    private final InternalLogger log = ClientLogger.getLog();\n\n    @Override\n    public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,\n        List<String> cidAll) {\n\n        //\u5e38\u89c4\u6570\u636e\u6821\u9a8c\n        if (currentCID == null || currentCID.length() < 1) {\n            throw new IllegalArgumentException("currentCID is empty");\n        }\n        if (mqAll == null || mqAll.isEmpty()) {\n            throw new IllegalArgumentException("mqAll is null or mqAll empty");\n        }\n        if (cidAll == null || cidAll.isEmpty()) {\n            throw new IllegalArgumentException("cidAll is null or cidAll empty");\n        }\n\n        List<MessageQueue> result = new ArrayList<MessageQueue>();\n        if (!cidAll.contains(currentCID)) {\n            log.info("[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}",\n                consumerGroup,\n                currentCID,\n                cidAll);\n            return result;\n        }\n\n        int index = cidAll.indexOf(currentCID);\n        int mod = mqAll.size() % cidAll.size();\n        int averageSize =\n            mqAll.size() <= cidAll.size() ? 1 : (mod > 0 && index < mod ? mqAll.size() / cidAll.size()\n                + 1 : mqAll.size() / cidAll.size());\n        int startIndex = (mod > 0 && index < mod) ? index * averageSize : index * averageSize + mod;\n        int range = Math.min(averageSize, mqAll.size() - startIndex);\n        for (int i = 0; i < range; i++) {\n            result.add(mqAll.get((startIndex + i) % mqAll.size()));\n        }\n        return result;\n    }\n\n    @Override\n    public String getName() {\n        return "AVG";\n    }\n}\n')),(0,a.kt)("h4",{id:"allocatemessagequeueaveragelybycircle--\u57fa\u4e8e\u73af\u5f62\u5e73\u5747\u7b97\u6cd5"},"AllocateMessageQueueAveragelyByCircle -\u57fa\u4e8e\u73af\u5f62\u5e73\u5747\u7b97\u6cd5"),(0,a.kt)("p",null,"\u73af\u5f62\u5e73\u5747\u7b97\u6cd5\uff0c\u662f\u6307\u6839\u636e\u6d88\u8d39\u8005\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u5728\u7531",(0,a.kt)("inlineCode",{parentName:"p"},"queue\u961f\u5217"),"\u7ec4\u6210\u7684\u73af\u5f62\u56fe\u4e2d\u9010\u4e2a\u5206\u914d\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\u6240\u793a:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/MQ/RocketMQ/%E5%9F%BA%E4%BA%8E%E7%8E%AF%E5%BD%A2%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95.png?raw=true",alt:null})),(0,a.kt)("p",null,"\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package org.apache.rocketmq.client.consumer.rebalance;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\n/**\n * Cycle average Hashing queue algorithm\n */\npublic class AllocateMessageQueueAveragelyByCircle implements AllocateMessageQueueStrategy {\n    private final InternalLogger log = ClientLogger.getLog();\n\n    @Override\n    public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,\n        List<String> cidAll) {\n        if (currentCID == null || currentCID.length() < 1) {\n            throw new IllegalArgumentException("currentCID is empty");\n        }\n        if (mqAll == null || mqAll.isEmpty()) {\n            throw new IllegalArgumentException("mqAll is null or mqAll empty");\n        }\n        if (cidAll == null || cidAll.isEmpty()) {\n            throw new IllegalArgumentException("cidAll is null or cidAll empty");\n        }\n\n        List<MessageQueue> result = new ArrayList<MessageQueue>();\n        if (!cidAll.contains(currentCID)) {\n            log.info("[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}",\n                consumerGroup,\n                currentCID,\n                cidAll);\n            return result;\n        }\n        \n        int index = cidAll.indexOf(currentCID);\n        for (int i = index; i < mqAll.size(); i++) {\n            if (i % cidAll.size() == index) {\n                result.add(mqAll.get(i));\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public String getName() {\n        return "AVG_BY_CIRCLE";\n    }\n}\n\n')),(0,a.kt)("h4",{id:"allocatemessagequeueconsistenthash-\u57fa\u4e8e\u4e00\u81f4\u6027hash\u7b97\u6cd5"},"AllocateMessageQueueConsistentHash-\u57fa\u4e8e\u4e00\u81f4\u6027hash\u7b97\u6cd5"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"\u4ec0\u4e48\u662f\u4e00\u81f4\u6027hash \u7b97\u6cd5")," ? \u4e00\u81f4\u6027hash\u7b97\u6cd5\u7528\u4e8e\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u800c\u63d0\u51fa\u7684\u4e00\u79cd\u57fa\u4e8ehash\u73af\u5b9e\u73b0\u7684\u7b97\u6cd5\uff0c\u9650\u4e8e\u6587\u7ae0\u7bc7\u5e45\uff0c\u4e0d\u5728\u8fd9\u91cc\u5c55\u5f00\u63cf\u8ff0\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u4e0b \u522b\u4eba\u7684\u535a\u6587\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/lpfuture/p/5796398.html"},"\u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5\u539f\u7406"))),(0,a.kt)("p",null,"\u770b\u4e00\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.client.consumer.rebalance;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.common.consistenthash.ConsistentHashRouter;\nimport org.apache.rocketmq.common.consistenthash.HashFunction;\nimport org.apache.rocketmq.common.consistenthash.Node;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\n/**\n * Consistent Hashing queue algorithm\n */\npublic class AllocateMessageQueueConsistentHash implements AllocateMessageQueueStrategy {\n    private final InternalLogger log = ClientLogger.getLog();\n\n    private final int virtualNodeCnt;\n    private final HashFunction customHashFunction;\n\n    public AllocateMessageQueueConsistentHash() {\n        this(10);\n    }\n\n    public AllocateMessageQueueConsistentHash(int virtualNodeCnt) {\n        this(virtualNodeCnt, null);\n    }\n\n    public AllocateMessageQueueConsistentHash(int virtualNodeCnt, HashFunction customHashFunction) {\n        if (virtualNodeCnt < 0) {\n            throw new IllegalArgumentException("illegal virtualNodeCnt :" + virtualNodeCnt);\n        }\n        this.virtualNodeCnt = virtualNodeCnt;\n        this.customHashFunction = customHashFunction;\n    }\n\n    @Override\n    public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,\n        List<String> cidAll) {\n\n        if (currentCID == null || currentCID.length() < 1) {\n            throw new IllegalArgumentException("currentCID is empty");\n        }\n        if (mqAll == null || mqAll.isEmpty()) {\n            throw new IllegalArgumentException("mqAll is null or mqAll empty");\n        }\n        if (cidAll == null || cidAll.isEmpty()) {\n            throw new IllegalArgumentException("cidAll is null or cidAll empty");\n        }\n\n        List<MessageQueue> result = new ArrayList<MessageQueue>();\n        if (!cidAll.contains(currentCID)) {\n            log.info("[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}",\n                consumerGroup,\n                currentCID,\n                cidAll);\n            return result;\n        }\n\n        Collection<ClientNode> cidNodes = new ArrayList<ClientNode>();\n        for (String cid : cidAll) {\n            cidNodes.add(new ClientNode(cid));\n        }\n\n        final ConsistentHashRouter<ClientNode> router; //for building hash ring\n        if (customHashFunction != null) {\n            router = new ConsistentHashRouter<ClientNode>(cidNodes, virtualNodeCnt, customHashFunction);\n        } else {\n            router = new ConsistentHashRouter<ClientNode>(cidNodes, virtualNodeCnt);\n        }\n\n        List<MessageQueue> results = new ArrayList<MessageQueue>();\n        for (MessageQueue mq : mqAll) {\n            ClientNode clientNode = router.routeNode(mq.toString());\n            if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n                results.add(mq);\n            }\n        }\n\n        return results;\n\n    }\n\n    @Override\n    public String getName() {\n        return "CONSISTENT_HASH";\n    }\n\n    private static class ClientNode implements Node {\n        private final String clientID;\n\n        public ClientNode(String clientID) {\n            this.clientID = clientID;\n        }\n\n        @Override\n        public String getKey() {\n            return clientID;\n        }\n    }\n\n}\n\n')),(0,a.kt)("p",null,"\u5176\u4ed6\u7684\u5c31\u4e0d\u5206\u6790\u4e86\u7528\u7684\u5c11\u3002\u9ed8\u8ba4\u4e3a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"AllocateMessageQueueAveragely"))))}m.isMDXComponent=!0}}]);