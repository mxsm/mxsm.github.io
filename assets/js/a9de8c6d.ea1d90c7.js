"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[9010],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},o=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),u=m(t),k=a,g=u["".concat(s,".").concat(k)]||u[k]||c[k]||i;return t?r.createElement(g,p(p({ref:n},o),{},{components:t})):r.createElement(g,p({ref:n},o))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,p=new Array(i);p[0]=k;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,p[1]=l;for(var m=2;m<i;m++)p[m]=t[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},4379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const i={title:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",linkTitle:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",sidebar_label:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",weight:202310151934,description:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528"},p=void 0,l={unversionedId:"rust/rust-learn/summary/pin",id:"rust/rust-learn/summary/pin",title:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",description:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",source:"@site/docs/rust/rust-learn/summary/03-pin.md",sourceDirName:"rust/rust-learn/summary",slug:"/rust/rust-learn/summary/pin",permalink:"/docs/rust/rust-learn/summary/pin",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/rust/rust-learn/summary/03-pin.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1706369272,formattedLastUpdatedAt:"Jan 27, 2024",sidebarPosition:3,frontMatter:{title:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",linkTitle:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",sidebar_label:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528",weight:202310151934,description:"Rust Pin\u673a\u5236\u548c\u4f5c\u7528"},sidebar:"rustLearn",previous:{title:"Rust ref \u548c & \u4f7f\u7528\u8be6\u89e3",permalink:"/docs/rust/rust-learn/summary/ref-useage-explantion"}},s={},m=[{value:"1. Pin\u7684\u7279\u70b9",id:"1-pin\u7684\u7279\u70b9",level:2}],o={toc:m},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u5728\u5b66\u4e60Rust\u5f02\u6b65\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2a\u6bd4\u8f83\u7279\u522b\u7684\u667a\u80fd\u6307\u9488 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Pin"))," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Future {\n    type Output;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n}\n")),(0,a.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u667a\u80fd\u6307\u9488\u7684\u4f5c\u7528\u3002"),(0,a.kt)("h2",{id:"1-pin\u7684\u7279\u70b9"},"1. Pin\u7684\u7279\u70b9"),(0,a.kt)("p",null,"\u901a\u8fc7\u5bf9Pin\u6307\u9488\u7684\u6e90\u7801\u9605\u8bfb\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u6765Pin\u7684\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Pin","<","P>")," \u6cdb\u578b\u6570\u636e\u7ed3\u6784P\u5fc5\u987b\u662f\u6307\u9488(\u667a\u80fd\u6307\u9488\u548c\u666e\u901a\u6307\u9488)\uff0c\u51c6\u786e\u7684\u6765\u8bf4\u662f\u5fc5\u987b\u5b9e\u73b0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Deref trait"))," \u7684\u5bf9\u8c61\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl<P: Deref> Pin<P> {/*\u7701\u7565\u4ee3\u7801*/}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Pin")," \u4e5f\u662f\u667a\u80fd\u6307\u9488"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[stable(feature = "pin", since = "1.33.0")]\nimpl<P: Deref> Deref for Pin<P> {\n    type Target = P::Target;\n    fn deref(&self) -> &P::Target {\n        Pin::get_ref(Pin::as_ref(self))\n    }\n}\n\n#[stable(feature = "pin", since = "1.33.0")]\nimpl<P: DerefMut<Target: Unpin>> DerefMut for Pin<P> {\n    fn deref_mut(&mut self) -> &mut P::Target {\n        Pin::get_mut(Pin::as_mut(self))\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7ed9\u5b9a ",(0,a.kt)("inlineCode",{parentName:"p"},"PinP<T>>")," \u7c7b\u578b\u7684\u6570\u636e\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u53ea\u8981 ",(0,a.kt)("inlineCode",{parentName:"strong"},"T")," \u4e0d\u6ee1\u8db3 Unpin trait"),"\uff0c\u5219 Safe Rust\uff08\u5373",(0,a.kt)("strong",{parentName:"p"},"\u4e0d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"strong"},"unsafe{}")," \u5757"),"\uff09\u4e0b\u65e0\u6cd5\u83b7\u5f97 ",(0,a.kt)("inlineCode",{parentName:"p"},"&mut T")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"T"),"\u3002\u6362\u8a00\u4e4b\uff0c\u8981\u60f3 ",(0,a.kt)("inlineCode",{parentName:"p"},"Pin")," \u6709\u5176\u6548\u679c\uff0c\u5219 ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," \u5fc5\u987b\u4e0d\u6ee1\u8db3 Unpin trait\u3002\u4e5f\u5c31\u662f\u4e0d\u80fd\u5b9e\u73b0Unpin\u3002trait\u4e3a\u51e0\u4e4e\u6240\u6709\u7c7b\u578b\u81ea\u52a8\u5b9e\u73b0\u3002"),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\u5bf9struct\u4f7f\u7528PhantomPinned\u6807\u8bb0\u6765\u963b\u6b62\u5b9e\u73b0Unpin trait")))),(0,a.kt)("p",null,"\u4e0b\u9762\u6765\u901a\u8fc7\u4ee3\u7801\u9a8c\u8bc1\u4e0a\u9762\u7684\u4e09\u70b9\u8bf4\u6cd5\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pin\u5305\u88f9\u7684P\u5fc5\u987b\u662f\u6307\u9488")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::pin::Pin;\n\n#[derive(Clone)]\nstruct Mxsm{\n    name:String\n}\n\nfn main() {\n       let mxsm = Mxsm{\n        name: "".to_string()\n    };\n    Pin::new(&mxsm); //\u666e\u901a\u6307\u9488\n    Pin::new(Box::new(mxsm.clone())); //\u667a\u80fd\u6307\u9488\n    let num = 32;\n    Pin::new(num); //\u7f16\u8bd1\u62a5\u9519\n}\n')),(0,a.kt)("p",null,"\u4e0a\u9762\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u6765\u666e\u901a\u6307\u9488\u548c\u667a\u80fd\u6307\u9488\u90fd\u662f\u53ef\u4ee5\u7684\u3002\u5982\u679c\u662f\u975e\u6307\u9488\u76f4\u63a5\u7f16\u8bd1\u62a5\u9519\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"C:%5CUsers%5Cljbmx%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231015223450119.png",alt:"image-20231015223450119"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pin\u662f\u667a\u80fd\u6307\u9488")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let mxsm1 = &*pin;\n")),(0,a.kt)("p",null,"\u4e0a\u9762\u4ee3\u7801\u8bf4\u660ePin\u662f\u667a\u80fd\u6307\u9488\u3002"),(0,a.kt)("p",null,"\u56e0\u4e3aUnpin\u8fd9\u4e2atrait\u51e0\u4e4e\u6240\u6709\u7684\u7c7b\u578b\u90fd\u81ea\u52a8\u5b9e\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u8ba9\u67d0\u4e2a\u7c7b\u578b\u4e0d\u5b9e\u73b0\uff0c\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u6807\u8bb0 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"PhantomPinned"))," \u6765\u963b\u6b62\u5b9e\u73b0\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'struct Mxsm{\n    name:String,\n    _mark: PhantomPinned //\u589e\u52a0\u6807\u8bb0\uff0c\u4e0d\u5b9e\u73b0Unpin trait\n}\n\nfn main() {\n    let mxsm = Mxsm{\n        name: "".to_string(),\n        _mark: PhantomPinned\n    };\n   Pin::new(Box::new(mxsm));\n}\n')),(0,a.kt)("p",null,"\u6b64\u65f6\u4e0a\u9762\u7684\u4ee3\u7801\u65e0\u6cd5\u7f16\u8bd1\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"C:%5CUsers%5Cljbmx%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231015225404208.png",alt:"image-20231015225404208"})),(0,a.kt)("p",null,"\u7f16\u8bd1\u5931\u8d25\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b",(0,a.kt)("strong",{parentName:"p"},"Pin::new")," \u7684\u5b9a\u4e49"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl<P: Deref<Target: Unpin>> Pin<P> {\n    pub const fn new(pointer: P) -> Pin<P> {\n        // SAFETY: the value pointed to is `Unpin`, and so has no requirements\n        // around pinning.\n        unsafe { Pin::new_unchecked(pointer) }\n    }\n    //\u7701\u7565\u90e8\u5206\u4ee3\u7801\n}\n")),(0,a.kt)("p",null,"\u7136\u540e\u770b\u4e00\u4e0b\u6cdb\u578bP\u7684\u7ea6\u675f\u6761\u4ef6\uff1aP\u5b9e\u73b0\u4e86Deref trait\u5e76\u4e14\uff0c ",(0,a.kt)("strong",{parentName:"p"},"Deref\u5305\u88f9\u7684\u6cdb\u578b\u7c7b\u5b9e\u73b0Unpin ")," \u4ece\u4e0a\u9762\u7684\u7ea6\u675f\u53ef\u4ee5\u77e5\u9053"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u6cdb\u578bP\u5fc5\u987b\u5b9e\u73b0Deref trait")),(0,a.kt)("li",{parentName:"ul"},"P\u5305\u88f9\u7684Target\u5fc5\u987b\u5b9e\u73b0",(0,a.kt)("strong",{parentName:"li"},"Unpin")," ")),(0,a.kt)("p",null,"\u6240\u4ee5\u5f53\u4e0a\u9762\u7684\u7ed3\u6784\u4f53 ",(0,a.kt)("strong",{parentName:"p"},"Struct Mxsm")," \u589e\u52a0\u4e00\u4e2a\u6807\u8bb0  ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"PhantomPinned"))," \u6765\u963b\u6b62\u5b9e\u73b0",(0,a.kt)("strong",{parentName:"p"},"Unpin trait")," \u6240\u4ee5\u5c31\u62a5\u9519\u4e86\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u975e\u5b89\u5168\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mxsm = Mxsm{\n        name: "".to_string(),\n        _mark: PhantomPinned\n    };\n    let pin = unsafe{Pin::new_unchecked(Box::new(mxsm))}; //\u901a\u8fc7\u975e\u5b89\u5168\u7684\u5b9e\u73b0\n}\n')))}c.isMDXComponent=!0}}]);