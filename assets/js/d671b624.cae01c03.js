"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[9454],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=r.createContext({}),s=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=s(n.components);return r.createElement(u.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,u=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),p=s(t),k=a,m=p["".concat(u,".").concat(k)]||p[k]||d[k]||i;return t?r.createElement(m,o(o({ref:e},c),{},{components:t})):r.createElement(m,o({ref:e},c))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=k;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l[p]="string"==typeof n?n:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},6526:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={title:"\u7ebf\u7a0b\u6c60\u6e90\u7801\u89e3\u6790",date:new Date("2018-11-12T00:00:00.000Z")},o=void 0,l={unversionedId:"java/java-se/concurrencemultithreading/threadpool",id:"java/java-se/concurrencemultithreading/threadpool",title:"\u7ebf\u7a0b\u6c60\u6e90\u7801\u89e3\u6790",description:"1. \u7ebf\u7a0b\u6c60\u7684\u7ee7\u627f\u5173\u7cfb",source:"@site/docs/java/java-se/concurrencemultithreading/threadpool.md",sourceDirName:"java/java-se/concurrencemultithreading",slug:"/java/java-se/concurrencemultithreading/threadpool",permalink:"/docs/java/java-se/concurrencemultithreading/threadpool",draft:!1,editUrl:"https://github.com/mxsm/mxsm-website/edit/develop/docs/java/java-se/concurrencemultithreading/threadpool.md",tags:[],version:"current",lastUpdatedBy:"mxsm",lastUpdatedAt:1675697367,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"\u7ebf\u7a0b\u6c60\u6e90\u7801\u89e3\u6790",date:"2018-11-12T00:00:00.000Z"},sidebar:"javase",previous:{title:"\u7ebf\u7a0b\u6c60\u7684\u6570\u91cf\u548c\u7ebf\u7a0b\u6c60\u4e2d\u7ebf\u7a0b\u6570\u91cf\u5982\u4f55\u8bbe\u7f6e-\u7406\u8bba\u7bc7",permalink:"/docs/java/java-se/concurrencemultithreading/threadpool-thread-number"},next:{title:"\u7ebf\u7a0b\u7684\u72b6\u6001",permalink:"/docs/java/java-se/concurrencemultithreading/threadstate"}},u={},s=[{value:"1. \u7ebf\u7a0b\u6c60\u7684\u7ee7\u627f\u5173\u7cfb",id:"1-\u7ebf\u7a0b\u6c60\u7684\u7ee7\u627f\u5173\u7cfb",level:3},{value:"2.  <strong><code>AbstractExecutorService</code></strong>",id:"2--abstractexecutorservice",level:3},{value:"3. \u770b\u770b\u6700\u5e38\u7528\u7684\u5b9e\u73b0 <strong><code>ThreadPoolExecutor</code></strong>",id:"3-\u770b\u770b\u6700\u5e38\u7528\u7684\u5b9e\u73b0-threadpoolexecutor",level:3},{value:"4. execute \u7684\u5b9e\u73b0",id:"4-execute-\u7684\u5b9e\u73b0",level:3},{value:"5. \u7ebf\u7a0b\u6c60\u5316\u7684\u6a21\u578b\u56fe",id:"5-\u7ebf\u7a0b\u6c60\u5316\u7684\u6a21\u578b\u56fe",level:3},{value:"6. \u7ebf\u7a0b\u6c60\u62d2\u7edd\u7b56\u7565",id:"6-\u7ebf\u7a0b\u6c60\u62d2\u7edd\u7b56\u7565",level:3}],c={toc:s},p="wrapper";function d(n){let{components:e,...t}=n;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"1-\u7ebf\u7a0b\u6c60\u7684\u7ee7\u627f\u5173\u7cfb"},"1. \u7ebf\u7a0b\u6c60\u7684\u7ee7\u627f\u5173\u7cfb"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png?raw=true",alt:"\u56fe\u7247"})),(0,a.kt)("p",null,"\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\u6765\u6700\u9876\u5c42\u7684\u63a5\u53e3\u4e3a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Executor"))," ,\u4e0b\u9762\u770b\u4e00\u4e0b\u8fd9\u4e2a\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public interface Executor {\n    //\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5execute\n    void execute(Runnable command);\n}\n")),(0,a.kt)("p",null," \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765\u53ea\u6709\u4e00\u4e2a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"execute"))," \u65b9\u6cd5\u3002\u8fd9\u4e5f\u662f\u6211\u5e38\u7528\u7684\u4e00\u4e2a\u6765\u8fd0\u884c ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Runable"))," \u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u7136\u540e\u770b\u4e00\u4e0b\u7ee7\u627f\u4e86 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Executor"))," \u63a5\u53e3\u7684 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ExecutorService"))," \u63a5\u53e3\u4e2d\u6709\u54ea\u4e9b\u6211\u4eec\u719f\u6089\u7684\u800c\u5e38\u7528\u7684\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public interface ExecutorService extends Executor {\n    \n    // \u5173\u95ed\u7ebf\u7a0b\u6c60\uff0c\u5df2\u63d0\u4ea4\u7684\u4efb\u52a1\u7ee7\u7eed\u6267\u884c\uff0c\u4e0d\u63a5\u53d7\u7ee7\u7eed\u63d0\u4ea4\u65b0\u4efb\u52a1\n    //\u5199\u4f8b\u5b50\u7684\u65f6\u5019\u7528\u5230(PS\u5728\u5b9e\u9645\u7684\u9879\u76ee\u7ec4\u57fa\u672c\u4e0a\u6ca1\u6709\u7528\u5230\uff0c\u53cd\u6b63\u6211\u662f\u6ca1\u6709)\n    void shutdown();\n    \n    //\u5173\u95ed\u7ebf\u7a0b\u6c60\uff0c\u5c1d\u8bd5\u505c\u6b62\u6b63\u5728\u6267\u884c\u7684\u6240\u6709\u4efb\u52a1\uff0c\u4e0d\u63a5\u53d7\u7ee7\u7eed\u63d0\u4ea4\u65b0\u4efb\u52a1\n     //\u8fd9\u4e2a\u4e5f\u662f\u57fa\u672c\u4e0a\u6ca1\u7528\u5230\n    List<Runnable> shutdownNow();\n\n    // \u7ebf\u7a0b\u6c60\u662f\u5426\u5df2\u5173\u95ed\n    // \u8fd8\u662f\u6ca1\u6709\u7528\u5230\n    boolean isShutdown();\n\n    // \u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u5728\u8c03\u7528shutdown\u6216shutdownNow\u65b9\u6cd5\u4e4b\u540e\u8c03\u7528\u624d\u4f1a\u8fd4\u56detrue\n    //\u5c34\u5c2c\u6ca1\u7528\u8fc7\n    boolean isTerminated();\n\n    //\u4e00\u8138\u61f5\u903c\u6ca1\u7528\u8fc7\n    boolean awaitTermination(long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n   //\u5e26\u8fd4\u56de\u503c\u7684\n    <T> Future<T> submit(Callable<T> task);\n\n    //\u5e26\u8fd4\u56de\u503c\u7684 -- \u8fd9\u4e2a\u5f88\u5c11\u7528\n    <T> Future<T> submit(Runnable task, T result);\n\n    //\u5e26\u8fd4\u56de\u503c---(\u6210\u529f\u8fd4\u56de\u503c\u4e3anull \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u6e90\u7801\u7684\u82f1\u6587\u6ce8\u91ca\u4e0a\u9762\u6709\u8bf4\u660e)\n    Future<?> submit(Runnable task);\n\n    //\u6279\u91cf\u5168\u90e8\u6267\u884c\n    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException;\n\n    //\u6279\u91cf\u5168\u90e8\u6267\u884c--\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\n    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,\n                                  long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n   //\u4efb\u610f\u4e00\u4e2a\u5148\u6267\u884c\u5b8c\u5c31\u8fd4\u56de\n    <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException, ExecutionException;\n\n    //\u4efb\u610f\u4e00\u4e2a\u5148\u6267\u884c\u5b8c\u5c31\u8fd4\u56de\n    <T> T invokeAny(Collection<? extends Callable<T>> tasks,\n                    long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException;\n}\n")),(0,a.kt)("p",null,"\u6f14\u793a\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class InvokeAllTest {\n\n    public static void main(String[] args) throws  Exception{\n        ExecutorService service = Executors.newFixedThreadPool(10);\n        Collection<Test> a = new ArrayList<>();\n        for(int i = 0; i < 10; ++i){\n            a.add(new Test());\n        }\n        //System.out.println( service.invokeAny(a));\n        System.out.println( service.invokeAll(a));\n    }\n\n}\n\nclass Test implements Callable<String>{\n\n    /**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * @return computed result\n     * @throws Exception if unable to compute a result\n     */\n    @Override\n    public String call() throws Exception {\n\n        TimeUnit.SECONDS.sleep((int)(Math.random()*10));\n\n        return Thread.currentThread().getName();\n    }\n}\n")),(0,a.kt)("p",null,"\u770b\u4e00\u4e0b\u6700\u540e\u4e00\u4e2a\u63a5\u53e3 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ScheduledExecutorService"))," \u8ba1\u5212\u6267\u884c\u63a5\u53e3\uff0c\u4ece\u547d\u540d\u4e0a\u5c31\u4e0d\u96be\u770b\u51fa\u6765\u8fd9\u4e2a\u7528\u4e8e\u6267\u884c\u4efb\u52a1\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public interface ScheduledExecutorService extends ExecutorService {\n\n    /**\n     * \u521b\u5efa\u5e76\u6267\u884c\u5728\u7ed9\u5b9a\u5ef6\u8fdf\u4e4b\u540e\u542f\u7528\u7684\u4e00\u6b21\u6027\u64cd\u4f5c\u3002\n     */\n    public ScheduledFuture<?> schedule(Runnable command,\n                                       long delay, TimeUnit unit);\n\n    /**\n     * \u521b\u5efa\u5e76\u6267\u884c\u5728\u7ed9\u5b9a\u5ef6\u8fdf\u4e4b\u540e\u542f\u7528\u7684\u4e00\u6b21\u6027\u64cd\u4f5c\u3002\u8fd4\u56deScheduledFuture<V>\n     */\n    public <V> ScheduledFuture<V> schedule(Callable<V> callable,\n                                           long delay, TimeUnit unit);\n\n    /**\n     * \u6309\u6307\u5b9a\u9891\u7387\u5468\u671f\u6267\u884c\u67d0\u4e2a\u4efb\u52a1\u3002\n     */\n    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,\n                                                  long initialDelay,\n                                                  long period,\n                                                  TimeUnit unit);\n\n    /**\n     * \u6309\u6307\u5b9a\u9891\u7387\u95f4\u9694\u6267\u884c\u67d0\u4e2a\u4efb\u52a1\u3002\n     */\n    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,\n                                                     long initialDelay,\n                                                     long delay,\n                                                     TimeUnit unit);\n\n}\n")),(0,a.kt)("p",null,"\u53e6\u5916\uff0c\u7531\u4e8e\u7ebf\u7a0b\u6c60\u652f\u6301",(0,a.kt)("strong",{parentName:"p"},"\u83b7\u53d6\u7ebf\u7a0b\u6267\u884c\u7684\u7ed3\u679c"),"\uff0c\u6240\u4ee5\uff0c\u5f15\u5165\u4e86 Future \u63a5\u53e3\uff0cRunnableFuture \u7ee7\u627f\u81ea\u6b64\u63a5\u53e3\uff0c\u7136\u540e\u6211\u4eec\u6700\u9700\u8981\u5173\u5fc3\u7684\u5c31\u662f\u5b83\u7684\u5b9e\u73b0\u7c7b FutureTask\u3002\u5230\u8fd9\u91cc\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5728\u7ebf\u7a0b\u6c60\u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u662f\u5f80\u7ebf\u7a0b\u6c60\u63d0\u4ea4\u4efb\u52a1\uff08task\uff09\uff0c\u4f7f\u7528\u8fc7\u7ebf\u7a0b\u6c60\u7684\u90fd\u77e5\u9053\uff0c\u6211\u4eec\u63d0\u4ea4\u7684\u6bcf\u4e2a\u4efb\u52a1\u662f\u5b9e\u73b0\u4e86 Runnable \u63a5\u53e3\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u5148\u5c06 Runnable \u7684\u4efb\u52a1\u5305\u88c5\u6210 FutureTask\uff0c\u7136\u540e\u518d\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\u3002\u8fd9\u6837\uff0c\u8bfb\u8005\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u8bb0\u4f4f FutureTask \u8fd9\u4e2a\u7c7b\u540d\uff1a\u5b83\u9996\u5148\u662f\u4e00\u4e2a\u4efb\u52a1\uff08Task\uff09\uff0c\u7136\u540e\u5177\u6709 Future \u63a5\u53e3\u7684\u8bed\u4e49\uff0c\u5373\u53ef\u4ee5\u5728\u5c06\u6765\uff08Future\uff09\u5f97\u5230\u6267\u884c\u7684\u7ed3\u679c\u3002"),(0,a.kt)("h3",{id:"2--abstractexecutorservice"},"2.  ",(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"AbstractExecutorService"))),(0,a.kt)("p",null,"\u63a5\u7740\u6765\u770b\u4e00\u4e0b\u5728\u62bd\u8c61\u7c7b ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"AbstractExecutorService"))," \u5b9e\u73b0\u4e86\u54ea\u4e9b\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public abstract class AbstractExecutorService implements ExecutorService {\n\n    /**\n     * Runnable \u8f6c\u6362\u4e3a Callable \u7684\u65b9\u6cd5\u5e26\u6307\u5b9a\u8fd4\u56de\u503c\n     */\n    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n        return new FutureTask<T>(runnable, value);\n    }\n\n    /**\n     * Runnable \u8f6c\u6362\u4e3a Callable \u7684\u65b9\u6cd5\uff0c\u4e0d\u5e26\u6307\u5b9a\u8fd4\u56de\u503c\n     */\n    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n        return new FutureTask<T>(callable);\n    }\n\n    /**\n     * \n     */\n    public Future<?> submit(Runnable task) {\n        if (task == null) throw new NullPointerException();\n        //\u8fd9\u91cc\u770b\u4e00\u770b\u51fa\u6765\u5728Runnable submit\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3aFuture get\u7684\u503c\u4e3anull\n        RunnableFuture<Void> ftask = newTaskFor(task, null);\n        execute(ftask);\n        return ftask;\n    }\n\n    public <T> Future<T> submit(Runnable task, T result) {\n        if (task == null) throw new NullPointerException();\n         //\u8fd9\u91cc\u770b\u4e00\u770b\u51fa\u6765\u5728Runnable submit\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3aFuture get\u7684\u503c\u4e3aresult\n        RunnableFuture<T> ftask = newTaskFor(task, result);\n        execute(ftask);\n        return ftask;\n    }\n\n    /**\n     * Callable\u7c7b\u578b\n     */\n    public <T> Future<T> submit(Callable<T> task) {\n        if (task == null) throw new NullPointerException();\n        RunnableFuture<T> ftask = newTaskFor(task);\n        execute(ftask);\n        return ftask;\n    }\n\n    /**\n     * \u8fd4\u56de\u4efb\u610f\u4e00\u4e2a\u6267\u884c\u5b8c\u6210\u7684\u7ed3\u679c\n     */\n    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,\n                              boolean timed, long nanos)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        if (tasks == null)\n            throw new NullPointerException();\n        int ntasks = tasks.size();\n        if (ntasks == 0)\n            throw new IllegalArgumentException();\n        //Future\u5217\u8868\n        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(ntasks);\n        ExecutorCompletionService<T> ecs =\n            new ExecutorCompletionService<T>(this);\n        try {\n            \n            ExecutionException ee = null;\n            //\u622a\u6b62\u65f6\u95f4---0\u5c31\u662f\u6ca1\u6709\u622a\u6b62\u65f6\u95f4\n            final long deadline = timed ? System.nanoTime() + nanos : 0L;\n            Iterator<? extends Callable<T>> it = tasks.iterator();\n\n           \n            futures.add(ecs.submit(it.next()));\n            --ntasks;\n            int active = 1;\n\n            for (;;) {\n                //\u8fd4\u56de\u5df2\u7ecf\u5b8c\u6210\u7684\u4efb\u52a1Future<T> \u6ca1\u6709\u5c31\u8fd4\u56denull -- \u4e0d\u505c\u7684\u5faa\u73af\u8f6e\u8be2\n                Future<T> f = ecs.poll();\n                if (f == null) {\n                    if (ntasks > 0) {\n                        --ntasks;\n                        futures.add(ecs.submit(it.next()));\n                        ++active;\n                    }\n                    else if (active == 0)\n                        break;\n                    else if (timed) {\n                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);\n                        if (f == null)\n                            throw new TimeoutException();\n                        nanos = deadline - System.nanoTime();\n                    }\n                    else\n                        f = ecs.take();\n                }\n                if (f != null) {\n                    --active;\n                    try {\n                        return f.get();\n                    } catch (ExecutionException eex) {\n                        ee = eex;\n                    } catch (RuntimeException rex) {\n                        ee = new ExecutionException(rex);\n                    }\n                }\n            }\n\n            if (ee == null)\n                ee = new ExecutionException();\n            throw ee;\n\n        } finally {\n            for (int i = 0, size = futures.size(); i < size; i++)\n                futures.get(i).cancel(true);\n        }\n    }\n\n    public <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException, ExecutionException {\n        try {\n            return doInvokeAny(tasks, false, 0);\n        } catch (TimeoutException cannotHappen) {\n            assert false;\n            return null;\n        }\n    }\n\n    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,\n                           long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        return doInvokeAny(tasks, true, unit.toNanos(timeout));\n    }\n\n    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n        throws InterruptedException {\n        if (tasks == null)\n            throw new NullPointerException();\n        //\u521b\u5efa\u8fd4\u56de\u503cFuture \u7684\u5217\u8868\n        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());\n        boolean done = false;\n        try {\n            //\u653e\u5165\u7ebf\u7a0b\u6c60\u8fd0\u884c\n            for (Callable<T> t : tasks) {\n                RunnableFuture<T> f = newTaskFor(t);\n                futures.add(f);\n                execute(f);\n            }\n            //\u7b49\u5f85\u8fd0\u884c\u5b8c\u6210\n            for (int i = 0, size = futures.size(); i < size; i++) {\n                Future<T> f = futures.get(i);\n                if (!f.isDone()) {\n                    try {\n                        f.get();\n                    } catch (CancellationException ignore) {\n                    } catch (ExecutionException ignore) {\n                    }\n                }\n            }\n            done = true;\n            return futures;\n        } finally {\n            if (!done)\n                //\u5c06\u6ca1\u6709\u8fd0\u884c\u5b8c\u6210\u7684\u7ebf\u7a0b\u76f4\u63a5\u53d6\u6d88\u6389\n                for (int i = 0, size = futures.size(); i < size; i++)\n                    futures.get(i).cancel(true);\n        }\n    }\n\n    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,\n                                         long timeout, TimeUnit unit)\n        throws InterruptedException {\n        if (tasks == null)\n            throw new NullPointerException();\n        long nanos = unit.toNanos(timeout);\n        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());\n        boolean done = false;\n        try {\n            //\u521b\u5efa\u4efb\u52a1\u6570\u7ec4\n            for (Callable<T> t : tasks)\n                futures.add(newTaskFor(t));\n            //\u622a\u6b62\u65f6\u95f4\n            final long deadline = System.nanoTime() + nanos;\n            final int size = futures.size();\n            \n            //\u51cf\u53bb\u63d0\u4ea4\u7684\u65f6\u95f4\n            for (int i = 0; i < size; i++) {\n                execute((Runnable)futures.get(i));\n                nanos = deadline - System.nanoTime();\n                //\u5c0f\u4e8e0\u76f4\u63a5\u8fd4\u56de\u73b0\u6709\u7684\n                if (nanos <= 0L)\n                    return futures;\n            }\n            \n            //\u5904\u7406\u6bcf\u4e2a\u83b7\u53d6\u7684\u65f6\u95f4\n            for (int i = 0; i < size; i++) {\n                Future<T> f = futures.get(i);\n                if (!f.isDone()) {\n                    if (nanos <= 0L)\n                        return futures;\n                    try {\n                        f.get(nanos, TimeUnit.NANOSECONDS);\n                    } catch (CancellationException ignore) {\n                    } catch (ExecutionException ignore) {\n                    } catch (TimeoutException toe) {\n                        //\u53d1\u73b0timeout\u76f4\u63a5\u8fd4\u56de\n                        return futures;\n                    }\n                    nanos = deadline - System.nanoTime();\n                }\n            }\n            done = true;\n            return futures;\n        } finally {\n            if (!done)\n                //\u8fd4\u56de\u540e\u53d1\u73b0\u8fd8\u6709\u5728\u8fd0\u884c\u7684\u76f4\u63a5cacel\u6389\n                for (int i = 0, size = futures.size(); i < size; i++)\n                    futures.get(i).cancel(true);\n        }\n    }\n\n}\n")),(0,a.kt)("p",null,"\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u6765\u4e0a\u9762\u65b9\u6cd5\u5b9e\u73b0\u4e3b\u8981\u662f\u901a\u8fc7\u8c03\u7528  ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"execute"))," \u548c ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ExecutorCompletionService"))," \u8fd9\u4e2a\u7c7b\u3002\u6765\u5b9e\u73b0\u4e86 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"submit"))," , ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"doInvokeAny")),"  ,",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"invokeAll"))," \u8fd9\u4e9b\u65b9\u6cd5\u3002"),(0,a.kt)("h3",{id:"3-\u770b\u770b\u6700\u5e38\u7528\u7684\u5b9e\u73b0-threadpoolexecutor"},"3. \u770b\u770b\u6700\u5e38\u7528\u7684\u5b9e\u73b0 ",(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"ThreadPoolExecutor"))),(0,a.kt)("p",null,"\u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ThreadPoolExecutor"))," \u7c7b\u4e2d\u5305\u542b\u7684\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u9010\u4e00\u7684\u5206\u6790"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"//\u4ece\u5f00\u59cb\u7684\u7ee7\u627f\u56fe\u53ef\u4ee5\u770b\u51fa\u6765 ThreadPoolExecutor\u7ee7\u627f\u4e86AbstractExecutorService\npublic class ThreadPoolExecutor extends AbstractExecutorService {\n    /**\n     * \u4e3b\u7ebf\u7a0b\u6c60\u63a7\u5236\u72b6\u6001ctl\u662f\u4e00\u4e2aatomic\u6574\u578b\u5c01\u88c5\u4e86\u4e24\u4e2a\u6982\u5ff5\u5b57\u6bb5\n     * \n     *   \u7ebf\u7a0b\u6570\u91cf, \u5b9a\u4e49\u4e86\u6709\u6548\u7684\u7ebf\u7a0b\u6570\u91cf\n     *   \u8fd0\u884c\u72b6\u6001,    \u5b9a\u4e49\u4e86\uff1a\u8fd0\u884c\u72b6\u6001\uff0c\u5173\u95ed\u72b6\u6001\u7b49\u7b49\u3002\n     *\n     * \u4e3a\u4e86\u5c01\u88c5\u6210\u4e00\u4e2a\u6574\u6570, \u6211\u4eec\u9650\u5236\u7ebf\u7a0b\u7684\u6570\u91cf\u4e3a\n     * (2^29)-1 (about 500 million) \u800c\u4e0d\u662f (2^31)-1\n     * \u5982\u679c\u5c06\u6765\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5c06\u53d8\u91cf\u66f4\u6539\u4e3aAtomicLong\uff0c\u5e76\u8c03\u6574\u4e0b\u9762\u7684shift/mask\u5e38\u91cf\u3002\n     * \u4f46\u662f\u5728\u9700\u8981\u4e4b\u524d\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528int\u4f1a\u66f4\u5feb\u3001\u66f4\u7b80\u5355\u3002\n     * \u5de5\u4f5c\u7ebf\u7a0b\u662f\u5141\u8bb8\u542f\u52a8\u548c\u505c\u6b62\u7684\uff0c\u5de5\u4f5c\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6709\u548c\u5b58\u6d3b\u7684\u7ebf\u7a0b\u6709\u77ed\u6682\u7684\u6570\u91cf\u4e0d\u540c\n     *\n     *   RUNNING:  \u63a5\u53d7\u65b0\u4efb\u52a1\u5e76\u5904\u7406\u6392\u961f\u7684\u4efb\u52a1\n     *   SHUTDOWN: \u4e0d\u63a5\u53d7\u65b0\u4efb\u52a1\u4f46\u662f\u5904\u7406\u6392\u961f\u4efb\u52a1\n     *   STOP:     \u4e0d\u63a5\u53d7\u65b0\u4efb\u52a1\u4e0d\u63a5\u53d7\u6392\u961f\u4efb\u52a1\uff0c\u5e76\u4e14\u4e2d\u65ad\u5728\u5904\u7406\u4e2d\u7684\u4efb\u52a1\n     *             \n     *   TIDYING(\u6574\u7406):  \u6240\u6709\u7684\u4efb\u52a1\u4e2d\u6b62, \u5de5\u4f5c\u7ebf\u7a0b\u4e3a0\uff0c\u8f6c\u6362\u5230\u72b6\u6001\u6e05\u7406\u7684\u7ebf\u7a0b\u5c06\u8fd0\u884cterminate()\u94a9\u5b50\u65b9\u6cd5\n     *             \n     *   TERMINATED: terminated() \u5df2\u7ecf\u5b8c\u6210\n     *\n     * The numerical order among these values matters, to allow\n     * ordered comparisons. The runState monotonically increases over\n     * time, but need not hit each state. The transitions are:\n     *\n     * RUNNING -> SHUTDOWN\n     *     \u8c03\u7528shutdown(),\u6216\u8005\u5728finalize()\u4e2d\u8c03\u7528shutdown()\n     * (RUNNING or SHUTDOWN) -> STOP\n     *    \u8c03\u7528shutdownNow()\n     * SHUTDOWN -> TIDYING\n     *    \u5f53\u961f\u5217\u548c\u7ebf\u7a0b\u6c60\u90fd\u4e3a\u7a7a\u7684\u65f6\u5019\n     * STOP -> TIDYING\n     *    \u5f53\u7ebf\u7a0b\u6c60\u4e3a\u7a7a\n     * TIDYING -> TERMINATED\n     *    terminated() \u65b9\u6cd5\u6267\u884c\u5b8c\u6210\n     *\n     */\n    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n    //\u7ebf\u7a0b\u7684\u6570\u91cf\u7684\u8868\u793a\u4f4d--\u4f4e29\u4f4d\u8868\u793a\u7ebf\u7a0b\u6570\u91cf\n    private static final int COUNT_BITS = Integer.SIZE - 3;\n    //\u6700\u5927\u7684\u7ebf\u7a0b\u7684\u5bb9\u91cf(2^29)-1\n    private static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n    // runState \u7528int\u7684\u9ad8\u4e09\u4f4d\u8868\u793a\n    //11100000000000000000000000000000\n    private static final int RUNNING    = -1 << COUNT_BITS;\n    \n    //00000000000000000000000000000000\n    private static final int SHUTDOWN   =  0 << COUNT_BITS;\n    \n    //00100000000000000000000000000000\n    private static final int STOP       =  1 << COUNT_BITS;\n    \n    //01000000000000000000000000000000\n    private static final int TIDYING    =  2 << COUNT_BITS;\n    \n    //01100000000000000000000000000000\n    private static final int TERMINATED =  3 << COUNT_BITS;\n\n    // \u62c6\u89e3\u51fa\u8fd0\u884c\u72b6\u6001\n    private static int runStateOf(int c)     { return c & ~CAPACITY; }\n    \n    //\u62c6\u89e3\u51fa\u6765\u7ebf\u7a0b\u6570\u91cf\n    private static int workerCountOf(int c)  { return c & CAPACITY; }\n    \n    //\u628a\u8fd0\u884c\u72b6\u6001\u548c\u7ebf\u7a0b\u6570\u91cf\u6253\u5305\u6210\u4e00\u4e2a\u6574\u6570\n    private static int ctlOf(int rs, int wc) { return rs | wc; }\n\n    /**\n     * \u7ebf\u7a0b\u7684\u589e\u52a0\u548c\u51cf\u5c11\u90fd\u662f\u901a\u8fc7CAS\u6765\u8fdb\u884c\u7684\n     */\n    private boolean compareAndIncrementWorkerCount(int expect) {\n        return ctl.compareAndSet(expect, expect + 1);\n    }\n\n    private boolean compareAndDecrementWorkerCount(int expect) {\n        return ctl.compareAndSet(expect, expect - 1);\n    }\n\n\n    private void decrementWorkerCount() {\n        do {} while (! compareAndDecrementWorkerCount(ctl.get()));\n    }\n\n    /**\n     * \u963b\u585e\u961f\u5217\n     */\n    private final BlockingQueue<Runnable> workQueue;\n\n    /**\n     * \u975e\u516c\u5e73\u7684\u91cd\u5165\u9501\n     */\n    private final ReentrantLock mainLock = new ReentrantLock();\n\n    /**\n     * \u4ec5\u5728\u6301\u6709\u4e3b\u9501mainLock\u65f6\u8bbf\u95ee\n     * .\n     */\n    private final HashSet<Worker> workers = new HashSet<Worker>();\n\n\n    private final Condition termination = mainLock.newCondition();\n\n\n    private int largestPoolSize;\n\n\n    private long completedTaskCount;\n\n\n    private volatile ThreadFactory threadFactory;\n\n    /**\n     * \u5f53\u6267\u884c\u9971\u548c\u6216\u5173\u95ed\u65f6\u8c03\u7528\u5904\u7406Handler\n     */\n    private volatile RejectedExecutionHandler handler;\n\n    /**\n     * \u95f2\u7f6e\u7684\u7ebf\u7a0b\u7b49\u5f85\u8d85\u65f6\u65f6\u95f4\n     */\n    private volatile long keepAliveTime;\n\n    /**\n     * \u662f\u5426\u5141\u8bb8\u6838\u5fc3\u7ebf\u7a0b\u8d85\u65f6\n     */\n    private volatile boolean allowCoreThreadTimeOut;\n\n    /**\n     * \u6838\u5fc3\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f\n     */\n    private volatile int corePoolSize;\n\n    /**\n     * \u7ebf\u7a0b\u7684\u6781\u5927\u503c\n     * \n     */\n    private volatile int maximumPoolSize;\n\n    /**\n     * \u9ed8\u8ba4\u7684\u88ab\u62d2\u6267\u884c\u7684Handler\n     */\n    private static final RejectedExecutionHandler defaultHandler =\n        new AbortPolicy();\n\n    //Worker\u5b9e\u73b0\u4e86AQS\u548cRunnable\u7684\u63a5\u53e3\n    private final class Worker\n        extends AbstractQueuedSynchronizer\n        implements Runnable\n    {\n        \n        private static final long serialVersionUID = 6138294804551838833L;\n\n       \n        final Thread thread;\n       \n        Runnable firstTask;\n       \n        volatile long completedTasks;\n\n        Worker(Runnable firstTask) {\n            setState(-1); // inhibit interrupts until runWorker\n            this.firstTask = firstTask;\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        /** Delegates main run loop to outer runWorker  */\n        public void run() {\n            runWorker(this);\n        }\n\n        protected boolean isHeldExclusively() {\n            return getState() != 0;\n        }\n\n        protected boolean tryAcquire(int unused) {\n            if (compareAndSetState(0, 1)) {\n                setExclusiveOwnerThread(Thread.currentThread());\n                return true;\n            }\n            return false;\n        }\n\n        protected boolean tryRelease(int unused) {\n            setExclusiveOwnerThread(null);\n            setState(0);\n            return true;\n        }\n\n        public void lock()        { acquire(1); }\n        public boolean tryLock()  { return tryAcquire(1); }\n        public void unlock()      { release(1); }\n        public boolean isLocked() { return isHeldExclusively(); }\n\n        void interruptIfStarted() {\n            Thread t;\n            if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                }\n            }\n        }\n    }\n")),(0,a.kt)("h3",{id:"4-execute-\u7684\u5b9e\u73b0"},"4. execute \u7684\u5b9e\u73b0"),(0,a.kt)("p",null,"\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\u6765\u4e0a\u9762\u65b9\u6cd5\u5b9e\u73b0\u4e3b\u8981\u662f\u901a\u8fc7\u8c03\u7528  ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"execute"))," \u548c ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ExecutorCompletionService"))," \u8fd9\u4e2a\u7c7b\u3002\u6765\u5b9e\u73b0\u4e86 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"submit"))," , ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"doInvokeAny")),"  ,",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"invokeAll"))," \u8fd9\u4e9b\u65b9\u6cd5\u3002\u4e0b\u9762\u5c31\u6765\u770b\u4e00\u4e0b ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"execute"))," \u8fd9\u65b9\u6cd5\u5728 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ThreadPoolExecutor"))," \u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        /*\n         * Proceed in 3 steps:\n         *\n         * 1 \u5982\u679c\u8fd0\u884c\u7684\u7ebf\u7a0b\u5c0f\u4e8ecorePoolSize\uff0c\u5219\u5c1d\u8bd5\u4ee5\u7ed9\u5b9a\u547d\u4ee4\u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u4efb\u52a1\u542f\u52a8\u65b0\u7ebf\u7a0b\u3002\u5bf9\n         * addWorker\u7684\u8c03\u7528\u4ee5\u539f\u5b50\u65b9\u5f0f\u68c0\u67e5runState\u548cworkerCount\uff0c\u4ece\u800c\u901a\u8fc7\u8fd4\u56defalse\u9632\u6b62\u5728\u4e0d\n         * \u5e94\u8be5\u6dfb\u52a0\u7ebf\u7a0b\u65f6\u6dfb\u52a0\u9519\u8bef\u8b66\u62a5\u3002\n         * \n         * 2. \u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u6210\u529f\u5730\u6392\u961f\uff0c\u90a3\u4e48\u6211\u4eec\u4ecd\u7136\u9700\u8981\u518d\u6b21\u68c0\u67e5\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u7ebf\u7a0b(\u56e0\u4e3a\u4e0a\u6b21\u68c0\n         * \u67e5\u540e\u5df2\u6709\u7ebf\u7a0b\u6b7b\u4ea1)\uff0c\u6216\u8005\u662f\u5426\u5e94\u8be5\u5728\u8fdb\u5165\u8fd9\u4e2a\u65b9\u6cd5\u540e\u5173\u95ed\u7ebf\u7a0b\u6c60\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u91cd\u65b0\u68c0\u67e5\u72b6\n         * \u6001\uff0c\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u5728\u505c\u6b62\u65f6\u56de\u6eda\u961f\u5217\uff0c\u6216\u8005\u5728\u6ca1\u6709\u7ebf\u7a0b\u65f6\u542f\u52a8\u65b0\u7ebf\u7a0b\u3002\n         *\n         * 3. \u5982\u679c\u65e0\u6cd5\u5bf9\u4efb\u52a1\u6392\u961f\uff0c\u5219\u5c1d\u8bd5\u6dfb\u52a0\u65b0\u7ebf\u7a0b\u3002\u5982\u679c\u5b83\u5931\u8d25\u4e86\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u88ab\u5173\u95ed\u6216\u9971\u548c\uff0c\u6240\u4ee5\u62d2\u7edd\u4efb\u52a1\u3002\n         * \u6240\u4ee5\u62d2\u7edd\u4efb\u52a1\u3002\n         * \n         */\n     \n        //\u83b7\u53d6\u7ebf\u7a0b\u6c60\u4e2d\u7ebf\u7a0b\u6570\u91cf---\u9ed8\u8ba4\u662f0\n        int c = ctl.get();\n        //\u5982\u679c\u8bbe\u7f6e\u4e86\u6838\u5fc3\u7ebf\u7a0b\u6570\u5148\u5224\u65ad\u6838\u5fc3\u7ebf\u7a0b\u6570\u662f\u4e0d\u662f\u5df2\u7ecf\u6ee1\u4e86\n        if (workerCountOf(c) < corePoolSize) {\n            if (addWorker(command, true))\n                return;\n            c = ctl.get();\n        }\n        //\u5224\u65ad\u7ebf\u7a0b\u6c60\u662f\u5426\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u5e76\u4e14\u8fd8\u80fd\u5f80\u961f\u5217\u6dfb\u52a0\u4efb\u52a1\n        if (isRunning(c) && workQueue.offer(command)) {\n            int recheck = ctl.get();\n            //\u53cc\u91cd\u68c0\u67e5---\u5982\u679c\u4e0d\u662f\u8fd0\u884c\u72b6\u6001\u4ece\u961f\u5217\u4e2d\u5220\u9664\u4efb\u52a1\n            if (! isRunning(recheck) && remove(command))\n                //\u6839\u636e\u4f20\u5165\u7684\u4e0d\u540c\u7b56\u7565\u5904\u7406\u5668\u5904\u7406\u95ee\u9898\n                reject(command);\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        //\u6dfb\u52a0\u975e\u6838\u5fc3\u7ebf\u7a0b\u4efb\u52a1\n        else if (!addWorker(command, false))\n            //\u6dfb\u52a0\u5931\u8d25\u6839\u636e\u4f20\u5165\u7684\u4e0d\u540c\u7684\u7b56\u7565\u5904\u7406\u5668\u5904\u7406\u95ee\u9898\n            reject(command);\n    }\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"execute")," \u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"\u6dfb\u52a0\u6838\u5fc3\u5904\u7406\u7ebf\u7a0b")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"\u7ebf\u7a0b\u6c60\u5728\u8fd0\u884c\u72b6\u6001\uff0c\u6dfb\u52a0\u4efb\u52a1\u5230\u4efb\u52a1\u963b\u585e\u961f\u5217\u4e2d")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"\u65b0\u589e\u975e\u6838\u5fc3\u7ebf\u7a0b\u5904\u7406"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5728\u7ebf\u7a0b\u6c60\u6784\u9020\u51fd\u6570\u4e2d\u6709\u8bbe\u7f6ekeepAliveTime\uff0c\u8fd9\u4e2a\u8bbe\u7f6e\u7684\u5c31\u662f\u975ecoreThread\u7684\u5b58\u6d3b\u65f6\u95f4\u3002")),(0,a.kt)("p",null,"\u901a\u8fc7\u4e0a\u9762\u7684\u6e90\u7801\u53d1\u73b0\u4e3b\u8981\u662f ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"addWorker"))," \u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    private boolean addWorker(Runnable firstTask, boolean core) {\n        //\u589e\u52a0Worker\u7684\u6570\u91cf\n        retry:\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n\n            // Check if queue empty only if necessary.\n            if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                   firstTask == null &&\n                   ! workQueue.isEmpty()))\n                return false;\n\n            for (;;) {\n                int wc = workerCountOf(c);\n                if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                    return false;\n                if (compareAndIncrementWorkerCount(c))\n                    break retry;\n                c = ctl.get();  // Re-read ctl\n                if (runStateOf(c) != rs)\n                    continue retry;\n            }\n        }\n\n        //\u521b\u5efaWorker\u5e76\u4e14\u542f\u52a8\n        boolean workerStarted = false;\n        boolean workerAdded = false;\n        Worker w = null;\n        try {\n            w = new Worker(firstTask);\n            final Thread t = w.thread;\n            if (t != null) {\n                final ReentrantLock mainLock = this.mainLock;\n                mainLock.lock();\n                try {\n                    // Recheck while holding lock.\n                    // Back out on ThreadFactory failure or if\n                    // shut down before lock acquired.\n                    int rs = runStateOf(ctl.get());\n\n                    if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                        if (t.isAlive()) // precheck that t is startable\n                            throw new IllegalThreadStateException();\n                        workers.add(w);\n                        int s = workers.size();\n                        if (s > largestPoolSize)\n                            largestPoolSize = s;\n                        workerAdded = true;\n                    }\n                } finally {\n                    mainLock.unlock();\n                }\n                if (workerAdded) {\n                    t.start();\n                    workerStarted = true;\n                }\n            }\n        } finally {\n            if (! workerStarted)\n                addWorkerFailed(w);\n        }\n        return workerStarted;\n    }\n")),(0,a.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u4e5f\u662f\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u589e\u52a0worker\u6570\u91cf\u7684\u7edf\u8ba1"),(0,a.kt)("li",{parentName:"ol"},"\u521b\u5efa\u65b0\u7684Worker\u5e76\u4e14\u542f\u52a8")),(0,a.kt)("p",null,"\u5728\u7ebf\u7a0b\u6c60\u4e2d\u7684\u4efb\u52a1\u5904\u7406\u4e3b\u8981\u662f\u9760\u4e00\u4e2a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Worker"))," \u7684\u5185\u90e8\u7c7b\u8fdb\u884c\u5904\u7406\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u5185\u90e8\u7c7b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private final class Worker\n        extends AbstractQueuedSynchronizer\n        implements Runnable\n    {\n        /**\n         * This class will never be serialized, but we provide a\n         * serialVersionUID to suppress a javac warning.\n         */\n        private static final long serialVersionUID = 6138294804551838833L;\n\n        /** Thread this worker is running in.  Null if factory fails. */\n        final Thread thread;\n        /** Initial task to run.  Possibly null. */\n        Runnable firstTask;\n        /** Per-thread task counter */\n        volatile long completedTasks;\n\n        /**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\n        Worker(Runnable firstTask) {\n            setState(-1); // inhibit interrupts until runWorker\n            this.firstTask = firstTask;\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        /** Delegates main run loop to outer runWorker  */\n        public void run() {\n            runWorker(this);\n        }\n        protected boolean isHeldExclusively() {\n            return getState() != 0;\n        }\n\n        protected boolean tryAcquire(int unused) {\n            if (compareAndSetState(0, 1)) {\n                setExclusiveOwnerThread(Thread.currentThread());\n                return true;\n            }\n            return false;\n        }\n\n        protected boolean tryRelease(int unused) {\n            setExclusiveOwnerThread(null);\n            setState(0);\n            return true;\n        }\n\n        public void lock()        { acquire(1); }\n        public boolean tryLock()  { return tryAcquire(1); }\n        public void unlock()      { release(1); }\n        public boolean isLocked() { return isHeldExclusively(); }\n\n        void interruptIfStarted() {\n            Thread t;\n            if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                }\n            }\n        }\n    }\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Worker"))," \u7ee7\u627f\u4e86 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"AbstractQueuedSynchronizer"))," \u5b9e\u73b0\u4e86 ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Runnable"))," \u3002",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Worker"))," \u4e2d\u6709\u4e24\u4e2a\u53d8\u91cf\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thread\u53d8\u91cf"),(0,a.kt)("li",{parentName:"ul"},"Runnable\u53d8\u91cf")),(0,a.kt)("p",null,"\u7b2c\u4e00\u4e2a\u662f\u5728\u521b\u5efaWorker\u7684\u65f6\u5019\uff0c\u628aWorker\u53d8\u6210\u7ebf\u7a0b\u4fdd\u5b58\u8d77\u6765\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u5904\u7406\u4efb\u52a1\uff0cRunnable\u4fdd\u5b58\u7684\u662f\u521b\u5efaWorker\u7684\u65f6\u5019\u6267\u884c\u7684\u4efb\u52a1\u3002\u90a3\u4e48\u8fd9\u4e2aWorker\u7684run\u65b9\u6cd5\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u3002\u5728\u524d\u9762\u6267\u884c addWorker \u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e2a\u521b\u5efaWorker\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u8c03\u7528\u4e86Thread.start()\u65b9\u6cd5\u3002\u8fd9\u6837\u5c31\u4f1a\u6267\u884c\u5230Worker\u7684run\u65b9\u6cd5\uff0c\u800c\u5728run\u65b9\u6cd5\u4e2d\u8c03\u7528\u7684\u662f ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ThreadPoolExecutor.runWorker")),"  \u53c2\u6570\u662f\u5f53\u524dWorker\u7684\u5b9e\u4f8b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"final void runWorker(Worker w) {\n        Thread wt = Thread.currentThread();\n        Runnable task = w.firstTask;\n        w.firstTask = null;\n        w.unlock(); // allow interrupts\n        boolean completedAbruptly = true;\n        try {\n            while (task != null || (task = getTask()) != null) {\n                w.lock();\n                if ((runStateAtLeast(ctl.get(), STOP) ||\n                     (Thread.interrupted() &&\n                      runStateAtLeast(ctl.get(), STOP))) &&\n                    !wt.isInterrupted())\n                    wt.interrupt();\n                try {\n                    beforeExecute(wt, task);\n                    Throwable thrown = null;\n                    try {\n                        task.run();\n                    } catch (RuntimeException x) {\n                        thrown = x; throw x;\n                    } catch (Error x) {\n                        thrown = x; throw x;\n                    } catch (Throwable x) {\n                        thrown = x; throw new Error(x);\n                    } finally {\n                        afterExecute(task, thrown);\n                    }\n                } finally {\n                    task = null;\n                    w.completedTasks++;\n                    w.unlock();\n                }\n            }\n            completedAbruptly = false;\n        } finally {\n            processWorkerExit(w, completedAbruptly);\n        }\n    }\n")),(0,a.kt)("p",null,"\u9996\u5148\u83b7\u53d6Worker\u4e2d\u7684\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u53bb\u5904\u7406\uff0c\u5f53\u5904\u7406\u5b8c\u6210Worker\u4e2d\u7684\u901a\u8fc7\u83b7\u53d6getTask\u4efb\u52a1\u5217\u8868\u4e2d\u7684\u4efb\u52a1\u8fdb\u884c\u5904\u7406\u3002\u6839\u636e\u662f\u5426\u6709\u6838\u5fc3\u5904\u7406\u7ebf\u7a0b(Worker)\u6765\u662f\u5426\u8981\u9000\u51fa\u5f53\u524dWorker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private Runnable getTask() {\n        boolean timedOut = false; // Did the last poll() time out?\n\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n\n            // Check if queue empty only if necessary.\n            if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n                decrementWorkerCount();\n                return null;\n            }\n\n            int wc = workerCountOf(c);\n\n            // \u9ed8\u8ba4\u60c5\u51b5\u4e0bcore\u7ebf\u7a0b\u4e0d\u4f1a\u5931\u6548\n            boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n            if ((wc > maximumPoolSize || (timed && timedOut))\n                && (wc > 1 || workQueue.isEmpty())) {\n                if (compareAndDecrementWorkerCount(c))\n                    return null;\n                continue;\n            }\n\n            try {\n                //\u6839\u636e\u662f\u5426\u5931\u6548\u8c03\u7528\u4efb\u52a1\u5217\u8868\u7684\u4e0d\u540c\u65b9\u6cd5\n                Runnable r = timed ?\n                    //\u8c03\u7528poll\uff0c\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u8fd8\u6ca1\u6709\u5c31\u8fd4\u56denull\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    //\u6ca1\u6709\u5c31\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\n                    workQueue.take();\n                if (r != null)\n                    return r;\n                timedOut = true;\n            } catch (InterruptedException retry) {\n                timedOut = false;\n            }\n        }\n    }\n")),(0,a.kt)("h3",{id:"5-\u7ebf\u7a0b\u6c60\u5316\u7684\u6a21\u578b\u56fe"},"5. \u7ebf\u7a0b\u6c60\u5316\u7684\u6a21\u578b\u56fe"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4ece\u6c60\u7684\u7a7a\u95f2\u7ebf\u7a0b\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a Thread\uff0c\u5e76\u4e14\u6307\u6d3e\u5b83\u53bb\u8fd0\u884c\u4e00\u4e2a\u5df2\u63d0\u4ea4\u7684\u4efb\u52a1(\u4e00\u4e2a Runnable\uff0cCallable \u7684\u5b9e\u73b0)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5f53\u4efb\u52a1\u5b8c\u6210\u65f6\uff0c\u5c06\u8be5 Thread \u8fd4\u56de\u7ed9\u8be5\u5217\u8868\uff0c\u4f7f\u5176\u53ef\u88ab\u91cd\u7528\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{parentName:"p",src:"https://github.com/mxsm/document/blob/master/image/JSE/Executor%E6%89%A7%E8%A1%8C%E7%9A%84%E9%80%BB%E8%BE%91%E5%9B%BE%E8%A7%A3.jpg?raw=true",alt:"\u56fe\u89e3"})," "))),(0,a.kt)("h3",{id:"6-\u7ebf\u7a0b\u6c60\u62d2\u7edd\u7b56\u7565"},"6. \u7ebf\u7a0b\u6c60\u62d2\u7edd\u7b56\u7565"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"CallerRunsPolicy\uff1a\u5728\u4efb\u52a1\u88ab\u62d2\u7edd\u6dfb\u52a0\u540e\uff0c\u4f1a\u8c03\u7528\u5f53\u524d\u7ebf\u7a0b\u6c60\u7684\u6240\u5728\u7684\u7ebf\u7a0b\u53bb\u6267\u884c\u88ab\u62d2\u7edd\u7684\u4efb\u52a1"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"}," public static class CallerRunsPolicy implements RejectedExecutionHandler {\n       \n        public CallerRunsPolicy() { }\n\n      \n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                r.run();\n            }\n        }\n    }\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"AbortPolicy\uff1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    public static class AbortPolicy implements RejectedExecutionHandler {\n        \n        public AbortPolicy() { }\n\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException("Task " + r.toString() +\n                                                 " rejected from " +\n                                                 e.toString());\n        }\n    }\n')))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"DiscardPolicy\uff1a\u4f1a\u8ba9\u88ab\u7ebf\u7a0b\u6c60\u62d2\u7edd\u7684\u4efb\u52a1\u76f4\u63a5\u629b\u5f03\uff0c\u4e0d\u4f1a\u629b\u5f02\u5e38\u4e5f\u4e0d\u4f1a\u6267\u884c\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public static class DiscardPolicy implements RejectedExecutionHandler {\n\n        public DiscardPolicy() { }\n\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        }\n    }\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"DiscardOldestPolicy\uff1aDiscardOldestPolicy\u7b56\u7565\u7684\u4f5c\u7528\u662f\uff0c\u5f53\u4efb\u52a1\u5457\u62d2\u7edd\u6dfb\u52a0\u65f6\uff0c\u4f1a\u629b\u5f03\u4efb\u52a1\u961f\u5217\u4e2d\u6700\u65e7\u7684\u4efb\u52a1\u4e5f\u5c31\u662f\u6700\u5148\u52a0\u5165\u961f\u5217\u7684\uff0c\u518d\u628a\u8fd9\u4e2a\u65b0\u4efb\u52a1\u6dfb\u52a0\u8fdb\u53bb\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static class DiscardOldestPolicy implements RejectedExecutionHandler {\n\n        public DiscardOldestPolicy() { }\n\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                e.getQueue().poll();\n                e.execute(r);\n            }\n        }\n    }\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u81ea\u5b9a\u4e49\u7b56\u7565\uff0c\u53ea\u8981\u5b9e\u73b0RejectedExecutionHandler\u63a5\u53e3"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u6211\u662f\u8682\u8681\u80cc\u5927\u8c61\uff0c\u6587\u7ae0\u5bf9\u4f60\u6709\u5e2e\u52a9\u70b9\u8d5e\u5173\u6ce8\u6211\uff0c\u6587\u7ae0\u6709\u4e0d\u6b63\u786e\u7684\u5730\u65b9\u8bf7\u60a8\u65a7\u6b63\u7559\u8a00\u8bc4\u8bba~\u8c22\u8c22")))}d.isMDXComponent=!0}}]);