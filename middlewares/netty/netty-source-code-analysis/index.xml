<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>蚂蚁背大象 – Netty源码解析</title><link>/middlewares/netty/netty-source-code-analysis/</link><description>Recent content in Netty源码解析 on 蚂蚁背大象</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 08 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/middlewares/netty/netty-source-code-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Middlewares: Netty源码解析-SizeClasses</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-analysis-sizeclasses/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-analysis-sizeclasses/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：4.1.72.Final&lt;/p>
&lt;/blockquote>
&lt;p>Netty的内存对齐类SizeClasses，它为Netty内存池中的内存块提供大小对齐，索引计算等服务方法。 &lt;strong>&lt;code>4.1.72.Final&lt;/code>&lt;/strong> 是 &lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 的实现。&lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 进一步优化了内存碎片的问题。jemalloc4 相较于 jemalloc3 最大的提升是进一步优化内存碎片问题，因为在 jemalloc3 中最多可能会导致 50% 内存碎片，但 jemalloc4 通过划分更细粒度的内存规格在一定程度上改善了这一问题，这也是 SizeClasses 的由来。&lt;/p>
&lt;blockquote>
&lt;p>Tips: &lt;a href="https://github.com/netty/netty/issues/3910">https://github.com/netty/netty/issues/3910&lt;/a> (Netty Issues) 这里说明了jemalloc4的提升&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-netty内存规格">1. Netty内存规格&lt;/h3>
&lt;p>这里讲的是基于 &lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 实现的内存分配。&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/picture/blob/main/netty/Netty%E5%86%85%E5%AD%98%E8%A7%84%E6%A0%BC2.png?raw=true" alt="Netty内存规格2">&lt;/p>
&lt;p>&lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 取消了 &lt;strong>&lt;code>Tiny&lt;/code>&lt;/strong> 内存的规格。只保留了 &lt;strong>&lt;code>small&lt;/code>&lt;/strong> 、 &lt;strong>&lt;code>normal&lt;/code>&lt;/strong> 、 &lt;strong>&lt;code>huge&lt;/code>&lt;/strong> 三种规格。下面要分析的 &lt;strong>&lt;code>SizeClasses&lt;/code>&lt;/strong> 就是记录了 small和normal规格值的一张表。以及一些其他的有用的信息&lt;/p>
&lt;h3 id="2-sizeclasses解析">2. SizeClasses解析&lt;/h3>
&lt;p>先看一下 &lt;strong>&lt;code>SizeClasses&lt;/code>&lt;/strong> 类的说明。&lt;/p>
&lt;h4 id="21-sizeclasses关键字段说明">2.1 SizeClasses关键字段说明&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>LOG2_SIZE_CLASS_GROUP&lt;/strong>： 每次大小加倍时，size类计数的对数。值为：2&lt;/li>
&lt;li>&lt;strong>LOG2_MAX_LOOKUP_SIZE&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>index&lt;/strong>： 内存块size的索引&lt;/li>
&lt;li>&lt;strong>log2Group&lt;/strong>：内存块分组&lt;/li>
&lt;li>&lt;strong>log2Delta&lt;/strong>：增量大小的log2值&lt;/li>
&lt;li>&lt;strong>nDelta&lt;/strong>：增量乘数&lt;/li>
&lt;li>&lt;strong>isMultiPageSize&lt;/strong>：表示size是否为page的倍数&lt;/li>
&lt;li>&lt;strong>isSubPage&lt;/strong>：表示是否为一个subPage类型&lt;/li>
&lt;li>&lt;strong>smallMaxSizeIdx&lt;/strong>：小规格内存的最小Index&lt;/li>
&lt;li>&lt;strong>sizeClasses&lt;/strong>:元组表 [index, log2Group, log2Delta, nDelta, isMultiPageSize,isSubPage, log2DeltaLookup]&lt;/li>
&lt;/ul>
&lt;p>看一下在Debug模式下 &lt;strong>&lt;code>SizeClasses&lt;/code>&lt;/strong> 相关的属性值&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/sizeClassesdebug%E7%9B%B8%E5%85%B3%E5%80%BC.png" alt="sizeClassesdebug相关值">&lt;/p>
&lt;h4 id="22-sizeclasses格式">2.2 sizeClasses格式&lt;/h4>
&lt;p>下面来看一下 &lt;strong>&lt;code>sizeClasses&lt;/code>&lt;/strong> 下保存了什么。&lt;/p>
&lt;blockquote>
&lt;p>源码的介绍中也给了一些说明，但是如果需要一个完整的要怎么办呢？ 同样我们可以写写一个简单的Netty项目，然后启动把debug的断点打在类里面如下图方式获取：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/nettySizeClasses.gif" alt="nettySizeClasses">&lt;/p>
&lt;/blockquote>
&lt;p>表格的数据如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">index&lt;/th>
&lt;th style="text-align:center">log2Group&lt;/th>
&lt;th style="text-align:center">log2Delta&lt;/th>
&lt;th style="text-align:center">nDelta&lt;/th>
&lt;th style="text-align:center">isMultiPageSize&lt;/th>
&lt;th style="text-align:center">isSubPage&lt;/th>
&lt;th style="text-align:center">log2DeltaLookup&lt;/th>
&lt;th>size&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>16B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>32B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>48B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>64B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>80B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>96B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>112B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td>128B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td>160B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td>192B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td>224B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td>256B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td>320B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td>384B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td>448B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td>512B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td>640B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td>768B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td>896B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td>1024B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td>1280B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td>1536B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td>1792B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td>2048B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">24&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td>2560B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">25&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td>3072B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">26&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td>3584B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">27&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td>4096B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">28&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>5120B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">29&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>6144B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">30&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>7168B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">31&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>8K(PageSize)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>10K&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">33&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>12KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">34&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>14KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">35&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>16KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">36&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>20KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">37&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>24KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">38&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>28KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">39&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>32KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">40&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>40KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">41&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>48KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">42&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>56KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">43&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>64KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">44&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>80KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">45&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>96KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">46&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>112KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">47&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>128KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">48&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>160KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">49&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>192KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">50&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>224KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">51&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>256KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">52&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>320KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">53&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>384KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">54&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>448KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">55&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>512KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">56&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>640KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">57&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>768KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">58&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>896KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">59&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>1.0MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">60&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>1.25MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">61&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>1.5MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">62&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>1.75MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">63&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>2MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">64&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>2.5MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">65&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>3MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">66&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>3.5MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">67&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>4MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">68&lt;/td>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>5MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">69&lt;/td>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>6MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">70&lt;/td>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>7MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">71&lt;/td>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>8MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">72&lt;/td>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>10MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">73&lt;/td>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>12MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">74&lt;/td>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>14MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">75&lt;/td>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>16MB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>表格最后面的size如何获取呢？简单的方式还是用debug的方式获取：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220108163159653.png" alt="image-20220108163159653">&lt;/p>
&lt;p>使用IDEA的 &lt;strong>&lt;code>Add Inline Watch&lt;/code>&lt;/strong> 增加如下的打印&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220108163134197.png" alt="image-20220108163134197">&lt;/p>
&lt;/blockquote>
&lt;p>表格说明：&lt;/p>
&lt;ul>
&lt;li>不管是Small和normal的内存规格的内存，分割的粒度更小。&lt;/li>
&lt;li>从 &lt;strong>&lt;code>isSubPage&lt;/code>&lt;/strong> 列可以看出来， 内存小于等于 &lt;strong>&lt;code>28K&lt;/code>&lt;/strong> 表示Subpage&lt;/li>
&lt;/ul>
&lt;h4 id="23-源码分析">2.3 源码分析&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220108170650412.png" alt="image-20220108170650412">&lt;/p>
&lt;p>&lt;strong>&lt;code>SizeClasses#sizeClasses&lt;/code>&lt;/strong> 方法负责 计算 &lt;strong>&lt;code>sizeClasses&lt;/code>&lt;/strong> 表格。&lt;strong>&lt;code>SizeClasses&lt;/code>&lt;/strong> 主要负责根据请求的分配的内存大小规范到最接近 &lt;strong>&lt;code>sizeClasses&lt;/code>&lt;/strong> 表格中的最接近的大小。&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;code>SizeClasses&lt;/code>&lt;/strong> 主要是 &lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 的实现，为了更细粒度的管理内存，减少内存碎片的产生&lt;/li>
&lt;li>&lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 没有做深入的研究，如果有想研究的可以去&lt;a href="https://github.com/jemalloc/jemalloc">Github&lt;/a> 研究C 的实现&lt;/li>
&lt;li>&lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 的内存规格减少了Tiny类型，这个也提现在Netty的实现中，在 &lt;strong>&lt;code>SizeClass&lt;/code>&lt;/strong> 枚举类中也去掉了 &lt;strong>&lt;code>Tiny&lt;/code>&lt;/strong> 类型&lt;/li>
&lt;/ul></description></item><item><title>Middlewares: Netty源码解析-池化内存管理解析</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-analysis-pooled-manage/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：4.1.72.Final&lt;/p>
&lt;/blockquote>
&lt;p>Netty当下最热火最热门的网络编程框架需要处理海量的字节数据。Netty提供了字节池化的机制。对象池化内存分配，使用完成后归给内存次。池化内存，那么内存的管理必不可少。Netty基于&lt;a href="http://jemalloc.net/">jemalloc&lt;/a> 实现了一套内存分配和管理的机制。&lt;/p>
&lt;blockquote>
&lt;p>GitHub地址：https://github.com/jemalloc/jemalloc&lt;/p>
&lt;p>4.1.72.Final 版本基于 jemalloc4 实现&lt;/p>
&lt;/blockquote>
&lt;p>借鉴 &lt;strong>&lt;code>jemalloc&lt;/code>&lt;/strong> 用来解决两个问题：&lt;/p>
&lt;ul>
&lt;li>多线程下的内存回收与分配&lt;/li>
&lt;li>内存的碎片化问题(不断分配和回收过程中会产生，jemalloc4 进一步优化了内存碎片产生)&lt;/li>
&lt;/ul>
&lt;h3 id="1-netty中内存的规格">1. Netty中内存的规格&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty%E5%86%85%E5%AD%98%E8%A7%84%E6%A0%BC2.png" alt="Netty内存规格2 (1)">&lt;/p>
&lt;p>如上图所示Netty中内存规格分为三类(SizeClass中定义了)：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">SizeClass&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Small&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Normal&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tiny现在已经去掉&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>small：0-28K（包含）&lt;/li>
&lt;li>normal: 28K(不包含)-16M(包含)&lt;/li>
&lt;li>Huge: 大于16M（不会进行池化）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。&lt;/p>
&lt;/blockquote>
&lt;p>Netty的内存管理实现借鉴了 &lt;strong>&lt;code>jemalloc&lt;/code>&lt;/strong> 所以很多概念和 &lt;strong>&lt;code>jemalloc&lt;/code>&lt;/strong> 中的概念相同。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Chunk&lt;/strong>：Netty向操作系统申请内存的最小单位(默认值16M),是Run的集合&lt;/li>
&lt;li>&lt;strong>Run&lt;/strong>: 对应一块连续的内存，大小是Page的倍数&lt;/li>
&lt;li>&lt;strong>Page&lt;/strong>: Chunk的最小分配单元，默认大小为8K,一个Chunk默认有2K个Page.&lt;/li>
&lt;li>&lt;strong>Subpage&lt;/strong>: 负责Page内的内存分配，目的是为了减少内存的浪费。如果需要分配的内存小于Page的大小(8K)比如只有100B,如果直接分配一个Page(8K)那就直接浪费了。Subpage的最小是16B的倍数。Subpage没有固定的大小，需要根据用户分配的缓冲区决定。&lt;/li>
&lt;/ul>
&lt;h3 id="2-netty内存池的数据结构">2. Netty内存池的数据结构&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/%E5%86%85%E5%AD%98%E6%B1%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="内存池的数据结构">&lt;/p>
&lt;p>通过图可以知道，Netty根据内存模型抽象出来了一些组件， &lt;strong>&lt;code>PoolArena、PoolChunk、PoolChunkList、PoolSubpage、PoolThreadCache、MemoryRegionCache&lt;/code>&lt;/strong> 下面根据不同模块结合代码逐一分析其数据结构和实现。&lt;/p>
&lt;blockquote>
&lt;p>Tips:很多概念和jemalloc中的概念相似大同小异，当前研究的代码版本中取消了网上很多资料里面出现的内存规格 &lt;strong>&lt;code>tiny&lt;/code>&lt;/strong> 类型。只有 &lt;strong>small、normal、huge&lt;/strong>, 具体是因为当前的版本的Netty内存分配实现是基于 &lt;strong>&lt;code>jemalloc4&lt;/code>&lt;/strong> 。&lt;/p>
&lt;/blockquote>
&lt;h4 id="21-poolsubpage数据结构解析">2.1 PoolSubpage数据结构解析&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">PoolSubpageMetric&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//所属的chunk
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//页面偏移量
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//PoolSubpage 在 PoolChunk 中 memory 的偏移量
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//Run的大小
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">bitmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//每一块小内存状态
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">prev&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//前一个PoolSubpage
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">next&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//后一个PoolSubpage
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">doNotDestroy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">elemSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 每个小内存块的大小（最小16B）
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">maxNumElems&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 最多可以存放多少小内存块：8K(page默认大小)/elemSize=512
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">bitmapLength&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">nextAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">numAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 可用于分配的内存块个数
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要关注两个点：&lt;/p>
&lt;ul>
&lt;li>bitmap如何记录内存状态&lt;/li>
&lt;li>PoolSubpage如何和PoolArena关联&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>bitmap如何记录内存状态：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>bitmap&lt;/code>&lt;/strong> 数组长度由 &lt;strong>&lt;code>PoolSubpage&lt;/code>&lt;/strong> 的构造函数中的一段代码决定:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//LOG2_QUANTUM=4
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">bitmap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">6&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">LOG2_QUANTUM&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么 &lt;strong>&lt;code>runSize&lt;/code>&lt;/strong> 的大小决定了 &lt;strong>&lt;code>bitmap&lt;/code>&lt;/strong> 的大小。 &lt;strong>PoolChunk#allocateSubpage&lt;/strong> 分配 &lt;strong>&lt;code>Run&lt;/code>&lt;/strong> （Run的大小也是这里决定）&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">allocateSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is need as we may add it back and so alter the linked-list structure.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">head&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">findSubpagePoolHead&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//allocate a new run
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">calculateRunSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//runSize must be multiples of pageSize
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">runHandle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">allocateRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runHandle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runOffset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runHandle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">subpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">elemSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">sizeIdx2size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">subpage&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">runHandle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">),&lt;/span> &lt;span style="color:#000">elemSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">subpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">subpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">subpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: Run必须是PageSize的倍数。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;code>PoolSubpage&lt;/code>&lt;/strong> 通过位图 &lt;strong>&lt;code>bitmap&lt;/code>&lt;/strong> 记录子内存是否已经被使用，bit 的取值为 0 或者 1&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/SubpageBitmap%20(1).png" alt="SubpageBitmap (1)">&lt;/p>
&lt;p>&lt;strong>PoolSubpage如何和PoolArena关联&lt;/strong>&lt;/p>
&lt;p>在前面的图有体现， &lt;strong>&lt;code>PoolArena&lt;/code>&lt;/strong> 类中有一个 &lt;strong>&lt;code>smallSubpagePools&lt;/code>&lt;/strong> 属性。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">SizeClasses&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">PoolArenaMetric&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">smallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">PooledByteBufAllocator&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">cacheAlignment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">numSmallSubpagePools&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nSubpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// nsubpage = 39 查看之前的 《Netty源码解析-SizeClasses》文章中截图有
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">smallSubpagePools&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newSubpagePoolArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">numSmallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">smallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">++)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">smallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newSubpagePoolHead&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">newSubpagePoolHead&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">head&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;();&lt;/span>
&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prev&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">next&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/PoolArena%E5%92%8CSubpage%E5%85%B3%E8%81%94%20(1).png" alt="PoolArena和Subpage关联 (1)">&lt;/p>
&lt;p>Subpage有39个可以选择的类型。&lt;/p>
&lt;h4 id="22-poolchunk数据结构解析">2.2 PoolChunk数据结构解析&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">PoolChunkMetric&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">SIZE_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">15&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">INUSED_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">SUBPAGE_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">BITMAP_IDX_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">32&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">IS_SUBPAGE_SHIFT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">BITMAP_IDX_BIT_LENGTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">IS_USED_SHIFT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">SUBPAGE_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">IS_SUBPAGE_SHIFT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">SIZE_SHIFT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">INUSED_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">IS_USED_SHIFT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">RUN_OFFSET_SHIFT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">SIZE_BIT_LENGTH&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">SIZE_SHIFT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//所属的PoolArena
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">base&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">memory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 存储的数据
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">unpooled&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//是否池化
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongLongHashMap&lt;/span> &lt;span style="color:#000">runsAvailMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//管理PoolChunk的所有的Run（使用或者没有使用）
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongPriorityQueue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">runsAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 优先队列，每一个队列管理同样大小的Run
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">subpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//PoolSubpage列表
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Deque&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">cachedNioBuffers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">freeBytes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pinnedBytes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">prev&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//前置节点
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">next&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//后置节点
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Chunk内存中的结构如图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty-Chunk-Layout.png" alt="Netty-Chunk-Layout">&lt;/p>
&lt;ul>
&lt;li>Page组成Run,Run的大小必须是Page的整数倍 RunSize = N * PageSize (N &amp;gt;= 1的整数)&lt;/li>
&lt;li>Subpage的大小为 16B-28K,所以有时候Subpage也包含多个Page（这里是jemalloc4为了进一步解决内存碎片化的问题）&lt;/li>
&lt;li>Chunk中还有一些没有使用的内存段。这些可以待分配&lt;/li>
&lt;/ul>
&lt;p>那么这些内存的状态以及大小什么的如何管理？ 在Chunk中定义了一个 handle（long类型）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty-chunk-handle%20(1).png" alt="Netty-chunk-handle (1)">&lt;/p>
&lt;p>如上图，从上到下分别long的高位到低位。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>o（runOffset）: runOffset(页面的在Chunk的偏移量)，15bit&lt;/strong>&lt;/li>
&lt;li>&lt;strong>s（size）: Run的大小(这个字段存的是page的数量)， 15bit&lt;/strong>&lt;/li>
&lt;li>&lt;strong>u（isUsed）: 当前内存是否使用标记位，1bit&lt;/strong>&lt;/li>
&lt;li>&lt;strong>e（isSubpage）: 当前是否为Subpage标记位，1bit&lt;/strong>&lt;/li>
&lt;li>&lt;strong>b（bitmapIdx）: Subpage的位图索引(bitmapIdx),如果为0表示不是Subpage,32bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>然后关注一下 &lt;strong>&lt;code>PoolChunk&lt;/code>&lt;/strong> 的几个重要属性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>runsAvailMap&lt;/strong>&lt;/p>
&lt;p>管理Run状态的(使用，未使用)的map&lt;/p>
&lt;p>&lt;strong>key: runOffset&lt;/strong>&lt;/p>
&lt;p>&lt;strong>value: handle&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>runsAvail&lt;/strong>&lt;/p>
&lt;p>一个优先队列数组，每一个队列管理相同大小的Runs。 Run按照offset进行存储，所以我们总是用较小的偏移量分配运行(优先队列的特点)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>PoolChunk关键算法解析：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>初始化&lt;/strong>&lt;/p>
&lt;p>在一开始，我们存储了初始运行，也就是整个数据块，初始化的Run:&lt;/p>
&lt;pre>&lt;code class="language-properties" data-lang="properties">runOffset = 0
size = chunkSize
isUsed = false
isSubpage = false
bitmapIdx = 0
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>PoolChunk#allocateRun(int runSize)算法&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">allocateRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pages&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageIdx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pages2pageIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runsAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//find first queue which has at least one big enough run
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">queueIdx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runFirstBestFit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pageIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queueIdx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//get run with min offset in this queue
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">LongPriorityQueue&lt;/span> &lt;span style="color:#000">queue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runsAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">queueIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">handle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">poll&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">handle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">LongPriorityQueue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">NO_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">isUsed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid handle: &amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">removeAvailRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">handle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">splitLargeRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pinnedSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">freeBytes&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#000">pinnedSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">pinnedBytes&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">pinnedSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>根据runSize找到第一个可用的Run在 &lt;strong>&lt;code>runsAvail&lt;/code>&lt;/strong> 数组&lt;/li>
&lt;li>如果Run的Page大于请求Page，则将其拆分，并且保存剩下的Run随后使用&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>PoolChunk#allocateSubpage(int sizeIdx)算法&lt;/strong>&lt;/p>
&lt;pre>&lt;code>private long allocateSubpage(int sizeIdx) {
// Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.
// This is need as we may add it back and so alter the linked-list structure.
PoolSubpage&amp;lt;T&amp;gt; head = arena.findSubpagePoolHead(sizeIdx);
synchronized (head) {
//allocate a new run
int runSize = calculateRunSize(sizeIdx);
//runSize must be multiples of pageSize
long runHandle = allocateRun(runSize);
if (runHandle &amp;lt; 0) {
return -1;
}
int runOffset = runOffset(runHandle);
assert subpages[runOffset] == null;
int elemSize = arena.sizeIdx2size(sizeIdx);
PoolSubpage&amp;lt;T&amp;gt; subpage = new PoolSubpage&amp;lt;T&amp;gt;(head, this, pageShifts, runOffset,
runSize(pageShifts, runHandle), elemSize);
subpages[runOffset] = subpage;
return subpage.allocate();
}
}
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>根据sizeIdx找到一个没有满的Subpage。如果存在就返回，否则分配一个新的PoolSubpage,然后调用init()。注意：当调用init()这个subpage对象被添加到PoolArena的 subpagesPool 中。&lt;/li>
&lt;li>调用 &lt;strong>&lt;code>subpage.allocate()&lt;/code>&lt;/strong> 分配&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>PoolChunk#free(long handle, int normCapacity, ByteBuffer nioBuffer)算法&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">free&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">normCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ByteBuffer&lt;/span> &lt;span style="color:#000">nioBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">runSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">pinnedBytes&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">size2SizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">normCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">head&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">findSubpagePoolHead&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sIdx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">subpage&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">subpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">sIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">subpage&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">subpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">doNotDestroy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is need as we may add it back and so alter the linked-list structure.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">subpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">free&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bitmapIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//the subpage is still used, do not free it
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">subpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">doNotDestroy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Null out slot in the array as it was freed and we should not use it anymore.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">subpages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">sIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//start free run
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">synchronized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runsAvail&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// collapse continuous runs, successfully collapsed runs
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// will be removed from runsAvail and runsAvailMap
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">finalRun&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">collapseRuns&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//set run as not used
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">finalRun&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">~(&lt;/span>&lt;span style="color:#000">1L&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#000">IS_USED_SHIFT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//if it is a subpage, set it to run
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">finalRun&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">~(&lt;/span>&lt;span style="color:#000">1L&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#000">IS_SUBPAGE_SHIFT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">insertAvailRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">runOffset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">finalRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">),&lt;/span> &lt;span style="color:#000">runPages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">finalRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">),&lt;/span> &lt;span style="color:#000">finalRun&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">freeBytes&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">runSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nioBuffer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">cachedNioBuffers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;span style="color:#000">cachedNioBuffers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">PooledByteBufAllocator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">DEFAULT_MAX_CACHED_BYTEBUFFERS_PER_CHUNK&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cachedNioBuffers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">offer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nioBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>如果是Subpage,那么将分片返回到当前的Subpage.&lt;/li>
&lt;li>如果Subpage没有被使用或者是一个Run,开启释放Run&lt;/li>
&lt;li>合并连续可用的Run&lt;/li>
&lt;li>保存合并的Run&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="23-poolarena数据结构解析">2.3 PoolArena数据结构解析&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">SizeClasses&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">PoolArenaMetric&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">HAS_UNSAFE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">hasUnsafe&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">SizeClass&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Small&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Normal&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PooledByteBufAllocator&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//所属分配器
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">numSmallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 39
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">directMemoryCacheAlignment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolSubpage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">smallSubpagePools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">q050&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">q025&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">q000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">qInit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">q075&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">q100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolChunkListMetric&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">chunkListMetrics&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Metrics for allocations and deallocations
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">allocationsNormal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We need to use the LongCounter here as this is not guarded via synchronized block.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongCounter&lt;/span> &lt;span style="color:#000">allocationsSmall&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newLongCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongCounter&lt;/span> &lt;span style="color:#000">allocationsHuge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newLongCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongCounter&lt;/span> &lt;span style="color:#000">activeBytesHuge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newLongCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">deallocationsSmall&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">deallocationsNormal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We need to use the LongCounter here as this is not guarded via synchronized block.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">LongCounter&lt;/span> &lt;span style="color:#000">deallocationsHuge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newLongCounter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Number of thread caches backed by this arena.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">AtomicInteger&lt;/span> &lt;span style="color:#000">numThreadCaches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">AtomicInteger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Netty 借鉴了 jemalloc 中 Arena 的设计思想，采用固定数量的多个 Arena 进行内存分配，Arena 的默认数量通常是CPU核数*2(也可能选择内存计算关系较小的一个)，通过创建多个 Arena 来缓解资源竞争问题，从而提高内存分配效率。线程在首次申请分配内存时，会通过 round-robin 的方式轮询 Arena 数组，选择一个固定的 Arena，在线程的生命周期内只与该 Arena 打交道，所以每个线程都保存了 Arena 信息，从而提高访问效率。下面代码就是计算PoolArena默认个数：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PooledByteBufAllocator&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">AbstractByteBufAllocator&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">ByteBufAllocatorMetricProvider&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">DEFAULT_NUM_HEAP_ARENA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//默认arena的数量
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">DEFAULT_NUM_DIRECT_ARENA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//默认arena的数量
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">defaultMinNumArena&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">NettyRuntime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">availableProcessors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">defaultChunkSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">DEFAULT_PAGE_SIZE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#000">DEFAULT_MAX_ORDER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">DEFAULT_NUM_HEAP_ARENA&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">max&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">SystemPropertyUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;io.netty.allocator.numHeapArenas&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">min&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">defaultMinNumArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">runtime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">maxMemory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">defaultChunkSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)));&lt;/span>
&lt;span style="color:#000">DEFAULT_NUM_DIRECT_ARENA&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">max&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">SystemPropertyUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;io.netty.allocator.numDirectArenas&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">min&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">defaultMinNumArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">maxDirectMemory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">defaultChunkSize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)));&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>PoolArena&lt;/code>&lt;/strong> 有两个实现分别对应堆内内存和堆外内存：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>DirectArena&lt;/strong>&lt;/li>
&lt;li>&lt;strong>HeapArena&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>图示数据结构如图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/PoolArena%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(1).png" alt="PoolArena数据结构 (1)">&lt;/p>
&lt;p>包含了一个 &lt;strong>&lt;code>smallSubpagePools（ PoolSubpage&amp;lt;T&amp;gt;[]）&lt;/code>&lt;/strong> 和6个PoolChunkList&lt;T> 。&lt;/p>
&lt;ul>
&lt;li>smallSubpagePools存放small Subpage类型的内存快&lt;/li>
&lt;li>6个PoolChunkList 存放使用率不同的Chunk,构成一个双向循环链表&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>PoolArena&lt;/code>&lt;/strong> 对应实现了 &lt;strong>&lt;code>Subpage&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>Chunk&lt;/code>&lt;/strong> 中的内存分配。 &lt;strong>&lt;code>PoolSubpage&lt;/code>&lt;/strong> 负责分配小于等于28K的内存，&lt;strong>&lt;code>PoolChunkList&lt;/code>&lt;/strong> 负责大于等于32K的内存。&lt;strong>&lt;code>PoolSubpage&lt;/code>&lt;/strong> 分配的内存情况有39种(为什么可以查看之前的《Netty源码解析-SizeClasses》)。&lt;/p>
&lt;p>&lt;strong>&lt;code>PoolChunkList&lt;/code>&lt;/strong> 在 &lt;strong>&lt;code>PoolArena&lt;/code>&lt;/strong> 初始化了6个：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">PooledByteBufAllocator&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">cacheAlignment&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">q100&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">MAX_VALUE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q075&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">q100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">75&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q050&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">q075&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">50&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q025&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">q050&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">25&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">75&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">q025&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">50&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">qInit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">q000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">MIN_VALUE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">25&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q100&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">q075&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q075&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">q050&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q050&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">q025&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q025&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">q000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">q000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">qInit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">qInit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/ChunkList%E4%BD%BF%E7%94%A8%E7%8E%87%20(1).png" alt="ChunkList使用率 (1)">&lt;/p>
&lt;p>Chunk 内存使用率的变化，Netty 会重新检查内存的使用率并放入对应的 PoolChunkList，所以 PoolChunk 会在不同的 PoolChunkList 移动。&lt;/p>
&lt;p>&lt;strong>疑问1：qInit 和 q000 为什么需要设计成两个&lt;/strong>&lt;/p>
&lt;p>qInit 用于存储初始分配的 PoolChunk，因为在第一次内存分配时，PoolChunkList 中并没有可用的 PoolChunk，所以需要新创建一个 PoolChunk 并添加到 qInit 列表中。qInit 中的 PoolChunk 即使内存被完全释放也不会被回收，避免 PoolChunk 的重复初始化工作。&lt;/p>
&lt;p>&lt;strong>疑问2：在方法 PoolArena#allocateNormal 为什么首先判断的是 q050&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">allocateNormal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">PooledByteBuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">PoolThreadCache&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">q050&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>
&lt;span style="color:#000">q025&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>
&lt;span style="color:#000">q000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>
&lt;span style="color:#000">qInit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span>
&lt;span style="color:#000">q075&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Add a new chunk.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pageSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nPSizes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pageShifts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunkSize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">success&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">success&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">qInit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">add&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>分配的逻辑 q050 &amp;mdash;&amp;ndash;&amp;gt; q025 &amp;mdash;&amp;ndash;&amp;gt; q000 &amp;mdash;-&amp;gt; qInit &amp;mdash;-&amp;gt; q075。&lt;/p>
&lt;p>网上解释：折中的选择，在频繁分配内存的场景下，如果从 q000 开始，会有大部分的 PoolChunk 面临频繁的创建和销毁，造成内存分配的性能降低。如果从 q050 开始，会使 PoolChunk 的使用率范围保持在中间水平，降低了 PoolChunk 被回收的概率，从而兼顾了性能。(没有看到官方的设计说明)&lt;/p>
&lt;h4 id="24-poolchunklist数据结构解析">2.4 PoolChunkList数据结构解析&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">PoolChunkListMetric&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Iterator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolChunkMetric&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">EMPTY_METRICS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Collections&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&amp;lt;&lt;/span>&lt;span style="color:#000">PoolChunkMetric&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000">emptyList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">iterator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">nextList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">minUsage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">maxUsage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">maxCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">PoolChunk&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">head&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">freeMinThreshold&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">freeMaxThreshold&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// This is only update once when create the linked like list of PoolChunkList in PoolArena constructor.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">PoolChunkList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">prevList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的数据结构可以看出来，PoolChunkList组成了一个双向循环列表。&lt;/p>
&lt;p>上面就是池化内存分配过程中使用的类和相关的数据结构。但是在分配缓存的过程中还有一个缓存存在。下面来分析一下缓存。缓存主要涉及到两个类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PoolThreadCache&lt;/strong>&lt;/li>
&lt;li>&lt;strong>MemoryRegionCache&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="3-池化分配中的缓存">3. 池化分配中的缓存&lt;/h3>
&lt;h4 id="31-poolthreadcache">3.1 PoolThreadCache&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PoolThreadCache&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">InternalLogger&lt;/span> &lt;span style="color:#000">logger&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">InternalLoggerFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getInstance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">PoolThreadCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">INTEGER_SIZE_MINUS_ONE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SIZE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&amp;gt;&lt;/span> &lt;span style="color:#000">heapArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PoolArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">directArena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Hold the caches for the different size classes, which are tiny, small and normal.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&amp;gt;[]&lt;/span> &lt;span style="color:#000">smallSubPageHeapCaches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">smallSubPageDirectCaches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&amp;gt;[]&lt;/span> &lt;span style="color:#000">normalHeapCaches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">normalDirectCaches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">freeSweepAllocationThreshold&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">AtomicBoolean&lt;/span> &lt;span style="color:#000">freed&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">AtomicBoolean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">allocations&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Netty官方的说明：充当分配的线程缓存。这个和jemalloc可伸缩内存分配技术一样。&lt;/p>
&lt;p>当内存释放时，与 jemalloc 一样，Netty 并没有将缓存归还给 PoolChunk，而是使用 PoolThreadCache 缓存起来，当下次有同样规格的内存分配时，直接从 PoolThreadCache 取出使用即可。这个可在 &lt;strong>&lt;code>PoolArena#tcacheAllocateSmall&lt;/code>&lt;/strong> 方法可以看出来：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">tcacheAllocateSmall&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">PoolThreadCache&lt;/span> &lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">PooledByteBuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">allocateSmall&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reqCapacity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sizeIdx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// was able to allocate out of the cache so move on
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在PoolThreadCache缓存的时候使用了 &lt;strong>&lt;code>MemoryRegionCache&lt;/code>&lt;/strong> 。 存在两个纬度：&lt;/p>
&lt;ul>
&lt;li>堆内或者堆外&lt;/li>
&lt;li>small或者normal&lt;/li>
&lt;/ul>
&lt;h4 id="32-memoryregioncache">3.2 MemoryRegionCache&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Queue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Entry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">SizeClass&lt;/span> &lt;span style="color:#000">sizeClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">allocations&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">MemoryRegionCache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">SizeClass&lt;/span> &lt;span style="color:#000">sizeClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">size&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">MathUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">safeFindNextPositivePowerOfTwo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">queue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">PlatformDependent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newFixedMpscQueue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">sizeClass&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sizeClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有几个属性：&lt;/p>
&lt;ul>
&lt;li>size: 队列长度， small默认值为256， Normal的默认值为64&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>缓存最大数据大小为32K(PooledByteBufAllocator的静态变量DEFAULT_MAX_CACHED_BUFFER_CAPACITY设置了)&lt;/p>
&lt;/blockquote>
&lt;h3 id="4-netty-池化内存分配流程">4. Netty 池化内存分配流程&lt;/h3>
&lt;p>&lt;strong>&lt;code>Netty&lt;/code>&lt;/strong> 池化 &lt;strong>&lt;code>ByteBuf&lt;/code>&lt;/strong> 分配由 &lt;strong>&lt;code>PooledByteBufAllocator&lt;/code>&lt;/strong> 来分配。分配流程如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/Netty%E6%B1%A0%E5%8C%96%E5%88%86%E9%85%8D%E6%B5%81%E7%A8%8B%20.png" alt="Netty池化分配流程 ">&lt;/p>
&lt;h3 id="5-总结">5. 总结&lt;/h3>
&lt;ul>
&lt;li>Netty内存分配现在是基于jemalloc4实现的，数据结构模型和之前的有所区别，特别是Chunk的分配管理上面&lt;/li>
&lt;li>Page, Subpage, PoolSubpage, PoolChunk、ChunkList、Run， PoolArena等相关类是实现池化内存分配的重要组成&lt;/li>
&lt;li>**&lt;code>PooledByteBufAllocator&lt;/code>**继承了分配的顶层接口 &lt;strong>&lt;code>ByteBufAllocator&lt;/code>&lt;/strong> 来作为分配堆内和堆外池化内存的入口&lt;/li>
&lt;li>&lt;strong>&lt;code>PoolThreadLocalCache&lt;/code>&lt;/strong> 负责缓存分配的内存，Small 的缓存队列默认长度为256，Normal的缓存队列默认长度为64，默认的最大缓存大小32K。&lt;/li>
&lt;/ul></description></item><item><title>Middlewares: Netty FastThreadLocal相比Java ThreadLocal到底快在哪里?</title><link>/middlewares/netty/netty-source-code-analysis/netty-fastthreadlocal/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-fastthreadlocal/</guid><description>
&lt;p>在Netty中有这样一个类 &lt;strong>FastThreadLocal&lt;/strong> 从名字可以看出来应该和Java原有的 &lt;strong>ThreadLocal&lt;/strong> 有着同样的作用，但是前面加了一个修饰 &lt;strong>&lt;code>Fast&lt;/code>&lt;/strong> ，这意思就是具有和Java原有的 &lt;strong>ThreadLocal&lt;/strong> 有着同样的作用但是比它快。那到底是怎么样的设计能让 &lt;strong>FastThreadLocal&lt;/strong> 更加的快。&lt;/p>
&lt;h3 id="1-性能对比">1. 性能对比&lt;/h3>
&lt;p>FastThreadLocal比ThreadLocal快空口无凭，用数据说话，这里基于JMH来对FastThreadLocal和ThreadLocal进行测试。测试代码如下：&lt;/p>
&lt;blockquote>
&lt;p>JMH使用可以参考一下之前的文章 《&lt;a href="https://juejin.cn/post/7041886951007338533">Java微基准测试工具-JMH&lt;/a>》&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@BenchmarkMode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">AverageTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Warmup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">iterations&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Measurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">iterations&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Threads&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">200&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Fork&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@State&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Scope&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Benchmark&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@OutputTimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">MILLISECONDS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ThreadLocalTest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">FastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">fastThreadLocal&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">FastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">ThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">threadLocal&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;gt;();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Benchmark&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">fastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Blackhole&lt;/span> &lt;span style="color:#000">blackhole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">FastThreadLocalThread&lt;/span> &lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">FastThreadLocalThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">100000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;++&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">fastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">fastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">fastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">remove&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">join&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InterruptedException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">blackhole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">consume&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Benchmark&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">threadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Blackhole&lt;/span> &lt;span style="color:#000">blackhole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Thread&lt;/span> &lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">100000&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;++&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">threadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">threadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">threadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">remove&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">join&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InterruptedException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">printStackTrace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">blackhole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">consume&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">RunnerException&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Options&lt;/span> &lt;span style="color:#000">opt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">OptionsBuilder&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">include&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ThreadLocalTest&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getSimpleName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;result.json&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">resultFormat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ResultFormatType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">JSON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">build&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runner&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看一下运行结果的截图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220122220713516.png" alt="image-20220122220713516">&lt;/p>
&lt;p>然后看一下将 result.json导入可视化网站后生成的对比图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/FastThreadLocalJMH.png" alt="FastThreadLocalJMH">&lt;/p>
&lt;p>这里对比的是调用的平均时间，从图可以看出来FastThreadLocal优于ThreadLocal(FastThreadLocal时间更短)。&lt;/p>
&lt;p>下面看一下吞吐量：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@BenchmarkMode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Throughput&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Warmup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">iterations&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Measurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">iterations&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Threads&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">200&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Fork&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@State&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Scope&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Benchmark&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@OutputTimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TimeUnit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SECONDS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ThreadLocalTest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220122220123489.png" alt="">&lt;/p>
&lt;p>然后看一下将 result.json导入可视化网站后生成的对比图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/FastThreadLoacl%E5%90%9E%E5%90%90%E9%87%8F.png" alt="FastThreadLoacl吞吐量">&lt;/p>
&lt;p>&lt;strong>从上面图可以得出结论：不论是单次执行方法的快慢还是吞吐量FastThreadLocal的性能都由于ThreadLocal。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>代码为什么要新建一个线程呢？因为FastThreadLocal需要搭配FastThreadLocalThread使用才能发挥出来最大作用，为了消除影响所以在ThreadLocal也同样试用了新建一个Thread去处理。这里实际运行应该比测试出来的值更加高。原因在于这里存在了线程的切换时间&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-fastthreadlocal相比threadlocal到底快在哪里">2. FastThreadLocal相比ThreadLocal到底快在哪里?&lt;/h3>
&lt;p>两者实现的功能差不多，对于两者之间的快慢取决于内部功能实现的数据结构，下面通过分析数据结构的差异来对比一下，两者之间的快慢到底是怎么引起的。&lt;/p>
&lt;h4 id="21-fastthreadlocal解析">2.1 FastThreadLocal解析&lt;/h4>
&lt;p>通过阅读 &lt;strong>FastThreadLocal&lt;/strong> 源码的get/remove操作可以知道，在 &lt;strong>FastThreadLocal&lt;/strong> 内部主要是由 &lt;strong>&lt;code>InternalThreadLocalMap&lt;/code>&lt;/strong> 来实现。只要将InternalThreadLocalMap的实现和数据结构与ThreadLocal的实现以及数据结构进行对比就能知道FastThreadLocal快的秘诀。而Netty有实现了 &lt;strong>FastThreadLocalThread&lt;/strong> 将 &lt;strong>&lt;code>InternalThreadLocalMap&lt;/code>&lt;/strong> 作为一个变量：整个结构图如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/FastThreadLoacl%E7%BB%93%E6%9E%84%20(1).png" alt="FastThreadLoacl结构 (1)">&lt;/p>
&lt;p>&lt;strong>FastThreadLocal 使用的空间换时间的做法来减少ThreadLocal哈希碰撞产生的问题。&lt;/strong>&lt;/p>
&lt;p>这里怎么去理解？我就用上面图举例子进行阐述：&lt;/p>
&lt;p>例如我们在项目中新建十个FastThreadLocal，这样的话每一个FastThreadLocal中的变脸index都是一个唯一值：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">FastThreadLocal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">index&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">InternalThreadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">nextVariableIndex&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>是通过InternalThreadLocalMap的一个静态变量产生的。当你不停的创建FastThreadLocal对象的时候就会InternalThreadLocalMap的静态变量nextIndex就会不停的往上递增。&lt;/p>
&lt;p>当 &lt;strong>FastThreadLocal-1&lt;/strong> 实例在 &lt;strong>FastThreadLocalThread&lt;/strong> 线程对象实例中调用 set方法，会创建一个 &lt;strong>InternalThreadLocalMap&lt;/strong> 实例绑定在 &lt;strong>FastThreadLocal-1&lt;/strong> 实例上面，&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//InternalThreadLocalMap#get
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">InternalThreadLocalMap&lt;/span> &lt;span style="color:#000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Thread&lt;/span> &lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">currentThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">thread&lt;/span> &lt;span style="color:#204a87;font-weight:bold">instanceof&lt;/span> &lt;span style="color:#000">FastThreadLocalThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fastGet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">((&lt;/span>&lt;span style="color:#000">FastThreadLocalThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">slowGet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//InternalThreadLocalMap#fastGet
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">InternalThreadLocalMap&lt;/span> &lt;span style="color:#000">fastGet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">FastThreadLocalThread&lt;/span> &lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">InternalThreadLocalMap&lt;/span> &lt;span style="color:#000">threadLocalMap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">threadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadLocalMap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">setThreadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadLocalMap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InternalThreadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">threadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: 这里代码有判断是不是FastThreadLocalThread，所以如果普通的Thread线程执行那么FastThreadLocal和普通的ThreadLocal没有什么区别。&lt;/p>
&lt;/blockquote>
&lt;p>然后后续的 &lt;strong>FastThreadLocal&lt;/strong> 实例set值的时候，直接就从&lt;strong>FastThreadLocal-1&lt;/strong> 实例对象上获取 &lt;strong>InternalThreadLocalMap&lt;/strong> 实例。当往 &lt;strong>InternalThreadLocalMap&lt;/strong> 实例set数据的时候就是根据不同的 &lt;strong>FastThreadLocal&lt;/strong> 的不同index放在不同的数组位置。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//FastThreadLocal#setKnownNotUnset
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">setKnownNotUnset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InternalThreadLocalMap&lt;/span> &lt;span style="color:#000">threadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">V&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">setIndexedVariable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">addToVariablesToRemove&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadLocalMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//InternalThreadLocalMap#setIndexedVariable
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">setIndexedVariable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">lookup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">indexedVariables&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">index&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">oldValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">];&lt;/span>
&lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">oldValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">UNSET&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">expandIndexedVariableTableAndSet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接设置到 &lt;strong>&lt;code>indexedVariables&lt;/code>&lt;/strong> 数组对应的位置。&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>FastThreadLocal&lt;/strong> 快的代价就是用空间换时间。但是对于现在内存较大的情况下空间换时间是一个不错的选择&lt;/li>
&lt;li>&lt;strong>FastThreadLocal&lt;/strong> 兼容了普通Thread的使用&lt;/li>
&lt;li>&lt;strong>FastThreadLocal&lt;/strong> 因为是为了Netty量身定制的所以有一定的使用局限性，必须搭配 &lt;strong>FastThreadLocalThread&lt;/strong> 才能发挥优势所在&lt;/li>
&lt;/ul></description></item><item><title>Middlewares: Netty源码分析-EventLoopGroup如何工作</title><link>/middlewares/netty/netty-source-code-analysis/netty-eventloopgroup-howto-work/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-eventloopgroup-howto-work/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：&lt;a href="https://github.com/netty/netty/releases/tag/netty-4.1.74.Final">netty-4.1.74.Final&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-reactor-线程模型">1. Reactor 线程模型&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">io.netty.example.discard&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.bootstrap.ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.EventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.nio.NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.nio.NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Discards any incoming data.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">bossGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ServerBootstrap&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (4)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServerHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_BACKLOG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">128&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (5)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_KEEPALIVE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (6)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bind and start to accept incoming connections.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">bind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (7)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Wait until the server socket is closed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// In this example, this does not happen, but you can do that to gracefully
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// shut down your server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">closeFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">finally&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">8080&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: 上面代码来源于官网，(1)位置代码构造函数修改了，增加1参数&lt;/p>
&lt;/blockquote>
&lt;p>从上面代码可以看出来Netty推荐主从Reactor的线程模型。Reactor线程模型运行机制主要有以下四步：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>连接注册&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件轮询&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件分发&lt;/p>
&lt;p>I/O事件，Accept、Read、Write&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件处理&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/Reactor%E6%A8%A1%E5%9E%8B.png" alt="Reactor模型">&lt;/p>
&lt;p>下面我们就从一下几个方面来说明&lt;code>EventLoopGroup&lt;/code> 如何工作的&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/EventLoopGroup%E5%88%86%E6%9E%90%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="EventLoopGroup分析思维导图">&lt;/p>
&lt;h3 id="2-eventloopgroup创建">2. EventLoopGroup创建&lt;/h3>
&lt;p>以 &lt;strong>NioEventLoopGroup&lt;/strong> 为例子通过跟进源码可以知道创建一个**&lt;code>EventLoopGroup&lt;/code>** 主要的逻辑都在这个 **&lt;code>MultithreadEventExecutorGroup&lt;/code>** 的构造函数里面。下面来对构造函数代码段进行分析。&lt;/p>
&lt;h4 id="21-executor的设置">2.1 Executor的设置&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305202457603.png" alt="image-20220305202457603">&lt;/p>
&lt;p>没有传入Exector的情况下，创建Netty实现的ThreadPerTaskExecutor，也可以使用Jdk的Executor实现&lt;/p>
&lt;blockquote>
&lt;p>Tips: new NioEventLoopGroup(2,Executors.newFixedThreadPool(10))&lt;/p>
&lt;/blockquote>
&lt;p>看一下 &lt;code>ThreadPerTaskExecutor&lt;/code> 实现：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305202632525.png" alt="image-20220305202632525">&lt;/p>
&lt;p>直接实现了Executor接口，整个实现比较简单。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 想一下如果使用Jdk的Executor实现，NioEventLoopGroup线程数量大于Jdk的Executor实现线程池数量会怎么样？&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>&lt;span style="color:#000">Executors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newFixedThreadPool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>后续的文章会专门讲解整个问题&lt;/p>
&lt;/blockquote>
&lt;h4 id="22-eventexecutor的创建">2.2 EventExecutor的创建&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305221245700.png" alt="image-20220305221245700">&lt;/p>
&lt;p>创建EventExecutor, 上图调用的是一个 &lt;code>MultithreadEventExecutorGroup#newChild&lt;/code> 的抽象方法。看具体的实现类实现：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305221332386.png" alt="image-20220305221332386">&lt;/p>
&lt;p>我们就以&lt;code>NioEventLoopGroup&lt;/code> 为例：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305221502196.png" alt="image-20220305221502196">&lt;/p>
&lt;p>这里创建了一个 &lt;code>NioEventLoop&lt;/code> 。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 这个和之前说的EventLoopGroup聚合了EventLoop&lt;/p>
&lt;/blockquote>
&lt;p>从上面创建EventExecutor可以看出来，最终创建的是&lt;code>NioEventLoop&lt;/code> 。从继承关系可以知道 &lt;code>NioEventLoop&lt;/code> 实现了 EventExecutor。&lt;/p>
&lt;h4 id="23-eventexecutorchooser选择器创建">2.3 EventExecutorChooser选择器创建&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305232208068.png" alt="image-20220305232208068">&lt;/p>
&lt;p>选择器创建根据 &lt;code>EventExecutor&lt;/code> 的数量。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305232443484.png" alt="image-20220305232443484">&lt;/p>
&lt;p>2的指数选择&lt;code>PowerOfTwoEventExecutorChooser&lt;/code> 。 其他的选择 &lt;code>GenericEventExecutorChooser&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305232623870.png" alt="image-20220305232623870">&lt;/p>
&lt;p>两者的区别就在于2的指数使用的 &lt;strong>&lt;code>&amp;amp;&lt;/code>&lt;/strong> 正常的使用的是 &lt;strong>&lt;code>%&lt;/code>&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips: &amp;amp;效率高于%&lt;/p>
&lt;/blockquote>
&lt;p>创建完成EventExecutor后，同时对EventExecutor数组进行处理成不能修改的&lt;code>Set&amp;lt;EventExecutor&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="3-bossgroup如何工作">3. BossGroup如何工作&lt;/h3>
&lt;p>主从的线程模式下，&lt;code>BossGroup&lt;/code> 主要负责事件轮询，下面来分析一下如何进行工作的&lt;/p>
&lt;h4 id="31-bossgroup线程启动">3.1 BossGroup线程启动&lt;/h4>
&lt;p>通过服务端的例子，通过研究源码可以知道 &lt;strong>AbstractBootstrap#initAndRegister&lt;/strong> 方法主要是创建 &lt;strong>Channel&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220305235718388.png" alt="image-20220305235718388">&lt;/p>
&lt;p>上述代码的标号3，BossGroup注册Channel也是启动线程的关键，跟进代码往下看，&lt;code>ChannelFuture regFuture = config().group().register(channel);&lt;/code> 代码的 &lt;code>register&lt;/code> 方法调用的是 &lt;code>MultithreadEventLoopGroup#register&lt;/code> 的方法：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//MultithreadEventLoopGroup#register方法
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">next&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是最终调用的是 &lt;code>SingleThreadEventLoop#register&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DefaultChannelPromise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelPromise&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ObjectUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">checkNotNull&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;promise&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">unsafe&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: MultithreadEventLoopGroup对应EventLoopGroup，SingleThreadEventLoop对应EventLoop&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>promise.channel().unsafe().register(this, promise)&lt;/code> 这里的this表示的是 NioEventLoop的实例，也就是把NioEventLoop作为参数传入了。调用的是&lt;code>AbstractChannel.AbstractUnsafe#register&lt;/code> :&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306004126148.png" alt="image-20220306004126148">&lt;/p>
&lt;p>上图代码段框出来的就是 EventLoop启动，跟进代码看一下具体的实现，execute方法具体执行的是 &lt;strong>&lt;code>SingleThreadEventExecutor#execute&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306004449915.png" alt="image-20220306004449915">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 通过查看SingleThreadEventExecutor源码你会发现，有一个Thread的属性。所以这里SingleThreadEventExecutor就相当于线程。只是对线程进行包装语义化&lt;/p>
&lt;/blockquote>
&lt;p>在线程没有在EventLoop中，就启动当前线程通过调用&lt;code>SingleThreadEventExecutor#startThread&lt;/code> 方法。 在这个方法里面又调用了&lt;code>SingleThreadEventExecutor#doStartThread&lt;/code> 方法。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306005257301.png" alt="image-20220306005257301">&lt;/p>
&lt;p>1通过了Executor来执行下面的Runable代码，前面的 &lt;strong>&lt;code>EventLoopGroup&lt;/code>&lt;/strong> 创建可以知道，在默认的情况下使用的是 &lt;code>ThreadPerTaskExecutor&lt;/code> ，而这个&lt;code>ThreadPerTaskExecutor#execute&lt;/code> 方法的实现：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ThreadPerTaskExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">Executor&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ThreadFactory&lt;/span> &lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ThreadPerTaskExecutor&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ThreadFactory&lt;/span> &lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">threadFactory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ObjectUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">checkNotNull&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;threadFactory&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Runnable&lt;/span> &lt;span style="color:#000">command&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">command&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接创建线程然后启动。&lt;/p>
&lt;p>&lt;strong>重点：看到这里你就会发现EventLoopGroup中的EventLoop已经启动了。然后在Runable中 &lt;code>thread = Thread.currentThread();&lt;/code>这段代码将当前的线程设置给了SingleThreadEventExecutor变量&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips:&lt;/p>
&lt;ul>
&lt;li>Executor如果是JDK的实现，Executor执行Runable其实就是线程池执行&lt;/li>
&lt;li>事件轮询方法是一个死循环来实现。以达到不停的轮询的目的&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="32-bossgroup轮询事件">3.2 BossGroup轮询事件&lt;/h4>
&lt;p>通过上面的分析可以知道Executor执行的Runable中的 &lt;strong>&lt;code>SingleThreadEventExecutor.this.run()&lt;/code>&lt;/strong> 这段代码就是对事件进行轮询。以&lt;code>NioEventLoopGroup&lt;/code> 为例，那么这方法的实现应该就是在 &lt;code>NioEventLoop&lt;/code> 下面来分析这个方法。&lt;/p>
&lt;p>说到轮询我们应该想到就有循环的过程，下面看一下 &lt;code>NioEventLoop#run&lt;/code> 方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306133512844.png" alt="image-20220306133512844">&lt;/p>
&lt;p>从代码可以看出来，使用的是一个无条件的for死循环来实现。进入for循环后，通过策略来计算出策略值，根据不同的策略值来做相对应的处理：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306133923602.png" alt="image-20220306133923602">&lt;/p>
&lt;p>1 计算出策略，第一次进入的时候strategy=0,为什么会是0，下面看一下&lt;code>SelectStrategy&lt;/code> 的实现类 &lt;code>DefaultSelectStrategy&lt;/code> 也只有这一个实现&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DefaultSelectStrategy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">SelectStrategy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">SelectStrategy&lt;/span> &lt;span style="color:#000">INSTANCE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DefaultSelectStrategy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">DefaultSelectStrategy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">calculateStrategy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IntSupplier&lt;/span> &lt;span style="color:#000">selectSupplier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">hasTasks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">hasTasks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">selectSupplier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">SelectStrategy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SELECT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>selectSupplier.get()&lt;/strong> 这个对于 &lt;code>NioEventLoop&lt;/code> 来说调用的是：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//NioEventLoop
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">IntSupplier&lt;/span> &lt;span style="color:#000">selectNowSupplier&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">IntSupplier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">get&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">selectNow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">selectNow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">IOException&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">selector&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">selectNow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Channel初始化的时候Selector注册的感兴趣的值为0。所以selector.selectNow() 返回的也是0。&lt;/p>
&lt;p>在队列中没有任务的时候就返回 &lt;strong>&lt;code>SelectStrategy.SELECT&lt;/code>&lt;/strong> 然后执行的就是上图代码标号2的逻辑代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">select&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">deadlineNanos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">IOException&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">deadlineNanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">NONE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">selector&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">select&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//(1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Timeout will only be 0 if deadline is within 5 microsecs
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">long&lt;/span> &lt;span style="color:#000">timeoutMillis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">deadlineToDelayNanos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">deadlineNanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">995000L&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">1000000L&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">timeoutMillis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#000">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">selector&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">selectNow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">selector&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">select&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">timeoutMillis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在定时队列任务中没有任何任务，那就直接调用 （1）&lt;code>selector.select()&lt;/code> 如果没有事件触发，就一直阻塞。 如果存在其他的情况就调用 &lt;code>selector.selectNow()&lt;/code> 或者 &lt;code>selector.select(timeoutMillis)&lt;/code> ，前一个直接返回，第二个等待一定时间没有事件触发就返回。&lt;/p>
&lt;p>&lt;strong>到了这里轮询的过程就已经基本上完成，获取到了策略值strategy，剩下的就是对策略值进行处理，也就是事件的分发&lt;/strong>&lt;/p>
&lt;h4 id="33-eventloop事件处理">3.3 EventLoop事件处理&lt;/h4>
&lt;p>下图这段代码就是 &lt;code>NioEventLoop#run&lt;/code> 方法中处理I/O事件：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306160847456.png" alt="image-20220306160847456">&lt;/p>
&lt;p>如上图代码段标号1和标号2两者大体都是处理I/O事件以及执行任务队列中的任务。跟进processSelectedKeys方法看一下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">processSelectedKeys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">selectedKeys&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">processSelectedKeysOptimized&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">processSelectedKeysPlain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">selector&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">selectedKeys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当中有两个方法，但是最终调用的是NioEventLoop#processSelectedKey方法(其中的一个分支)：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306161558506.png" alt="image-20220306161558506">&lt;/p>
&lt;p>在这个方法中就有I/O事件的处理：&lt;/p>
&lt;ul>
&lt;li>连接处理&lt;/li>
&lt;li>写处理&lt;/li>
&lt;li>读处理&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>到这里就看到了EventLoop的是如何处理I/O事件&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips: 里面的具体处理细节不去深究&lt;/p>
&lt;/blockquote>
&lt;p>在前面图的标号3的作用是用来做什么的呢？代码后面的注释：不希望唤醒，这里就是JDK的NIO的空轮询的Bug&lt;/p>
&lt;blockquote>
&lt;p>Tips: 空轮询的bug可以参看如下链接&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6670302">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6670302&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306162600078.png" alt="image-20220306162600078">&lt;/p>
&lt;p>Netty通过计数器来判断是否发生了空轮询，如果发生了那么就重新构建Selector。&lt;/p>
&lt;h3 id="4-workergroup如何工作">4. WorkerGroup如何工作&lt;/h3>
&lt;p>在创建Channel的时候，初始化调用的是&lt;code>ServerBootstrap#init&lt;/code> 方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306201837801.png" alt="image-20220306201837801">&lt;/p>
&lt;p>然后在&lt;code>ChannelPipeline&lt;/code> 末尾增加了一个 &lt;code>ServerBootstrapAcceptor&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220306202031182.png" alt="image-20220306202031182">&lt;/p>
&lt;p>从代码中看到有这样的一段代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">childGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">child&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">addListener&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelFutureListener&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">operationComplete&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">future&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(!&lt;/span>&lt;span style="color:#000">future&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">isSuccess&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">forceClose&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">child&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">future&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">cause&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>childGroup就是前面例子中的workerGroup变量，&lt;code>childGroup.register&lt;/code> 和 BossGroup的一样，只不过这个是多个线程的。后续的处理和前面分析的一样。&lt;/p>
&lt;h3 id="5-总结">5. 总结&lt;/h3>
&lt;ul>
&lt;li>EventLoopGroup组件是一个很重要的组件，代码也很复杂。但是只要抓住一点EventLoopGroup就相当于Netty的Jdk执行器Executor的一个实现就可以了。相当于线程池。&lt;/li>
&lt;li>Netty通过巧妙的设计避免了Jdk的空轮询问题。&lt;/li>
&lt;li>开发过程中主从线程模型用的比较多。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty组件-EventLoop</title><link>/middlewares/netty/netty-source-code-analysis/netty-eventloop-base/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-eventloop-base/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：&lt;a href="https://github.com/netty/netty/releases/tag/netty-4.1.74.Final">netty-4.1.74.Final&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-引言">1. 引言&lt;/h3>
&lt;p>&lt;code>EventLoop&lt;/code> 作为Netty一个重要的组件，与Reactor的线程模型相对应。要了解什么是 &lt;code>EventLoop&lt;/code> 同时需要了解 &lt;code>EventLoopGroup、EventExecutor、EventExecutorGroup、SingleThreadEventLoop&lt;/code> 。 这些类之间有什么关系呢？研究过代码的会发现这个这些类之间错综复杂，看的头有点晕。下面我们来看下这些类之间的关系。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/NioEventLoopGroup.png" alt="NioEventLoopGroup">&lt;/p>
&lt;h3 id="2-eventexecutor和eventexecutorgroup">2. EventExecutor和EventExecutorGroup&lt;/h3>
&lt;p>事件执行器用来执行处理事件&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">EventExecutorGroup&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">ScheduledExecutorService&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Iterable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">EventExecutor&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>继承了 &lt;code>ScheduledExecutorService&lt;/code> 说明是一个标准的JDK &lt;code>Executor&lt;/code> 同时提供定时服务功能(Netty定时心跳实现)。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">EventExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">EventExecutorGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#000">EventExecutor&lt;/span> &lt;span style="color:#000">next&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>EventExecutorGroup管理了多个EventExecutor，EventExecutorGroup由多个EventExecutor聚合而成的。EventExecutor是一个特殊的EventExecutorGroup，它带有一些方便的方法来查看线程是否在事件循环中执行。除此之外，它还扩展了EventExecutorGroup，允许使用通用的方式来访问方法。&lt;/p>
&lt;h3 id="3-eventloop和eventloopgroup">3. EventLoop和EventLoopGroup&lt;/h3>
&lt;p>代码实现上来看首先 &lt;code>EventLoop&lt;/code> 继承了 &lt;code>EventLoopGroup&lt;/code> ，&lt;code>EventLoop&lt;/code> 是 &lt;code>EventLoopGroup&lt;/code> 的一种特殊存在。单个线程的叫 &lt;code>EventLoop&lt;/code> 。多个线程的叫&lt;code>EventLoopGroup&lt;/code> 其次都继承了JDK的 &lt;code>ScheduledExecutorService&lt;/code> ，所以 &lt;code>EventLoop和EventLoopGroup&lt;/code> 可以看成一个JDK的标准 &lt;code>Executor&lt;/code> 同时支持定时执行。也可以理解为Netty自己实现的线程池。 EventLoop的相当于线程池只有一个线程，EventLoopGroup的是多个线程的线程池。&lt;code>EventLoopGroup&lt;/code> 可以看做是由 &lt;code>EventLoop&lt;/code> 组成。一旦注册，将处理一个Channel的所有I/O操作。一个EventLoop实例通常会处理多个Channel，但这可能取决于实现细节和内部。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/eventloop/image-20220304001607454.png" alt="image-20220304001607454">&lt;/p>
&lt;h3 id="4singlethreadeventloop">4.SingleThreadEventLoop&lt;/h3>
&lt;p>&lt;code>SingleThreadEventLoop&lt;/code> 作为Event处理的底层处理类，从源代码可以看出来：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SingleThreadEventLoop&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">SingleThreadEventExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">EventLoop&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SingleThreadEventExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span>
&lt;span style="color:#000">AbstractScheduledEventExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">OrderedEventExecutor&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">volatile&lt;/span> &lt;span style="color:#000">Thread&lt;/span> &lt;span style="color:#000">thread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SingleThreadEventExecutor&lt;/code> 类中有一个线程变量，这个就是用来处理Event的。&lt;/p>
&lt;h3 id="5-eventloop到底是什么">5. EventLoop到底是什么？&lt;/h3>
&lt;p>功能主要用来处理Event的执行器，这个执行器符合JDK的执行器标准，同时具备定时执行任务的功能。也可以看做是JDK的 &lt;code>Executor&lt;/code> 实现，相当于Netty版本线程池的实现。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty组件-ChannelHandler(图文并茂)</title><link>/middlewares/netty/netty-source-code-analysis/netty-components-channelhandler/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-components-channelhandler/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：&lt;a href="https://github.com/netty/netty/releases/tag/netty-4.1.74.Final">netty-4.1.74.Final&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-channelhandler介绍">1. ChannelHandler介绍&lt;/h3>
&lt;p>官方给出的解释ChannelHandler的作用主要有两点：&lt;/p>
&lt;ul>
&lt;li>处理I/O事件，拦截I/O操作，主要用来处理Channel&lt;/li>
&lt;li>在ChannelPipeline中从当前一个ChannelHandler传递调用到下一个ChannelHandler&lt;/li>
&lt;/ul>
&lt;p>ChannelHandler的继承关系图如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/ChannelHandler%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="ChannelHandler的继承关系">&lt;/p>
&lt;p>从上面可以看出来主要分为两类：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ChannelInboundHandler&lt;/p>
&lt;p>接收I/O入站的操作通知&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ChannelOutboundHandler&lt;/p>
&lt;p>接收I/O出站操作通知&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>涉及的ChannelOutboundHandlerAdapter和ChannelInboundHandlerAdapter适配器主要是提供了方法的默认实现。&lt;/p>
&lt;blockquote>
&lt;p>Tips: ChannelDuplexHandler是双工处理器，具有ChannelInboundHandler和ChannelOutboundHandler的功能&lt;/p>
&lt;/blockquote>
&lt;h3 id="2channelhandler的生命周期">2.ChannelHandler的生命周期&lt;/h3>
&lt;p>从ChannelHandler的源码来看：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">ChannelHandler&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">handlerAdded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelHandlerContext&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">handlerRemoved&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelHandlerContext&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Deprecated&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">exceptionCaught&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelHandlerContext&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Throwable&lt;/span> &lt;span style="color:#000">cause&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Inherited&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Documented&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Target&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ElementType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">TYPE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Retention&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">RetentionPolicy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">RUNTIME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@interface&lt;/span> &lt;span style="color:#000">Sharable&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// no value
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>只有三个方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>ChannelHandler#handlerAdded&lt;/strong>&lt;/p>
&lt;p>被添加到上线文中触发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ChannelHandler#handlerRemoved&lt;/strong>&lt;/p>
&lt;p>在上下文中被移除触发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ChannelHandler#exceptionCaught&lt;/strong>&lt;/p>
&lt;p>有Throwable错误抛错触发&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Tips:ChannelHandler#exceptionCaught方法已经被标记为过期，可以实现 ChannelInboundHandler#exceptionCaught的方法&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/ChannelHandler%E7%94%9F%E5%91%A8%E6%9C%9F.png" alt="ChannelHandler生周期">&lt;/p>
&lt;p>用一个服务端的例子来讲解整个过程：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">io.netty.example.discard&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.bootstrap.ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.EventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.nio.NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.nio.NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Discards any incoming data.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">bossGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ServerBootstrap&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (4)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServerHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_BACKLOG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">128&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (5)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_KEEPALIVE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (6)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bind and start to accept incoming connections.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">bind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (7)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Wait until the server socket is closed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// In this example, this does not happen, but you can do that to gracefully
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// shut down your server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">closeFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">finally&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">8080&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: 代码来源Netty官网https://netty.io/wiki/user-guide-for-4.x.html#wiki-h3-6&lt;/p>
&lt;/blockquote>
&lt;p>上述代码其实分为两个部分一个部分是 &lt;code>NioServerSocketChannel&lt;/code> 以及 &lt;code>SocketChannel&lt;/code> 。 首先分析NioServerSocketChannel中的ChannelHandler。&lt;/p>
&lt;p>通过代码可以知道NioServerSocketChannel创建后会调用&lt;code>ServerBootstrap#init&lt;/code>方法。在该方法中有这样一段代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220311214033108.png" alt="image-20220311214033108">&lt;/p>
&lt;p>创建一个ChannelHandler的实例也就是ChannelInitializer添加到NioServerSocketChannel的ChannelPipeline中。通过跟踪ChannelPipeline#addLast方法，最终调用的是&lt;code>DefaultChannelPipeline#addLast&lt;/code>方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220311214725357.png" alt="image-20220311214725357">&lt;/p>
&lt;p>然后在&lt;code>DefaultChannelPipeline#callHandlerAdded0&lt;/code> 方法中调用的是&lt;code>AbstractChannelHandlerContext#callHandlerAdded&lt;/code> 方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220311214916716.png" alt="image-20220311214916716">&lt;/p>
&lt;p>然后获取到ChannelHandler实例调用handlerAdded方法。也就是调用&lt;strong>ChannelHandler#handlerAdded&lt;/strong> 方法。到这里就完成了从ChannelHandler创建到调用&lt;code>ChannelHandler#handlerAdded&lt;/code> 方法。&lt;/p>
&lt;p>如果调用&lt;code>DefaultChannelPipeline#remove&lt;/code> 方法，最终调用的就是&lt;code>AbstractChannelHandlerContext#callHandlerRemoved&lt;/code>在这个方法中：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220311215453340.png" alt="image-20220311215453340">&lt;/p>
&lt;p>调用了&lt;code>ChannelHandler#handlerRemoved&lt;/code>&lt;/p>
&lt;p>对于&lt;code>ChannelHandler#exceptionCaught&lt;/code> 在所有的ChannelHandler以及子类方法执行的时候都会有&lt;code>try catch&lt;/code> 对异常进行捕获然后执行&lt;code>AbstractChannelHandlerContext#invokeExceptionCaught&lt;/code> 方法&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220311220153445.png" alt="image-20220311220153445">&lt;/p>
&lt;p>这个方法中都是调用了&lt;code>ChannelHandler#exceptionCaught&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>Tips: ChannelHandler#exceptionCaught方法标记为过期了，可以关注ChannelInboundHandler#exceptionCaught方法。同时还会在ChannelInitializer#initChannel中可能被执行&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>总结：ChannelHandler#handlerAdded方法主要发生在往ChannelPipeline添加ChannelHandler的时候，ChannelHandler#handlerRemoved主要发生在从ChannelPipeline删除ChannelHandler的时候，而ChannelHandler#exceptionCaught主要发生在执行ChannelInboundHandler和ChannelOutboundHandler方法的时候发生错误执行&lt;/strong>&lt;/p>
&lt;h3 id="3channelhandler的方法执行顺序">3.ChannelHandler的方法执行顺序&lt;/h3>
&lt;p>这里所说的ChannelHandler方法指的是ChannelHandler本身的方法以及ChannelInboundHandler和ChannelOutboundHandler方法的顺序。看一下这个三个类中分别有什么方法：&lt;/p>
&lt;p>&lt;strong>ChannelHandler接口&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>handlerAdded&lt;/td>
&lt;td>当把 ChannelHandler 添加到 ChannelPipeline 中时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>handlerRemoved&lt;/td>
&lt;td>当从 ChannelPipeline 中移除 ChannelHandler 时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exceptionCaught&lt;/td>
&lt;td>当处理过程中在 ChannelPipeline 中有错误产生时被调用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>&lt;code>Netty&lt;/code>&lt;/strong> 定义了下面两个重要的 &lt;strong>&lt;code>ChannelHandler&lt;/code>&lt;/strong> 子接口：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ChannelInboundHandler&lt;/strong> — 处理 &lt;strong>入站&lt;/strong> 数据以及各种状态变化&lt;/li>
&lt;li>&lt;strong>ChannelOutboundHandler&lt;/strong> — 处理 &lt;strong>出站&lt;/strong> 数据并且允许拦截所有的操作&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ChannelInboundHandler 接口&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>channelRegistered&lt;/td>
&lt;td>当 Channel 已经注册到它的 EventLoop 并且能够处理 I/O 时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channelUnregistered&lt;/td>
&lt;td>当 Channel 从它的 EventLoop 注销并且无法处理任何 I/O 时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channelActive&lt;/td>
&lt;td>当 Channel 处于活动状态时被调用;Channel 已经连接/绑定并且已经就绪&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channelInactive&lt;/td>
&lt;td>当 Channel 离开活动状态并且不再连接它的远程节点时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channelReadComplete&lt;/td>
&lt;td>当Channel上的一个读操作完成时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channelRead&lt;/td>
&lt;td>当从 Channel 读取数据时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ChannelWritabilityChanged&lt;/td>
&lt;td>当Channel的可写状态发生改变时被调用。用户可以确保写操作不会完成得太快(以避免发生 OutOfMemoryError)或者可以在 Channel 变为再次可写时恢复写入。可以通过调用Channel的isWritable()方法来检测Channel 的可写性。与可写性相关的阈值可以通过Channel.config().setWriteHighWaterMark()和 Channel.config().setWriteLowWaterMark()方法来设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>userEventTriggered&lt;/td>
&lt;td>当 ChannelnboundHandler.fireUserEventTriggered()方法被调用时被调用，因为一个 POJO 被传经了 ChannelPipeline&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>ChannelOutboundHandler 接口&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bind(ChannelHandlerContext,SocketAddress,ChannelPromise)&lt;/td>
&lt;td>当请求将 Channel 绑定到本地地址时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>connect(ChannelHandlerContext,SocketAddress,SocketAddress,ChannelPromise)&lt;/td>
&lt;td>当请求将 Channel 连接到远程节点时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>disconnect(ChannelHandlerContext,ChannelPromise)&lt;/td>
&lt;td>当请求将 Channel 从远程节点断开时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>close(ChannelHandlerContext,ChannelPromise)&lt;/td>
&lt;td>当请求关闭 Channel 时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deregister(ChannelHandlerContext,ChannelPromise)&lt;/td>
&lt;td>当请求将 Channel 从它的 EventLoop 注销时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>read(ChannelHandlerContext)&lt;/td>
&lt;td>当请求从 Channel 读取更多的数据时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>flush(ChannelHandlerContext)&lt;/td>
&lt;td>当请求通过 Channel 将入队数据冲刷到远程节点时被调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>write(ChannelHandlerContext,Object,ChannelPromise)&lt;/td>
&lt;td>当请求通过 Channel 将数据写到远程节点时被调用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="32-从源码解析channelhandler方法执行顺序">3.2 从源码解析ChannelHandler方法执行顺序&lt;/h4>
&lt;p>这个需要较长的篇幅来说明，我在文章《Netty源码解析-ChannelHandler方法执行顺序》进行详细的讲解。&lt;/p>
&lt;h3 id="4channelhandler的分类说明">4.ChannelHandler的分类说明&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/ChannelHandler%E5%88%86%E7%B1%BB.png" alt="ChannelHandler分类">&lt;/p>
&lt;p>ChannelHandler的实现主要有三个：&lt;/p>
&lt;ul>
&lt;li>ChannelInboundHandler ：处理&lt;strong>入站&lt;/strong>数据以及各种变化，简单理解就是：客户端或者服务器端接收其他端的数据进行处理。&lt;/li>
&lt;li>ChannelOutboundHandler ：处理 &lt;strong>出站&lt;/strong> 数据并且允许拦截所有的操作，简单理解就是：客户端或者服务器端发送数据给其他端的数据处理，同时还可以拦截读写操作&lt;/li>
&lt;li>ChannelDuplexHandler： 包含了ChannelInboundHandler 和ChannelOutboundHandler 的功能。&lt;/li>
&lt;/ul>
&lt;p>从上面衍生出来就是解码器和编码器：&lt;/p>
&lt;ul>
&lt;li>XXXXDecoder： 主要负责将网络中的数据解码成端需要的数据，例如：ProtobufDecoder&lt;/li>
&lt;li>XXXXEncoder： 主要负责将端结构化的数据编码成网络中传输的数据格式，例如：ProtobufEncoder&lt;/li>
&lt;/ul>
&lt;p>解码器和编码器也是Netty中重要的组件。&lt;/p>
&lt;h3 id="5总结">5.总结&lt;/h3>
&lt;ul>
&lt;li>ChannelHandler是和Channel进行绑定的，通过ChannelHandlerContext进行触发。&lt;/li>
&lt;li>ChannelHandler主要用于拦截I/O操作和I/O事件，同时通过ChannelPipeline将多个ChannelHandler串联在一起，形成一个调用链&lt;/li>
&lt;li>ChannelHandler分为出站和入栈两种处理器，同时衍生出了编码器和解码器。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码分析-ChannelHandler方法执行顺序和如何工作</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-channelhandler-order/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-channelhandler-order/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：Netty版本：&lt;a href="https://github.com/netty/netty/releases/tag/netty-4.1.75.Final">netty-4.1.75.Final&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-前言">1. 前言&lt;/h3>
&lt;p>在之前的文章《&lt;a href="https://juejin.cn/post/7074394630678134791/">Netty组件-ChannelHandler(图文并茂)&lt;/a> 》中了解了ChannelHandler同时对其两个继承接口ChannelInboundHandler和ChannelOutboundHandler都有了一定的了解，从如下几个方面来对ChannelHandler通过源码进一步解析：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/ChannelHandler%E8%A7%A3%E6%9E%90%E7%82%B9.png" alt="ChannelHandler解析点">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 上图后面两个内容会在后续的文章更新&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-channelhandler方法执行顺序">2. ChannelHandler方法执行顺序&lt;/h3>
&lt;p>ChannelHandler方法执行顺序执行顺序其实说的是三个类：&lt;code>ChannelHandler、ChannelInboundHandler、ChannelOutboundHandler&lt;/code> 这三个类的方法执行顺序。通过一个简答的Netty例子来打印一下执行的顺序。代码比较多这里就不直接粘贴出来了，已经上传到github仓库，可以下载到本地运行。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313142535666.png" alt="image-20220313142535666">&lt;/p>
&lt;blockquote>
&lt;p>代码github地址：https://github.com/mxsm/spring-sample/tree/master/java-sample/src/main/java/com/github/mxsm/netty/channelhandler&lt;/p>
&lt;/blockquote>
&lt;p>运行结果分为两个部分：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>服务端结果&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313143016219.png" alt="image-20220313143016219">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端结果&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313143110607.png" alt="image-20220313143110607">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>接下来对运行结果结合源码进行分析。客户端和服务器端ChannelHandler的执行大部分相同，只有细小出的区别。我们会在有区别的地方进行说明&lt;/p>
&lt;blockquote>
&lt;p>Tips: 服务端线程模型是主从模型，所以我们会分别分析Boss线程中的ChannelHandler以及Work线程中的ChannelHandler。&lt;/p>
&lt;/blockquote>
&lt;p>大致流程：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/ChannelHandler%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B.png" alt="ChannelHandler方法执行分析流程">&lt;/p>
&lt;p>下面分析如果没有特别说明都是以服务端为例进行源码分析。&lt;/p>
&lt;h4 id="21-channelhandlerhandleradded">2.1 ChannelHandler#handlerAdded&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313144554334.png" alt="image-20220313144554334">&lt;/p>
&lt;blockquote>
&lt;p>Tips：代码地址https://github.com/mxsm/spring-sample/blob/master/java-sample/src/main/java/com/github/mxsm/netty/channelhandler/DiscardServer.java&lt;/p>
&lt;/blockquote>
&lt;p>主要关注上图红框部分的代码，通过跟进代码会发现 &lt;code>ServerBootstrap&lt;/code> 创建后会创建一个 &lt;code>NioServerSocketChannel&lt;/code> 实例，然后调用 &lt;code>ServerBootstrap#init&lt;/code> 方法进行初始化，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313145719703.png" alt="image-20220313145719703">&lt;/p>
&lt;p>如上图代码所示，我这边把这里圈成了三个部分：&lt;/p>
&lt;blockquote>
&lt;p>Tips: ChannelInitializer其实就是一个ChannelInboundHandlerAdapter&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>NioServerSocketChannel的实例的ChannelPipeline中添加ChannelInitializer，那么&lt;strong>ChannelInitializer#initChannel&lt;/strong> 什么时候触发，如下代码：&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313150218471.png" alt="image-20220313150218471">&lt;/p>
&lt;p>在触发 &lt;code>channelRegistered&lt;/code> 方法后调用了 &lt;strong>ChannelInitializer#initChannel&lt;/strong> 这个私有方法，私有方法又调用了 &lt;strong>ChannelInitializer#initChannel&lt;/strong> 抽象方法。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>NioServerSocketChannel的实例的ChannelPipeline添加&lt;strong>ServerBootstrap#handler&lt;/strong>方法设置的ChannelHandler。对应上面的例子就是这段代码里面的ChannelHandler，如下图标号1位置所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313150751020.png" alt="image-20220313150751020">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将数据处理交给Worker线程，也是通过这个地方进行的。(后续会专门写一篇文章来说主负线程如何配合工作)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>总结：从上面的分析可以看出来ChannelHandler#handlerAdded方法的触发，主要是通过ChannelPipeline的add类型方法来触发，底层是通过AbstractChannelHandlerContext#callHandlerAdded调用来实现。&lt;/strong>&lt;/p>
&lt;h4 id="22-channelinboundhandlerchannelregistered">2.2 ChannelInboundHandler#channelRegistered&lt;/h4>
&lt;p>在调用&lt;code>ServerBootstrap#bind&lt;/code>方法当中，ServerSocketChannel初始化后，将ServerSocketChannel注册到BossGroup上，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313152322696.png" alt="image-20220313152322696">&lt;/p>
&lt;p>上图标号1所示位置就是将ServerSocketChannel注册到BossGroup。跟进代码最终调用的是&lt;code>AbstractChannel#register0&lt;/code> 方法，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313152757422.png" alt="image-20220313152757422">&lt;/p>
&lt;p>如上图标号2位置就是触发&lt;code>ChannelInboundHandler#channelRegistered&lt;/code>方法。&lt;/p>
&lt;p>&lt;strong>总结：ChannelInboundHandler#channelRegistered方法触发是在往EventLoopGroup中添加Channel的时候触发&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips: 上面说的都是触发NioServerSocketChannel实例中的ChannelHandler，也就是BossGroup中。workGroup中的ChannelHandler触发在哪里触发呢？之前ChannelHandler#handlerAdded章节分析图中有个标号3的位置中的代码就是触发childHandler的channelRegistered方法的：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313153504750.png" alt="image-20220313153504750">&lt;/p>
&lt;/blockquote>
&lt;h4 id="23-channeloutboundhandlerbind">2.3 ChannelOutboundHandler#bind&lt;/h4>
&lt;p>当NioServerSocketChannel创建、初始化、注册到EventLoopGroup完成后，接下来就进行绑定，与本地端口进行绑定以便接收数据,绑定的工作通过代码分析发现最后调用的是 &lt;code>AbstractBootstrap#doBind0&lt;/code> 方法，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313154352156.png" alt="image-20220313154352156">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 这个地方的channel变量其实就是NioServerSocketChannel的实例。&lt;/p>
&lt;/blockquote>
&lt;p>通过跟进bind方法的代码可以发现最终调用的是 &lt;strong>AbstractChannelHandlerContext#invokeBind&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313154614406.png" alt="image-20220313154614406">&lt;/p>
&lt;p>**总结：ChannelOutboundHandler#bind调用是服务端的Channel绑定本地地址触发，如NioServerSocketChannel绑定本地地址端口准备接受客户端数据 **&lt;/p>
&lt;blockquote>
&lt;p>Tips: ChannelOutboundHandler#bind是BossGroup的Channel所特有，在childHandler中不会执行。&lt;/p>
&lt;/blockquote>
&lt;h4 id="24-channelinboundhandlerchannelactive">2.4 ChannelInboundHandler#channelActive&lt;/h4>
&lt;p>ChannelInboundHandler#channelActive的触发需要分两种情况：&lt;/p>
&lt;ol>
&lt;li>BossGroup中的ServerSocketChannel触发&lt;/li>
&lt;li>WorkerGroup中的SocketChannel触发&lt;/li>
&lt;/ol>
&lt;p>首先看一下BossGroup中的ServerSocketChannel触发中的触发，在执行&lt;code>NioServerSocketChannel#bind&lt;/code> ，触发了自定义的&lt;code>TimeServerBossOutHandler#bind&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313202937928.png" alt="image-20220313202937928">&lt;/p>
&lt;p>上图标号1又调用了父类的bind方法，最终调用了&lt;code>AbstractChannel.AbstractUnsafe#bind&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313203458047.png" alt="image-20220313203458047">&lt;/p>
&lt;p>上图1位置就是触发ChannelInboundHandler#channelActive。&lt;/p>
&lt;blockquote>
&lt;p>Tips: TimeServerBossOutHandler#bind代码中去掉 &lt;code>super.bind(ctx, localAddress, promise);&lt;/code> 这段代码，你用客户端链接发现连不上。这就是因为NioServerSocketChannel没有绑定。&lt;/p>
&lt;/blockquote>
&lt;p>WorkerGroup中的SocketChannel触发如何触发？服务端接收到连接请求处理由BossGroup处理，读写操作是由WorkGroup处理，那么这个转换就是在&lt;code>ServerBootstrap#init&lt;/code> 方法中完成,如下图代码所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313205348929.png" alt="image-20220313205348929">&lt;/p>
&lt;p>上图框出来的代码 &lt;code>ServerBootstrapAcceptor&lt;/code> 其实也是一个&lt;code>ChannelInboundHandler&lt;/code> ：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313205548252.png" alt="image-20220313205548252">&lt;/p>
&lt;p>上图框出来的就是往WorkGroup中注册Channel。所有这里会触发 &lt;strong>ChannelInboundHandler#channelRegistered&lt;/strong> 。&lt;/p>
&lt;blockquote>
&lt;p>Tips: BossGroup注册NioServerSocketChannel和WorkGroup注册SocketChannel两者触发&lt;strong>ChannelInboundHandler#channelRegistered&lt;/strong> 的逻辑没有区别。&lt;/p>
&lt;/blockquote>
&lt;p>注册最终也是调用了&lt;code>AbstractChannel.AbstractUnsafe#register0&lt;/code> :&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313210108887.png" alt="image-20220313210108887">&lt;/p>
&lt;p>BossGroup注册NioServerSocketChannel和WorkGroup注册NioSocketChannel区别在于上图标号1的&lt;code>isActive()&lt;/code> 方法，这个方法是一个抽象方法。根据不同的类似实现。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>NioServerSocketChannel实现isActive()&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313210426171.png" alt="image-20220313210426171">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>NioSocketChannel实现isActive()&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313210603668.png" alt="image-20220313210603668">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以会进入if条件语句中，加上又是第一次注册，最终会触发标号为2的方法。&lt;/p>
&lt;p>&lt;strong>总结：NioServerSocketChannel和NioSocketChannel触发ChannelInboundHandler#channelActive不一样，但是都是当Channel可用的时候触发&lt;/strong>&lt;/p>
&lt;h4 id="25-channeloutboundhandlerread">2.5 ChannelOutboundHandler#read&lt;/h4>
&lt;p>&lt;code>AbstractChannelHandlerContext#invokeChannelActive&lt;/code>方法主要触发channelActive如下图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313213615164.png" alt="image-20220313213615164">&lt;/p>
&lt;p>然后通过调用AbstractChannelHandlerContext#invokeChannelActive方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313214123319.png" alt="image-20220313214123319">&lt;/p>
&lt;p>通过上图可以知道最终调用的是&lt;code>DefaultChannelPipeline.HeadContext#channelActive&lt;/code>方法&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313214354015.png" alt="image-20220313214354015">&lt;/p>
&lt;p>然后调用&lt;code>DefaultChannelPipeline.HeadContext#readIfIsAutoRead&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220313214604152.png" alt="image-20220313214604152">&lt;/p>
&lt;p>然后调用&lt;code>AbstractChannel#read&lt;/code>方法，这个方法中调用了&lt;code>ChannelPipeline#read&lt;/code> 方法触发ChannelOutboundHandler#read。&lt;/p>
&lt;p>&lt;strong>总结：ChannelOutboundHandler#read的触发都是在ChannelInboundHandler#channelActive，通过DefaultChannelPipeline.HeadContext#readIfIsAutoRead方法实现。&lt;/strong>&lt;/p>
&lt;h4 id="26-channelinboundhandlerchannelread">2.6 ChannelInboundHandler#channelRead&lt;/h4>
&lt;p>ServerSocketChannel还是SocketChannel都是通过NioEventLoop#processSelectedKey方法中一下代码触发unsafe.read()：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319090947767.png" alt="image-20220319090947767">&lt;/p>
&lt;p>这里根据ServerSocketChannel还是SocketChannel执行不同的Unsafe实现。&lt;/p>
&lt;p>ServerSocketChannel也就是BossGroup执行的是&lt;code>AbstractNioMessageChannel.NioMessageUnsafe#read&lt;/code> 方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319091352613.png" alt="image-20220319091352613">&lt;/p>
&lt;p>标号1触发ChannelInboundHandler#channelRead，标号2触发ChannelInboundHandler#channelReadComplete。&lt;/p>
&lt;p>SocketChannel也就是workGroup执行的是AbstractNioByteChannel.NioByteUnsafe#read方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319093237906.png" alt="image-20220319093237906">&lt;/p>
&lt;p>上图的标号1,2分别触发ChannelInboundHandler#channelRead和ChannelInboundHandler#channelReadComplete。&lt;/p>
&lt;p>在workGroup中还有这样两个：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">TimeServerOutHandler--write
TimeServerOutHandler--flush
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那只是为什么? 这个是因为在TimeServerInHandler中调用了如下方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319093647383.png" alt="image-20220319093647383">&lt;/p>
&lt;p>下面就下来分析&lt;/p>
&lt;h4 id="27-channeloutboundhandlerwrite和channeloutboundhandlerflush">2.7 ChannelOutboundHandler#write和ChannelOutboundHandler#flush&lt;/h4>
&lt;p>通过上面知道要想触发ChannelOutboundHandler#write和ChannelOutboundHandler#flush需要调用ChannelHandlerContext#writeAndFlush,通过代码研究发现最终调用的是AbstractChannelHandlerContext#write：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319095241942.png" alt="image-20220319095241942">&lt;/p>
&lt;p>标号1查找到ChannelOutboundHandler，然后执行2，执行ChannelOutboundHandler#write或者ChannelOutboundHandler#write和ChannelOutboundHandler#flush。&lt;/p>
&lt;h4 id="28-channeloutboundhandlerchannelinactive和channeloutboundhandlerchannelunregistered">2.8 ChannelOutboundHandler#channelInactive和ChannelOutboundHandler#channelUnregistered&lt;/h4>
&lt;p>当客户端关闭服务端调用到如下的代码AbstractNioByteChannel#read方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319160330612.png" alt="image-20220319160330612">&lt;/p>
&lt;p>最终会调用标号2的位置，然后调用AbstractNioByteChannel.NioByteUnsafe#closeOnRead方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319160515607.png" alt="image-20220319160515607">&lt;/p>
&lt;p>跟进代码发现最终调用了AbstractChannel.AbstractUnsafe#deregister方法。在这个方法中有调用如下代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319161139680.png" alt="image-20220319161139680">&lt;/p>
&lt;p>这里就触发了ChannelOutboundHandler#channelInactive和ChannelOutboundHandler#channelUnregistered。&lt;/p>
&lt;h4 id="28-channelhandlerhandlerremoved">2.8 ChannelHandler#handlerRemoved&lt;/h4>
&lt;p>上图标号2调用了 &lt;code>pipeline.fireChannelUnregistered();&lt;/code> 方法，最终是调用了&lt;code>DefaultChannelPipeline.HeadContext#channelUnregistered&lt;/code> 方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220319162739667.png" alt="image-20220319162739667">&lt;/p>
&lt;p>上图标号1的位置就是触发ChannelHandler#handlerRemoved。将当前Channel的ChannelHandler移除从EventLoop上面。&lt;/p>
&lt;h4 id="29-channeloutboundhandlerconnect和channeloutboundhandlerclose">2.9 ChannelOutboundHandler#connect和ChannelOutboundHandler#close&lt;/h4>
&lt;p>这两个都发生在客户端，整体的触发机制和上面说的大体相同，大家可以自己去进行分析。&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;p>Netty的ChannelHandler的整体触发流程如上面所述。其中没有涉及到错误捕捉的触发。&lt;/p>
&lt;ul>
&lt;li>ChannelPipeline的双向链表中的HeadContext和TailContext都是ChannelHandler，同时继承了AbstractChannelHandlerContext，也可以说是ChannelHandlerContext。&lt;/li>
&lt;li>ChannelHander添加到队列中，会被包装成ChannelHandlerContext&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Tips: 我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码解析-解码器(Decoder)是如何工作</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-decoder/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-decoder/</guid><description>
&lt;h3 id="1-解码器decoder概述">1. 解码器(Decoder)概述&lt;/h3>
&lt;p>以类似流的方式将Bytes从一个ByteBuf中通过解码器转换成另一种消息类型&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/Decoder%E8%A7%A3%E7%A0%81.png" alt="Decoder解码">&lt;/p>
&lt;p>Netty中的解码器就是&lt;code>ChannelInboundHandlerAdapter&lt;/code>的一个实现。主要是将网络中的bytes数据解码成用户需要的消息类型。&lt;/p>
&lt;blockquote>
&lt;p>TIps: 解码器不能使用@Sharable修饰，解码器只能单独为一个Channel进行解码，如果为多个进行解码会导致数据混乱&lt;/p>
&lt;/blockquote>
&lt;h3 id="2解码器decoder如何工作">2.解码器(Decoder)如何工作&lt;/h3>
&lt;p>解码器的重要一个类就是&lt;code>ByteToMessageDecoder&lt;/code> ，该类继承了&lt;code>ChannelInboundHandlerAdapter&lt;/code> 。所以从本质上来说解码器其实就是 &lt;code>ChannelInboundHandler&lt;/code> 。既然是&lt;code>ChannelInboundHandler&lt;/code> 数据读取就在&lt;code>ChannelInboundHandler#channelRead&lt;/code>方法里面：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320144205350.png" alt="image-20220320144205350">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 这里为什么会有一个if else的分支，原因在于如果开发者ByteToMessageDecoder设置在ServerBootstrap的ServerSocketChannel的handler，那么Object的对象类型就是SocketChannel，走的就是else分支，如果是设置在ServerBootstrap的childHandler那么那么Object的对象类型就是ByteBuf，走的就是if分支。 这里我只需要关注if分支即可&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/%E8%A7%A3%E7%A0%81%E5%99%A8%E5%85%B7%E4%BD%93%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="解码器具体处理流程">&lt;/p>
&lt;h4 id="21-累加器cumulator">2.1 累加器Cumulator&lt;/h4>
&lt;p>&lt;code>ByteToMessageDecoder&lt;/code> 类中有一个Cumulator接口：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">abstract&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ByteToMessageDecoder&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">ChannelInboundHandlerAdapter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">Cumulator&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Cumulate the given {@link ByteBuf}s and return the {@link ByteBuf} that holds the cumulated bytes.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * The implementation is responsible to correctly handle the life-cycle of the given {@link ByteBuf}s and so
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * call {@link ByteBuf#release()} if a {@link ByteBuf} is fully consumed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">cumulate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ByteBufAllocator&lt;/span> &lt;span style="color:#000">alloc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">cumulation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">in&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>作用：累加传入的Byte数据，同时也是为了解决粘包和半包的问题。&lt;/p>
&lt;p>假设我们每次解码成的数据都要是：ABCD,由于存在粘包和半包的情况，累加器会进行如下操作(以半包为例)：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/%E7%B4%AF%E5%8A%A0%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="累加器的工作原理">&lt;/p>
&lt;p>第一次传入并不会解码出需要的Message,会将数据存入ByteToMessageDecoder的cumulation变量，第二次传入数据会将解码器的之前数据和传入的数据进行合并，cumulation中的数据就变成了如上图所示，然后进行解码就解码出了所需要的Message。然后清空cumulation中已经解码了的数据。&lt;/p>
&lt;h4 id="22-解码器工作解析">2.2 解码器工作解析&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E6%95%B4%E4%B8%AA%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="解码器的整个工作流程图">&lt;/p>
&lt;p>从网络中读取的bytes数组，首先经过ByteToMessageDecoder累加器处理：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320155201164.png" alt="image-20220320155201164">&lt;/p>
&lt;p>如上图1所示：累加器处理传入的数据和前一次处理剩下的数据合并到一起，然后调用解码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320155451061.png" alt="image-20220320155451061">&lt;/p>
&lt;p>①变量是用来保存解码后的消息，②就是调用解码方法**&lt;code>ByteToMessageDecoder#decode&lt;/code>** ：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320155713635.png" alt="image-20220320155713635">&lt;/p>
&lt;p>&lt;strong>&lt;code>ByteToMessageDecoder#decode&lt;/code>&lt;/strong> 是一个抽象方法，所以具体看解码器的实现，例如：&lt;/p>
&lt;ul>
&lt;li>RedisDecoder&lt;/li>
&lt;li>XmlDecoder&lt;/li>
&lt;/ul>
&lt;p>等等一些Netty实现的解码器。解码出来的结构化对象，保存在**&lt;code>List&amp;lt;Object&amp;gt;&lt;/code>**中。当前的ChannelHandler解码完成后触发后续的ChannelHandler&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320160046448.png" alt="image-20220320160046448">&lt;/p>
&lt;p>后续ChannelHandler的channelRead方法中传入的值就是解码后的Message类型，如下图ByteToMessageDecoder#fireChannelRead静态方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/decoder/image-20220320160201318.png" alt="image-20220320160201318">&lt;/p>
&lt;blockquote>
&lt;p>Tips:&lt;/p>
&lt;ul>
&lt;li>传入的Bytefuf如何不够解码成需要类型的Message，这些bytes会被累加器保存在ByteToMessageDecoder的私有变量ByteBuf cumulation中&lt;/li>
&lt;li>解码多出来的同样也会被bytes会被累加器保存在ByteToMessageDecoder的私有变量ByteBuf cumulation中&lt;/li>
&lt;li>累加器的作用就是用来解决粘包和半包的问题。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="3总结">3.总结&lt;/h3>
&lt;p>解码器的关键就是累加器，累加器的作用就是解决了数据的粘包和半包问题。数据不够解析成对应的Message将数据保存下来，等待后续的数据传入进行合并再次进行解码，当一次传入的数据过多但是又不能够完整的解析成多个(大于1)消息，将解析后的剩下的数据保存下来，等待后续的数据传入然后进行累加。这样就实现了整个解码的过程。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码解析-累加器(Cumulator)处理粘包半包问题</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-cumulator/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-cumulator/</guid><description>
&lt;h3 id="1前言">1.前言&lt;/h3>
&lt;p>Netty将网络中的bytes数据转换成对应的消息数据，这个在Netty中叫做解码过程。在基于流的传输(如TCP/IP)中，接收到的数据存储在套接字接收缓冲区中。不幸的是，基于流的传输的缓冲区不是包队列，而是字节队列。这意味着，即使您将两个消息作为两个独立的包发送，操作系统也不会将它们视为两个消息，而只是将它们视为一串字节。因此，不能保证您所读的内容与远程同行所写的内容完全一致。而Netty中的累加器就是为了解决这个问题。我们将从一下几个方面结合来分析&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/Netty%E7%B4%AF%E5%8A%A0%E5%99%A8.png" alt="Netty累加器">&lt;/p>
&lt;h3 id="2什么是粘包半包">2.什么是粘包、半包&lt;/h3>
&lt;p>&lt;strong>粘包：比如发送方应该发送ABC、DEF,接收方期望接收到的是ABC、DEF。但是由于粘包可能接收到的是ABCDEF&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/%E7%B2%98%E5%8C%85%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="粘包示意图">&lt;/p>
&lt;p>&lt;strong>半包：比如发送方应该发送ABCDEF,接收方期望接收到的是ABCDEF。但是由于存在半包的情况可能接收到的是ABC、DEF&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/%E5%8D%8A%E5%8C%85%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="半包示意图">&lt;/p>
&lt;h3 id="3如何导致粘包半包">3.如何导致粘包、半包&lt;/h3>
&lt;p>应用A发送消息给应用B的过程：&lt;/p>
&lt;ol>
&lt;li>应用A把流数据发送到TCP发送缓冲区。&lt;/li>
&lt;li>TCP发送缓冲区把数据发送到达B服务器TCP接收缓冲区。&lt;/li>
&lt;li>应用B从TCP接收缓冲区读取流数据。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/TCP%E5%8D%8A%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0.png" alt="TCP半包、粘包产生的原因">&lt;/p>
&lt;p>&lt;strong>粘包的原因:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发送方每次写入数据 &amp;lt; Socket缓冲区大小&lt;/li>
&lt;li>接收方读取Socket缓冲区数据不够及时&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>半包的原因：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发送方每次写入数据 &amp;gt; Socket缓冲区大小&lt;/li>
&lt;li>发送的数据大于协议的 MTU (Maximum Transmission Unit，最大传输单元)，因此必须拆包&lt;/li>
&lt;/ul>
&lt;h3 id="4解码器中的累加器如何解决粘包半包">4.解码器中的累加器如何解决粘包半包&lt;/h3>
&lt;p>对于Netty解码器来说，粘包表示bytes转换成一个需要的消息Message后还会有省下的bytes。而半包就是bytes不够解码成Message。需要将当前的存下来等待新的数据配合上次读取的进行解码。而Netty的解码器中的累加器就是实现这个功能。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">Cumulator&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Cumulate the given {@link ByteBuf}s and return the {@link ByteBuf} that holds the cumulated bytes.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * The implementation is responsible to correctly handle the life-cycle of the given {@link ByteBuf}s and so
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * call {@link ByteBuf#release()} if a {@link ByteBuf} is fully consumed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">cumulate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ByteBufAllocator&lt;/span> &lt;span style="color:#000">alloc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">cumulation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ByteBuf&lt;/span> &lt;span style="color:#000">in&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips: Cumulator是 ByteToMessageDecoder的内部接口。&lt;/p>
&lt;/blockquote>
&lt;p>Netty中&lt;code>Cumulator&lt;/code> 有两个实现：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MERGE_CUMULATOR(默认)&lt;/p>
&lt;p>采用的是内存复制，如果累加的ByteBuf比输入的ByteBuf小，那就需要扩容，再复制输入的ByteBuf到类的Byteful中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>COMPOSITE_CUMULATOR&lt;/p>
&lt;p>使用CompositeByteBuf，通过将bytebuf添加到CompositeByteBuf来累积bytebuf，因此尽可能不进行内存复制&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>累加的ByteBuf作为解码器的变量。这个就保存了没有被解码的bytes。然后后续传入的bytes就合并到累加的ByteBuf上面。然后根据拆包的规范，例如按照固定长度。那就读取固定的长度的bytes。不够就再次等待累加。&lt;/p>
&lt;h3 id="5-总结">5. 总结&lt;/h3>
&lt;p>Netty巧妙的运用累加器将未解码的ByteBuf保存到解码器的ByteBuf变量。后续进入的ByteBuf和已经累加的进行合并然后再次进行解码。如此往复就完成了。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty组件-ChannelHandlerContext和ChannelPipeline</title><link>/middlewares/netty/netty-source-code-analysis/netty-components-channelpipeline-channelcontext/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-components-channelpipeline-channelcontext/</guid><description>
&lt;p>Netty的组件中还有两个重要的组件：&lt;code>ChannelHandlerContext&lt;/code> 和 &lt;code>ChannelPipeline&lt;/code> ，这两个组件经常搭配一起使用，下面结合源码来讲讲这两个组件如何在Netty中发挥作用的。&lt;/p>
&lt;h3 id="1-channelhandlercontext">1. ChannelHandlerContext&lt;/h3>
&lt;p>&lt;code>ChannelHandlerContext&lt;/code> 允许 &lt;code>ChannelHandler&lt;/code> 和 &lt;code>ChannelHandler&lt;/code> 所在的 &lt;code>ChannelPipeline&lt;/code> (这个下面进行介绍)以及 &lt;code>ChannelPipeline&lt;/code> 拥有的其他Handlers进行交互。通知所在 &lt;code>ChannelPipeline&lt;/code> 中下一个 &lt;code>ChannelHandler&lt;/code> ,同时也可以动态修改其所属的 &lt;code>ChannelPipeline&lt;/code>&lt;/p>
&lt;ul>
&lt;li>通知：通知同一个ChannelPipeline中临近的ChannelHandler，通过调用ChannelHandlerContext提供的方法&lt;/li>
&lt;li>修改ChannelPipeline：可以获取到当前ChannelHandlerContext所属的ChannelPipeline，应用可以在运行时动态的往ChannelPipeline中添加、删除、或者替换ChannelHandler&lt;/li>
&lt;li>存储一些状态信息&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Tips: 一个ChannelHandler可以拥有多个ChannelHandlerContext,原因在于：一个ChannelHandler可以被添加到多个ChannelPipeline，因此一个单例的ChannelHandler被添加到了多个ChannelPipeline上面就可以被多个ChannelHandlerContext调用。&lt;/p>
&lt;/blockquote>
&lt;p>划重点：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelPipeline/ChannelHandlerContext%E5%88%92%E9%87%8D%E7%82%B9.png" alt="ChannelHandlerContext划重点">&lt;/p>
&lt;h3 id="2channelpipeline">2.ChannelPipeline&lt;/h3>
&lt;p>ChannelPipeline是一个ChannelHandlers列表，用于处理或拦截Channel的入站事件和出站操作。ChannelPipeline实现了拦截过滤器模式的高级形式，让用户完全控制如何处理事件，以及管道中的ChannelHandlers如何交互。ChannelPipeline在netty中只有一个实现就是 &lt;code>DefaultChannelPipeline&lt;/code>&lt;/p>
&lt;h4 id="21channelpipeline创建">2.1ChannelPipeline创建&lt;/h4>
&lt;p>当Channel创建的时候ChannelPipeline自动创建。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//AbstractChannel
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">AbstractChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">unsafe&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newUnsafe&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">pipeline&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newChannelPipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#000">DefaultChannelPipeline&lt;/span> &lt;span style="color:#000">newChannelPipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DefaultChannelPipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="22-event如何在channelpipeline流转">2.2 Event如何在ChannelPipeline流转&lt;/h4>
&lt;p>Event在ChannelPipeline流转示意图如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelPipeline/ChannelPipeline%E4%BA%8B%E4%BB%B6%E6%B5%81%E8%BD%AC.png" alt="ChannelPipeline事件流转">&lt;/p>
&lt;p>入站事件从下往上执行如上图，入栈事件通常由I/O线程生成入栈数据,入站数据通常是通过实际的输入操作(如SocketChannel.read(ByteBuffer))从远程读取。如果入站事件超出了顶部的入站处理程序，则会将其静默丢弃，或者在需要注意时将其记录下来。&lt;/p>
&lt;p>出站事件从上往下处理。出站处理程序通常生成或转换出站流量，比如写请求。如果出站事件超出底部出站处理程序，则由与Channel关联的I/O线程处理。I/O线程通常执行实际的输出操作，例如SocketChannel.write(ByteBuffer)&lt;/p>
&lt;h4 id="23-channelpipeline组织channelhandler的方式">2.3 ChannelPipeline组织ChannelHandler的方式&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelPipeline/ChannelPipeline%E4%B8%ADChannelHandlerdler%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F.png" alt="ChannelPipeline中ChannelHandlerdler的组织方式">&lt;/p>
&lt;p>通过一个双向的ChannelHandlerContext队列来组织ChannelHandler，当ChannelHandler被添加到ChannelPipeline的时候首先会被包装成ChannelHandlerContext。然后插入到链表中。&lt;/p>
&lt;blockquote>
&lt;p>Tips: ChannelPipeline是线程安全的，官方还给出了这样的一个建议：如果开发者的业务逻辑全部都是异步或者执行时间非常短就不需要一个特殊的EventLoopGroup&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;handler&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">MyBusinessLogicHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h4 id="24-event流转channelhandler执行的顺序">2.4 Event流转ChannelHandler执行的顺序&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">ChannelPipeline&lt;/span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">....;&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InboundHandlerA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//实现了ChannelInboundHandler
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InboundHandlerB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//实现了ChannelInboundHandler
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">OutboundHandlerA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//实现了ChannelOutboundHandler
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">OutboundHandlerB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//实现了ChannelOutboundHandler
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;5&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">InboundOutboundHandlerX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//实现了ChannelInboundHandler和实现了ChannelOutboundHandler
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码ChannelPipeline中的ChannelHandler的链表顺序：head&amp;lt;&amp;mdash; 1 &amp;lt;&amp;mdash; 2 &amp;lt;&amp;mdash; 3 &amp;lt;&amp;mdash; 4 &amp;lt;&amp;mdash; 5 &amp;lt;&amp;mdash; tail。&lt;/p>
&lt;p>入站的执行顺序： 1、2、5&lt;/p>
&lt;p>入站的执行顺序：5、4、3&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;ul>
&lt;li>ChannelPipeline与Channel的关系是一对一的关系，ChannelPipeline是在Channel创建的时候自动创建。&lt;/li>
&lt;li>当ChannelHandler是单例模式的时候，一个ChannelHandler可以对应多个ChannelPipeline，是一个1对多的关系&lt;/li>
&lt;li>Channel创建时候自动创建ChannelPipeline实现Channel和ChannelPipeline的绑定，然后往ChannelPipeline中绑定ChannelHandler&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码解析-ChannelInboundHandler#channelRead参数Object对象到底是什么类型</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-channelread-object/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-channelread-object/</guid><description>
&lt;blockquote>
&lt;p>Netty版本：&lt;a href="https://github.com/netty/netty/releases/tag/netty-4.1.75.Final">netty-4.1.75.Final&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-引言">1. 引言&lt;/h3>
&lt;p>在之前的文章《&lt;a href="https://juejin.cn/post/7076731940706975758">Netty源码分析-ChannelHandler方法执行顺序和如何工作&lt;/a>》中分析了ChannelHandler的方法执行的顺序问题。在这个过程中细心的人可能会发现&lt;code>ChannelInboundHandler#channelRead&lt;/code> 方法有个参数是Object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">channelRead&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelHandlerContext&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Object&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>刚刚接触的Netty的开发者肯定也很好奇这个Object到底会是什么类型，今天我们就从源码来分析一下这个Object的类型。了解Object的具体类型同时也可以帮助我们更好的开发。&lt;/p>
&lt;h3 id="2-netty源码分析channelinboundhandlerchannelread参数object类型">2. Netty源码分析ChannelInboundHandler#channelRead参数Object类型&lt;/h3>
&lt;p>这里我们还是以服务器的代码作为例子讲解&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">com.github.mxsm.netty.channelhandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">com.github.mxsm.netty.DiscardServerHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.bootstrap.ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.EventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.nio.NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.ServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">io.netty.channel.socket.nio.NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @author mxsm
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @date 2022/3/13 10:47
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @Since 1.0.0
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">bossGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ServerBootstrap&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">handler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;(){&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ServerSocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerBossOutHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerBossInHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (4)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerOutHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerInHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_BACKLOG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">128&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (5)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_KEEPALIVE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (6)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bind and start to accept incoming connections.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">bind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (7)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Wait until the server socket is closed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// In this example, this does not happen, but you can do that to gracefully
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// shut down your server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">closeFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">finally&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">8080&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tips:代码地址https://github.com/mxsm/spring-sample/tree/master/java-sample/src/main/java/com/github/mxsm/netty/channelhandler&lt;/p>
&lt;/blockquote>
&lt;p>上面代码改自Netty官网，我这里给BossGroup中的ServerSocketChannel也显示加了ChannelHandler。&lt;strong>所以对于ChannelInboundHandler#channelRead参数Object类型我们需要区分是ServerSocketChannel还是SocketChannel。&lt;/strong> 下面我们也从这两个方面进行源码分析。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 下面讲的会用到ChannelHandler的方法执行顺序的相关知识，不太清楚的可以查看之前的文章 《&lt;a href="https://juejin.cn/post/7076731940706975758">Netty源码分析-ChannelHandler方法执行顺序和如何工作&lt;/a>》&lt;/p>
&lt;/blockquote>
&lt;h4 id="21-serversocketchannel中channelinboundhandlerchannelread参数object类型">2.1 ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型&lt;/h4>
&lt;p>NioServerSocketChannel创建完成后绑定到BossGroup的EvenLoop上面，往EvenLoop提交任务后，NioEventLoop就开始运行EventLoop#run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略了大量的代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(;;)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">strategy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">select&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">curDeadlineNanos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//select
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">processSelectedKeys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//处理SelectedKeys
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码主要看一下&lt;code>processSelectedKeys()&lt;/code> 这个方法最终调用的是 &lt;code>NioEventLoop#processSelectedKey(SelectionKey k, AbstractNioChannel ch)&lt;/code> 这个方法。这个方法也是ServerSocketChannel的主要处理逻辑：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320101400589.png" alt="">&lt;/p>
&lt;p>如上图1位置所示，&lt;code>unsafe.read()&lt;/code> 这个方法是解析ChannelInboundHandler#channelRead参数Object类型的关键代码。这个unsafe是怎么来的呢，上面有这样一段代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320102124732.png" alt="image-20220320102124732">&lt;/p>
&lt;p>&lt;strong>重点：unsafe.read()，调用那个实现取决于具体的实现，NioServerSocketChannel那么调用的就是AbstractNioMessageChannel.NioMessageUnsafe.read&lt;/strong> ：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320102542119.png" alt="image-20220320102542119">&lt;/p>
&lt;p>这个方法重点关注一下上图的标号位置&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标号1 的位置调用了&lt;code>AbstractNioMessageChannel#doReadMessages&lt;/code>的抽象方法，这个案例下调用的是&lt;code>NioServerSocketChannel#doReadMessages&lt;/code>方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320102645617.png" alt="image-20220320102645617">&lt;/p>
&lt;p>往&lt;code>List&amp;lt;Object&amp;gt; buf&lt;/code> 列表中添加了&lt;code>NioSocketChannel&lt;/code>的实例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标号2的位置，是触发&lt;code>ChannelInboundHandler#channelRead&lt;/code> ，将标号1中添加的&lt;code>NioSocketChannel&lt;/code>作为Object的实际对象传入&lt;code>ChannelInboundHandler#channelRead&lt;/code>参数Object类型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型是NioSocketChannel&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips: 使用者可以启动项目进行测试，看一下是不是和上面分析的一样进行验证，上面的关键之处就是在于unsafe.read()这个方法到底是调用哪个实现，同时在触发了ServerSocketChannel的ChannelPipeline后的fireChannelRead如何进行传导到SocketChannel，这个就是我下面要接着分析的。&lt;/p>
&lt;/blockquote>
&lt;h4 id="22-serversocketchannel中channelinboundhandlerchannelread参数object类型">2.2 ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型&lt;/h4>
&lt;p>触发了ServerSocketChannel的ChannelPipeline后的fireChannelRead后，最终调用的是 &lt;strong>&lt;code>ServerBootstrap#init&lt;/code>&lt;/strong> 中的如下图框出来的代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320104301073.png" alt="image-20220320104301073">&lt;/p>
&lt;p>ServerBootstrapAcceptor也是一个ChannelInboundHandlerAdapter，同样会触发ChannelInboundHandler#channelRead&lt;/p>
&lt;blockquote>
&lt;p>Tips: 此时触发的ChannelInboundHandler#channelRead还是属于NioServerSocketChannel&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320104427432.png" alt="image-20220320104427432">&lt;/p>
&lt;p>如上图标号1所示此处的Channel实际上是NioSocketChannel实例，也就是NioServerSocketChannel传递过来的。如上图标号2所示这里就是往workGroup中注册NioSocketChannel实例。然后就是workGroup的NioEventLoop就开始运行EventLoop#run，这里的执行和BossGroup中执行的是一样的。唯一不同的就是&lt;/p>
&lt;p>&lt;strong>unsafe.read()&lt;/strong> 方法，在NioSocketChannel中是执行&lt;code>AbstractNioByteChannel.NioByteUnsafe#read&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhandler/image-20220320103708124.png" alt="image-20220320103708124">&lt;/p>
&lt;p>如上图标号1所示，这里同样触发了&lt;code>ChannelPipeline#fireChannelRead&lt;/code> 这里传入的ChannelInboundHandler#channelRead参数Object类型是ByteBuf的实例。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 这里的ChannelPipeline#fireChannelRead触发的是NioSocketChannel的。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>总结：ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型是ByteBuf&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Tips: 如果经过解码器后，触发的后续的ChannelInboundHandler#channelRead参数Object的类型就是解码后的消息类型&lt;/p>
&lt;/blockquote>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;p>ChannelInboundHandler#channelRead参数Object类型取决于是ServerSocketChannel还是SocketChannel。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型是NioSocketChannel&lt;/strong>&lt;/li>
&lt;li>&lt;strong>ServerSocketChannel中ChannelInboundHandler#channelRead参数Object类型是ByteBuf&lt;/strong>&lt;/li>
&lt;li>&lt;strong>对于Netty的解码器只是对ChannelInboundHandler进行拓展&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码解析-服务端启动流程详解</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-serverbootstrap-flow/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-serverbootstrap-flow/</guid><description>
&lt;p>之前讲了很多关于Netty的组件相关的知识以及Netty启动过程中的一些调用关系。下面通过一个官网的例子(稍微增加了修改)来说明整个启动过程的每一步到底做了什么。&lt;/p>
&lt;h3 id="1-官网示例">1. 官网示例&lt;/h3>
&lt;p>下述例子是在官网的例子上做了一些修改，增加了NioServerSocketChannel设置ChannelHandler。也就是标号5的位置。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">bossGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">NioEventLoopGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// (2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ServerBootstrap&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ServerBootstrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NioServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (4)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">handler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ServerSocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ServerSocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerBossOutHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerBossInHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// (5)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SocketChannel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerOutHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">TimeServerInHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// (6)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_BACKLOG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">128&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (7)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">childOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">SO_KEEPALIVE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (8)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bind and start to accept incoming connections.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">bind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// (9)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Wait until the server socket is closed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// In this example, this does not happen, but you can do that to gracefully
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// shut down your server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">closeFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">finally&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">workerGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">bossGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">shutdownGracefully&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">8080&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parseInt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#000">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">DiscardServer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码地址：https://github.com/mxsm/spring-sample/blob/master/java-sample/src/main/java/com/github/mxsm/netty/channelhandler/DiscardServer.java&lt;/p>
&lt;h3 id="2服务端启动流程详解分析">2.服务端启动流程详解分析&lt;/h3>
&lt;p>上述代码被分成了9个步骤，基本上涵盖了Netty的服务端基本开发。我们就一个个步骤分析，分析过程中两个将近的步骤会放在一起进行分析&lt;/p>
&lt;h4 id="21-eventloopgroup的创建">2.1 EventLoopGroup的创建&lt;/h4>
&lt;p>步骤(1)、(2)创建**&lt;code>EventLoopGroup&lt;/code>**，上述代码创建的是**&lt;code>NioEventLoopGroup&lt;/code>**。那么做了一些什么事情呢？&lt;/p>
&lt;blockquote>
&lt;p>Tips: EventLoopGroup还有 DefaultEventLoopGroup 、EpollEventLoopGroup(这个只能运行在Linux上面)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>创建EventExecutor，也就是NioEventLoop。&lt;/li>
&lt;li>创建Java NIO 的Selector, 这个是创建NioEventLoop的时候创建。&lt;/li>
&lt;/ul>
&lt;h4 id="22-创建服务端的启动类">2.2 创建服务端的启动类&lt;/h4>
&lt;p>步骤（3）就是创建服务端的启动类，这个没什么好介绍的。创建完成后将bossGroup和workGroup分别设置到服务端启动服务类中。作用：&lt;/p>
&lt;ul>
&lt;li>bossGroup负责监听来自客户端的连接，以及将连接转交给workGroup处理&lt;/li>
&lt;li>workGroup主要负责客户端连接Channel的数据读写操作&lt;/li>
&lt;/ul>
&lt;h4 id="23-设置创建的channel的类型">2.3 设置创建的Channel的类型&lt;/h4>
&lt;p>对于服务端的设置Channel，其实有两类：ServerSocketChannel和SocketChannel，BossGroup创建的是ServerSocketChannel，而workGroup创建的是SocketChannel(这个会在下面讲到)。（4）这里设置的是boss的ChannelServerSocketChannel。&lt;/p>
&lt;h4 id="24-为serversocketchannel设置channelhandler">2.4 为ServerSocketChannel设置ChannelHandler&lt;/h4>
&lt;p>步骤（5）设置的ChannelServerSocketChannel的ChannelHandler，在不设置的情况下，其中有默认的添加 &lt;strong>&lt;code>ChannelInitializer&lt;/code>&lt;/strong> 在ServerBootstrap#init方法中：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setChannelOptions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">newOptionsArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">setAttributes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">newAttributesArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">());&lt;/span>
&lt;span style="color:#000">ChannelPipeline&lt;/span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">EventLoopGroup&lt;/span> &lt;span style="color:#000">currentChildGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">childGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelHandler&lt;/span> &lt;span style="color:#000">currentChildHandler&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">childHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Entry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ChannelOption&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&amp;gt;,&lt;/span> &lt;span style="color:#000">Object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">currentChildOptions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newOptionsArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">childOptions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Entry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">AttributeKey&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&amp;gt;,&lt;/span> &lt;span style="color:#000">Object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;[]&lt;/span> &lt;span style="color:#000">currentChildAttrs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">newAttributesArray&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">childAttrs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelInitializer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelPipeline&lt;/span> &lt;span style="color:#000">pipeline&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">ChannelHandler&lt;/span> &lt;span style="color:#000">handler&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">handler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handler&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//(1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">eventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">pipeline&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addLast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ServerBootstrapAcceptor&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">ch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">currentChildGroup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">currentChildHandler&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">currentChildOptions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">currentChildAttrs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码标号1的位置就是将步骤（5）设置的ChannelHandler添加到ChannelServerSocketChannel所绑定的ChannelPipeline中。&lt;/p>
&lt;h4 id="25-为socketchannel设置channelhandler">2.5 为SocketChannel设置ChannelHandler&lt;/h4>
&lt;p>步骤（6）为SocketChannel设置ChannelHandler，这个和步骤5相似但是注意下ChannelInitializer中的泛型类C是不一样的，步骤（5）是ServerSocketChannel，而步骤（6）是SocketChannel。&lt;/p>
&lt;h4 id="26-serversocketchannel和socketchannel的设置">2.6 ServerSocketChannel和SocketChannel的设置&lt;/h4>
&lt;p>步骤（7）、（8）分别设置ServerSocketChannel和SocketChannel的TCP以及其他相关的参数设置。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 以上的步骤，主要是创建启动服务类以及设置ChannelHandler和Channel的配置。&lt;/p>
&lt;/blockquote>
&lt;h4 id="27-绑定端口启动服务">2.7 绑定端口启动服务&lt;/h4>
&lt;p>步骤（9）主要是绑定端口，然后将之前步骤的设置串连起来。将服务启动。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">doBind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">SocketAddress&lt;/span> &lt;span style="color:#000">localAddress&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">regFuture&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">initAndRegister&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Channel&lt;/span> &lt;span style="color:#000">channel&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">cause&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">isDone&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ChannelPromise&lt;/span> &lt;span style="color:#000">promise&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newPromise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">doBind0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">localAddress&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">PendingRegistrationPromise&lt;/span> &lt;span style="color:#000">promise&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PendingRegistrationPromise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">addListener&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ChannelFutureListener&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">operationComplete&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">future&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">throws&lt;/span> &lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Throwable&lt;/span> &lt;span style="color:#000">cause&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">future&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">cause&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cause&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">setFailure&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cause&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">registered&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">doBind0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">regFuture&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">localAddress&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建NioServerSocketChannel的实例，在创建NioServerSocketChannel实例的同时也创建了当前NioServerSocketChannel的ID,内部接口Unsafe的实例对象，以及当前NioServerSocketChannel说绑定的ChannelPipeline。&lt;/li>
&lt;li>对NioServerSocketChannel的实例进行初始化, 初始化做了哪些工作?
&lt;ul>
&lt;li>NioServerSocketChannel设置之前设置的options配置&lt;/li>
&lt;li>NioServerSocketChannel属性&lt;/li>
&lt;li>给NioServerSocketChannel的ChannelPipeline中添加ChannelInitializer，这里添加的ChannelInitializer会将之前案例代码中步骤（5）添加的ChannelHandler添加到NioServerSocketChannel的ChannelInitializer中，同时还添加了ServerBootstrapAcceptor(这个类的作用后面会讲到)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将NioServerSocketChannel的实例注册到BossGroup的EventLoop上面，对于Nio来说就是注册到NioEventLoop上面。&lt;/li>
&lt;li>绑定启动服务器的本地端口，等待客户端连接&lt;/li>
&lt;/ul>
&lt;p>到这里就完成整个服务的启动工作。&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;p>netty服务端的启动和Java NIO的启动和工作的流程一致，只是将接收连接和处理连接的读写分开了。也就是Netty的Reactor的主从模型（图片来源网上）&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/netty/NettyServer%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png?raw=true" alt="">&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码解析-EventLoop什么时候启动运行</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-eventloop-startrun/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-eventloop-startrun/</guid><description>
&lt;h3 id="1引言">1.引言&lt;/h3>
&lt;p>Netty中EventLoopGroup其实就相当于线程池，而EventLoop就相当于线程池中的线程。既然说是线程但是我们在开发的过程中没有看到类似于线程的启动start或者run方法的调用。那么Netty的EventLoop什么时候启动运行的呢？下面来通过源码分析一下这个问题。在分析这个问题之前需要明确一个事情：Netty的执行器可以使用用户自定义的或者用Netty默认实现的。下面讲的是使用Netty默认的执行器 &lt;strong>&lt;code>ThreadPerTaskExecutor&lt;/code>&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 用户自定义的可以用户自己实现Executor接口或者使用JDK实现的线程池。这两种情况都可以归类为用户自定义。&lt;/p>
&lt;/blockquote>
&lt;h3 id="2eventloop启动源码分析">2.EventLoop启动源码分析&lt;/h3>
&lt;p>已NioEventLoop为例，NioEventLoop创建是在创建NioEventLoopGroup的时候创建。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220321223154151.png" alt="image-20220321223154151">&lt;/p>
&lt;p>上图标注的部分代码就是创建NioEventLoop。整个方法是一个抽象方法，看具体的实现，我们这里的实现就在NioEventLoopGroup中&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220321223324109.png" alt="image-20220321223324109">&lt;/p>
&lt;p>NioEventLoop,将执行器作为构造函数的参数。这里就完成NioEventLoop创建。&lt;/p>
&lt;p>ServerBootstrap绑定本地端口的时候会进行NioServerSocketChannel初始化的工作，然后将NioServerSocketChannel对象注册到NioEventLoop：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8f5902;font-style:italic">//AbstractBootstrap#initAndRegister
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">initAndRegister&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">regFuture&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">channel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>跟进register方法的代码，发现最终调用的是**&lt;code>AbstractChannel#AbstractUnsafe.register&lt;/code>** 方法：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">register&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">EventLoop&lt;/span> &lt;span style="color:#000">eventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ChannelPromise&lt;/span> &lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//省略部分无关代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AbstractChannel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">eventLoop&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">eventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">eventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">inEventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">register0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">eventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Runnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//(1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">register0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">promise&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">});&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Throwable&lt;/span> &lt;span style="color:#000">t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在首次注册的时候上述代码肯定走得是else分支。&lt;/p>
&lt;p>&lt;strong>标号（1）位置的就是 EventLoop启动的关键代码&lt;/strong>。跟进EventLoop#execute方法，调用的是SingleThreadEventExecutor#execute：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Runnable&lt;/span> &lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ObjectUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">checkNotNull&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;task&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!(&lt;/span>&lt;span style="color:#000">task&lt;/span> &lt;span style="color:#204a87;font-weight:bold">instanceof&lt;/span> &lt;span style="color:#000">LazyRunnable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">wakesUpForTask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Runnable&lt;/span> &lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">immediate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">inEventLoop&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">inEventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">addTask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//(1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(!&lt;/span>&lt;span style="color:#000">inEventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">startThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//(2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isShutdown&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">boolean&lt;/span> &lt;span style="color:#000">reject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">removeTask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">reject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">UnsupportedOperationException&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">reject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">reject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(!&lt;/span>&lt;span style="color:#000">addTaskWakesUp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">immediate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">wakeup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">inEventLoop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上述代码SingleThreadEventExecutor#execute方法中调用的是SingleThreadEventExecutor#execute的私有方法。&lt;/p>
&lt;p>标号（1）：将提交的任务加入队列，然后判断运行线程是否已经在当前EventLoop，不在就启动线程调用**&lt;code>startThread();&lt;/code>** 。然后跟进代码发现调用的是SingleThreadEventExecutor#doStartThread方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220321223555039.png" alt="image-20220321223555039">&lt;/p>
&lt;p>调用的是 **&lt;code>executor.execute&lt;/code>**方法.也就是Executor#execute方法，对于Netty默认真的执行器来说就是调用 &lt;strong>&lt;code>ThreadPerTaskExecutor#execute&lt;/code>&lt;/strong> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ThreadPerTaskExecutor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">implements&lt;/span> &lt;span style="color:#000">Executor&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ThreadFactory&lt;/span> &lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ThreadPerTaskExecutor&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ThreadFactory&lt;/span> &lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">threadFactory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ObjectUtil&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">checkNotNull&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;threadFactory&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">execute&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Runnable&lt;/span> &lt;span style="color:#000">command&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">threadFactory&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newThread&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">command&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从代码中可以看到创建线程然后启动，运行的内容就是上图标号为1的内容，实际就是**&lt;code>SingleThreadEventExecutor.this.run()&lt;/code>** 的内容，具体看实现，例如NioEventLoop的实现：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/image-20220321223639743.png" alt="image-20220321223639743">&lt;/p>
&lt;p>&lt;strong>重点：EventLoop是在Channel注册到EventLoop的时候，通过执行器提交任务启动线程的&lt;/strong>&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;p>EventLoop是在Channel注册到EventLoop的时候通过执行器启动。任务会被添加到队列中。待EventLoop启动后从队列中获取任务进行处理。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item><item><title>Middlewares: Netty源码分析-Channel如何从主线程切换到从线程</title><link>/middlewares/netty/netty-source-code-analysis/netty-source-bossgroup-switch-workgroup/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>/middlewares/netty/netty-source-code-analysis/netty-source-bossgroup-switch-workgroup/</guid><description>
&lt;h3 id="1-前言">1. 前言&lt;/h3>
&lt;p>在Netty的主从Reactor线程模型，如下图(图片来自网络)：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/netty/NettyServer%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png?raw=true" alt="线程模型">&lt;/p>
&lt;p>那么Channel如何从bossGroup处理完成 ACCETP后切换到workerGroup进行读写处理。下面就通过Netty的源码来告诉你Netty是如何进行切换的。&lt;/p>
&lt;blockquote>
&lt;p>Tips: 下面源码解析以Nio为例子&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-源码分析">2. 源码分析&lt;/h3>
&lt;p>首先在服务端的服务绑定的过程中：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#000">ChannelFuture&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">bind&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">).&lt;/span>&lt;span style="color:#c4a000">sync&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例化的NioServerSocketChannel的对象会注册到bossGroup的线程上面，这个注册的过程在**&lt;code>AbstractBootstrap#initAndRegister&lt;/code>** 方法如下图框出来的部分：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322103757962.png" alt="image-20220322103757962">&lt;/p>
&lt;p>注册完成后，此时注册了当前NioServerSocketChannel实例的EventLoop也启动了。&lt;/p>
&lt;blockquote>
&lt;p>Tips: EventLoop何时启动不清楚的可以看一下之前的文章《&lt;a href="https://juejin.cn/post/7077562070715088926">Netty源码解析-EventLoop什么时候启动运行&lt;/a>》&lt;/p>
&lt;/blockquote>
&lt;p>启动后会运行&lt;strong>NioEventLoop#run&lt;/strong>方法，主要是处理NioServerSocketChannel的select()。然后获取到SelectedKeys进行处理。这些key的处理是由**&lt;code>NioEventLoop#processSelectedKey&lt;/code>** 方法处理：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322104625856.png" alt="image-20220322104625856">&lt;/p>
&lt;p>当有连接接入的时候就会调用上图框出来的部分代码，对于NioServerSocketChannel来说实际调用的**&lt;code>AbstractNioMessageChannel.NioMessageUnsafe#read&lt;/code>**方法：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322105033192.png" alt="image-20220322105033192">&lt;/p>
&lt;p>上图标号1是将接受的Channel包装成NioSocketChannel存入List&lt;Object> readBuf列表中。标号2就是触发了NioServerSocketChannel所属ChannelPipeline的channelRead方法。&lt;/p>
&lt;p>**重点：这个触发NioServerSocketChannel的所属ChannelPipeline的channelRead方法就是从BossGroup转到WorkGroup处理读写的关键。**下面分析为什么？&lt;/p>
&lt;p>在调用 &lt;strong>&lt;code>ChannelFuture f = b.bind(port).sync()&lt;/code>&lt;/strong> 这段代码的时候，跟进bind的代码会发现ServerBootstrap#init方法中有这样的一段代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322110133556.png" alt="image-20220322110133556">&lt;/p>
&lt;p>我们就来分析一下这段标号①的代码。大致的意思就是：&lt;strong>给NioServerSocketChannel所属ChannelPipeline中增加一个ChannelInitializer，在ChannelInitializer同时有增加一个ServerBootstrapAcceptor实例对象(ServerBootstrapAcceptor其实就是ChannelInboundHandler)&lt;/strong> 。 那么这段代码何时触发呢？&lt;/p>
&lt;p>通过研究代码发现**&lt;code>ChannelInitializer#initChannel&lt;/code>** 是一个抽象方法，在**&lt;code>ChannelInitializer#channelRegistered&lt;/code>** 中触发：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322111138952.png" alt="image-20220322111138952">&lt;/p>
&lt;p>当NioServerSocketChannel所属ChannelPipeline触发channelRegistered，然后往ChannelPipeline中添加ServerBootstrapAcceptor。接下来就是看一下ServerBootstrapAcceptor的代码：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/mxsm/picture/main/netty/channelhanlder/image-20220322111803750.png" alt="image-20220322111803750">&lt;/p>
&lt;p>从上面图片标号①可以看出来ServerBootstrapAcceptor其实是一个ChannelInboundHandler。所以在当NioServerSocketChannel所属ChannelPipeline触发channelRead的时候也会触发ServerBootstrapAcceptor#channelRead方法，而在标号③的位置就是将NioSocketChannel对象实例注册到workerGroup上面进行后续的读写处理。&lt;/p>
&lt;p>&lt;strong>到这里就完成了整个有BossGroup线程到WorkGroup线程处理的转换&lt;/strong>&lt;/p>
&lt;h3 id="3-总结">3. 总结&lt;/h3>
&lt;p>BossGroup线程到WorkGroup线程处理的转换是通过ChannelPipeline和ChannelHandler的巧妙运用进行转换的。通过NioServerSocketChannel所属ChannelPipeline触发channelRead，在ChannelPipeline上触发所有的ChannelInboundHandler的channelRead方法，最终调用到ServerBootstrapAcceptor#channelRead方法。这个方法里面实现了将ServerSocketChannel交由workGroup处理后续的读写操作的转换工作。也和前面说的Netty的主从模型对应上了。&lt;/p>
&lt;blockquote>
&lt;p>我是蚂蚁背大象，文章对你有帮助点赞关注我，文章有不正确的地方请您斧正留言评论~谢谢&lt;/p>
&lt;/blockquote></description></item></channel></rss>