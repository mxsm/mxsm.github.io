<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>蚂蚁背大象 – ETCD</title><link>/middlewares/etcd/</link><description>Recent content in ETCD on 蚂蚁背大象</description><generator>Hugo -- gohugo.io</generator><atom:link href="/middlewares/etcd/index.xml" rel="self" type="application/rss+xml"/><item><title>Middlewares: ETCD</title><link>/middlewares/etcd/etcd/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>/middlewares/etcd/etcd/</guid><description>
&lt;h3 id="etcd选举leader过程">ETCD选举Leader过程&lt;/h3>
&lt;p>&lt;strong>ETCD集群节点的三个状态：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Leader&lt;/strong>&lt;/li>
&lt;li>&lt;strong>follower&lt;/strong> — 选举过程中的中间状态&lt;/li>
&lt;li>&lt;strong>candidate&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="etcd选举">ETCD选举&lt;/h4>
&lt;p>初始状态下，所有的集群节点都是 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> ，那么leader怎么选呢？每个 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 内部都维护了一个&lt;strong>随机&lt;/strong>的 &lt;strong>&lt;code>timer&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/etcd%E9%80%89%E4%B8%BE%E5%88%9D%E5%A7%8B%E8%BF%87%E7%A8%8B.jpg?raw=true" alt="图">&lt;/p>
&lt;p>当 &lt;strong>&lt;code>Timer&lt;/code>&lt;/strong> 到期还没节点主动联系它的话，当前节点改变状态由 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 变成 &lt;strong>&lt;code>candidate&lt;/code>&lt;/strong> 同时发出投票请求给其他人。有时候会有特殊情况，由于 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 内部维护的 &lt;strong>&lt;code>Timer&lt;/code>&lt;/strong> 是随机的可能出现两个或者多个 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 变成 &lt;strong>&lt;code>candidate&lt;/code>&lt;/strong> 的情况如下图：&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/etcd%E9%80%89%E4%B8%BE%E6%8A%95%E7%A5%A8%E8%BF%87%E7%A8%8B.jpg?raw=true" alt="图">&lt;/p>
&lt;p>图中 &lt;strong>S1&lt;/strong> 和 &lt;strong>S3&lt;/strong> 都变成了 &lt;strong>&lt;code>candidate&lt;/code>&lt;/strong>&lt;/p>
&lt;pre>&lt;code>投票的原则：每个follower一轮只能投一次票给一个candidate，
&lt;/code>&lt;/pre>&lt;p>对于相同条件的 &lt;strong>&lt;code>candidate&lt;/code>&lt;/strong> ， &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 采取&lt;strong>先来先投票的策略&lt;/strong>。 如果超过半数的 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 都认为其中的某一个做领导，那么这样新的 &lt;strong>&lt;code>leader&lt;/code>&lt;/strong> 就产生了。如下图 &lt;strong>S3&lt;/strong> 就变成了领导&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/etcd%E5%87%BA%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%80%99%E9%80%89%E8%80%85%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B.jpg?raw=true" alt="图">&lt;/p>
&lt;p>对于没有选上的 &lt;strong>S1&lt;/strong> 只能改变节点的状态由 &lt;strong>&lt;code>candidate&lt;/code>&lt;/strong> 变为 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 。&lt;/p>
&lt;p>选举完成后通过 &lt;strong>S3&lt;/strong> Leader定期发送心跳的方式来重置 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 自身维护的 &lt;strong>&lt;code>Timer&lt;/code>&lt;/strong> 不以至于 &lt;strong>&lt;code>Timer&lt;/code>&lt;/strong> 到期转变状态。&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/Etcdleader%E7%9A%84%E7%BB%B4%E6%8C%81%E8%BF%87%E7%A8%8B.jpg?raw=true" alt="图解">&lt;/p>
&lt;p>就和上面所说的一样如果 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 在 &lt;strong>&lt;code>Timer&lt;/code>&lt;/strong> 过期时间内还没收到 &lt;strong>&lt;code>Leader&lt;/code>&lt;/strong> 的心跳。那么 &lt;strong>&lt;code>follower&lt;/code>&lt;/strong> 开始又要进行下一轮 &lt;strong>&lt;code>Leader&lt;/code>&lt;/strong> 的选举了&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/leader%E5%87%BA%E9%97%AE%E9%A2%98%E5%86%8D%E4%B8%80%E6%AC%A1%E9%80%89%E4%B8%BE%E8%BF%87%E7%A8%8B.jpg?raw=true" alt="图">&lt;/p>
&lt;p>&lt;strong>&lt;code>Raft&lt;/code>&lt;/strong> 算法的大致原理就是这样。&lt;/p>
&lt;h4 id="etcd选举时候产生的问题">ETCD选举时候产生的问题&lt;/h4>
&lt;p>每个follower如果在自身的timer到期之后都会变成candidate去参与选举。所以就这个candidate身份而言，是没有特别条件的，每个follower都有机会参选。但是，在分布式的环境里，每个follower节点存储的数据是不一样的，考虑一下下图的情况，在这些节点经历了一些损坏和恢复。此时S4想当leader。&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/cache/ETCD/%E9%80%89%E4%B8%BE%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%8D%E5%90%88%E9%80%82%E7%9A%84%E5%80%99%E9%80%89%E8%80%85%E5%A4%84%E7%90%86.jpg?raw=true" alt="图">&lt;/p></description></item></channel></rss>