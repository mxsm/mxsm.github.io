<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>蚂蚁背大象 – Kafka</title><link>/middlewares/kafka/</link><description>Recent content in Kafka on 蚂蚁背大象</description><generator>Hugo -- gohugo.io</generator><atom:link href="/middlewares/kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>Middlewares: kafka基本知识</title><link>/middlewares/kafka/kafka-base/</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid>/middlewares/kafka/kafka-base/</guid><description>
&lt;h3 id="1-什么是主题和分区">1. 什么是主题和分区？&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>主题&lt;/strong>&lt;/p>
&lt;p>主题好比数据库的表或者文件系统里面的文件夹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分区&lt;/strong>&lt;/p>
&lt;p>分区好比数据库表的分表，或者文件夹中存放数据的子文件夹&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>一个主题包含多个分区1对N的情况，因此无法在整个个主题范围内保证消息的有序，但是可以保证单个分区内的消息顺序。因
为一个分区是一个类似FIFO的队列，然后先入的先出读取数据。
kafka通过分区来实现数据冗余和伸缩。分区可以分别在不同的机器上，一个主题可以横跨多个服务器。
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/MQ/Kafka/kafka-topic%E5%92%8C%E5%88%86%E5%8C%BA%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png?raw=true" alt="图解">&lt;/p>
&lt;h3 id="2-生产者和消费者">2 生产者和消费者&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>生产者&lt;/strong>&lt;/p>
&lt;p>创建消息，一般情况下，一个消息会发布到一个特定的主题上面，生产者默认的情况下把消息均衡的分配到主题的分区上面，而并不关系特定的消息会被写到哪个分区。&lt;strong>如果需要把消息直接写到指定的分区，这通常是通过消息键和分区器来实现的，分区器为键生成一个散列值，并将其映射到指定的分区上。生产者也可以使用自定义的分区器。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消费者&lt;/strong>&lt;/p>
&lt;p>消费者订阅一个或者多个主题，并且按照生产的顺序读取，消费者通过检查消息的偏移量来区分已读过的消息。偏移量是另一种元数据，kafka会把它添加到消息里面。在给定的分区里，每一个消息偏移量都是唯一的。消费者会把每个分区的偏移量量保存到zookeeper或者kafka。消费者关闭或者重启，状态不会丢失&lt;/p>
&lt;p>消费者是&lt;strong>消费者组的一部分&lt;/strong> 也就是说会有一个消费者多个消费者读取共同的主题。群组保证每个分区只能被一个消费者使用。但是一个消费者可以消费多个分区&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-broker和集群">3 broker和集群&lt;/h3>
&lt;p>一个独立的 &lt;strong>&lt;code>kafka&lt;/code>&lt;/strong> 服务器被称为一个 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 。接收来自生产者的消息，为消息设置偏移量，提交并且保存到磁盘上面。&lt;/p>
&lt;p>&lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 是群组的一部分。每个集群都要一个 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 同时充当了&lt;strong>集群的控制器&lt;/strong>的角色。 控制器负责管理工作，包括将分区分配给 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 和监控 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 。在集群中一个分区从属于一个 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> ,该 &lt;strong>broker&lt;/strong> 被称为分区的&lt;strong>首领&lt;/strong>。一个分区可以分配给多个 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 这个时候会发生分区复制&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/MQ/Kafka/kafka%E9%9B%86%E7%BE%A4%E5%88%86%E5%8C%BA%E5%A4%8D%E5%88%B6.png?raw=true" alt="图">&lt;/p>
&lt;h3 id="4-控制器">4 控制器&lt;/h3>
&lt;p>控制器其实就是一个 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> ,集群里第一个启动的 broker 通过在**&lt;code>zookeeper&lt;/code>** 创建临时节点让自己成为控制器。其他 **&lt;code>broker&lt;/code>** 创建的发现节点已经存在说明集群中已经有一个控制齐了。&lt;/p>
&lt;p>&lt;strong>控制的功能：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发现 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 离开集群(通过watch zookeeper路径)。控制器就知道哪些失去首领的分区需要一个新的首领。选举新的首领。&lt;/li>
&lt;li>发现有新的 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 加入集群，它会使用 &lt;strong>&lt;code>broker ID&lt;/code>&lt;/strong> 来检查新加入的 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 是否包含现有分区的副本。如果有通知发送给新加入的 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 和其他的 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> , 新的 &lt;strong>&lt;code>broker&lt;/code>&lt;/strong> 上的副本开始从首领那里复制消息。&lt;/li>
&lt;/ul>
&lt;p>控制器负责在节点加入或离开集群时进行分区首领选举&lt;/p>
&lt;h3 id="5-复制">5 复制&lt;/h3>
&lt;p>消息的复制是 &lt;strong>&lt;code>Kafka&lt;/code>&lt;/strong> 的架构核心&lt;/p>
&lt;p>&lt;strong>分区副本分为两种：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Leader副本&lt;/strong>&lt;/p>
&lt;p>每个分区都有一个首领副本 。 为了保证一致性，&lt;strong>所有生产者请求和消费者请求都会经过&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Follower副本&lt;/strong>&lt;/p>
&lt;p>首领 以外的副本都是跟随者副本。跟随者副本不处理来自客户端的请求，它们唯 一 的任务就是&lt;strong>从首领那里复制消息，保持与首领一致的状态&lt;/strong>。如果首领发生崩渍，其中的一个跟随者会被提升为新首领。(&lt;strong>崩溃发生通过Follower副本进行处理&lt;/strong>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Kafka处理请求的内部处理流程：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://github.com/mxsm/document/blob/master/image/MQ/Kafka/kafka%E8%AF%B7%E6%B1%82%E7%9A%84%E5%86%85%E9%83%A8%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91.jpg?raw=true" alt="图">&lt;/p>
&lt;p>每个 &lt;strong>&lt;code>Broker&lt;/code>&lt;/strong> 都保存了所有的主题信息、分区、副本信息、以及副本首领等等。&lt;/p></description></item></channel></rss>