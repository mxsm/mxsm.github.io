"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[80998],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(g,a(a({ref:n},c),{},{components:t})):r.createElement(g,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},19245:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const i={},a="Native Errors",l={unversionedId:"troubleshooting/native",id:"version-v5/troubleshooting/native",isDocsHomePage:!1,title:"Native Errors",description:"Code Signing errors",source:"@site/versioned_docs/version-v5/troubleshooting/native.md",sourceDirName:"troubleshooting",slug:"/troubleshooting/native",permalink:"/cn/docs/v5/troubleshooting/native",editUrl:"https://crowdin.com/project/ionic-docs",tags:[],version:"v5",frontMatter:{},sidebar:"version-v5/docs",previous:{title:"Runtime Issues",permalink:"/cn/docs/v5/troubleshooting/runtime"},next:{title:"CORS Errors",permalink:"/cn/docs/v5/troubleshooting/cors"}},s=[{value:"Code Signing errors",id:"code-signing-errors",children:[],level:2},{value:"Xcode build error 65",id:"xcode-build-error-65",children:[],level:2},{value:"Clashing Google Play Services versions",id:"clashing-google-play-services-versions",children:[],level:2}],p={toc:s};function c(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"native-errors"},"Native Errors"),(0,o.kt)("h2",{id:"code-signing-errors"},"Code Signing errors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Code Signing Error: Failed to create provisioning profile. The app ID \"com.csform.ionic.yellow\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again. Code Signing Error: No profiles for 'com.csform.ionic.yellow' were found: Xcode couldn't find any iOS App Development provisioning profiles matching 'com.csform.ionic.yellow'. Code Signing Error: Code signing is required for product type 'Application' in SDK 'iOS 11.1'\n")),(0,o.kt)("p",null,"Running an app on an iOS device requires a provisioning profile. If a provisioning profile has not been created yet follow these directions:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",null,"Set the [Package ID](/cn/docs/v5/reference/glossary#package-id)."),(0,o.kt)("p",{parentName:"li"},"For Capacitor, open the ",(0,o.kt)("inlineCode",{parentName:"p"},"capacitor.config.json")," file and modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"appId")," property."),(0,o.kt)("p",{parentName:"li"},"For Cordova, open the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.xml")," file and modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," attribute of the root element, ",(0,o.kt)("inlineCode",{parentName:"p"},"<widget>"),". See ",(0,o.kt)("a",{parentName:"p",href:"https://cordova.apache.org/docs/en/latest/config_ref/#widget"},"the Cordova documentation")," for more information.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",null,"Open the project in ",(0,o.kt)("b",null,"Xcode"),"."),(0,o.kt)("p",{parentName:"li"},"For Capacitor, run the following to open the app in Xcode:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ ionic capacitor open ios\n")),(0,o.kt)("p",{parentName:"li"},"For Cordova, open Xcode. Use ",(0,o.kt)("strong",{parentName:"p"},"File")," ","\xbb"," ",(0,o.kt)("strong",{parentName:"p"},"Open")," and locate the app. Open the app's ",(0,o.kt)("inlineCode",{parentName:"p"},"platforms/ios")," directory.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",null,"In ",(0,o.kt)("b",null,"Project navigator"),", select the project root to open the project editor. Under the **Identity** section, verify that the Package ID that was set matches the Bundle Identifier."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Xcode Identity Setup",src:t(36641).Z}))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",null,"In the same project editor, under the ",(0,o.kt)("b",null,"Signing")," section, ensure ",(0,o.kt)("b",null,"Automatically manage signing")," is enabled.")," Then, select a Development Team. Given a Development Team, Xcode will attempt to automatically prepare provisioning and signing.",(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Xcode Signing Setup",src:t(45465).Z})))),(0,o.kt)("h2",{id:"xcode-build-error-65"},"Xcode build error 65"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Error: Error code 65 for command: xcodebuild with args: -xcconfig,/Users/ionitron/projects/my-project/platforms/ios/cordova/build-debug.xcconfig,-workspace,SC project.xcworkspace,-scheme,SC project,-configuration,Debug,-sdk,iphonesimulator,-destination,platform=iOS Simulator,name=iPhone X,build,CONFIGURATION_BUILD_DIR=/Users/ionitron/projects/my-project/platforms/ios/build/emulator,SHARED_PRECOMPS_DIR=/Users/ionitron/projects/my-project/platforms/ios/build/sharedpch\n")),(0,o.kt)("p",null,"This error is an error code from Xcode that can be caused by provisioning issues or outdated cordova dependencies. To fix this error first make sure a provisioning profile has been generated using the above instructions and then try to ",(0,o.kt)("a",{parentName:"p",href:"/cn/docs/v5/developing/ios#running-with-xcode"},"run the app from Xcode"),"."),(0,o.kt)("p",null,"If this does not fix the error then run the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"rm -rf node_modules\nrm -rf platform\nnpm i\nionic cordova platform add ios\nionic cordova prepare ios\nionic cordova build ios --prod\n")),(0,o.kt)("p",null,"Once these commands have been ran a fresh build can be done."),(0,o.kt)("h2",{id:"clashing-google-play-services-versions"},"Clashing Google Play Services versions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Error: more than one library with package name com.google.android.gms\n")),(0,o.kt)("p",null,"This error is caused by two separate plugins trying to use different versions of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Google Play Services"),". To fix this issue make sure you are running ",(0,o.kt)("inlineCode",{parentName:"p"},"cordova")," version ",(0,o.kt)("inlineCode",{parentName:"p"},"7.1.0")," or higher and ",(0,o.kt)("inlineCode",{parentName:"p"},"cordova-android")," ",(0,o.kt)("inlineCode",{parentName:"p"},"6.3.0")," or higher. To install latest ",(0,o.kt)("inlineCode",{parentName:"p"},"cordova")," run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install cordova@latest\n")),(0,o.kt)("p",null,"and to update ",(0,o.kt)("inlineCode",{parentName:"p"},"cordova-android")," run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cordova platform update android\n")),(0,o.kt)("p",null,"Plugins that depend on ",(0,o.kt)("inlineCode",{parentName:"p"},"Google Play Services")," can now be updated to use the same version. For example, if ",(0,o.kt)("inlineCode",{parentName:"p"},"pluginA")," uses version 11.0 and ",(0,o.kt)("inlineCode",{parentName:"p"},"pluginB")," uses version 15.0 they can be updated to use the same version with the following snippet in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.xml")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<plugin name="pluginA" spec="npm">\n  <variable name="PLAY_SERVICES_VERSION" value="15.0.0"/>\n</plugin>\n<plugin name="pluginB" spec="npm">\n  <variable name="PLAY_SERVICES_VERSION" value="15.0.0" />\n</plugin>\n')))}c.isMDXComponent=!0},36641:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ios-xcode-identity-setup-810a91fa449112c7a3bc48e62d2ceb9b.png"},45465:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ios-xcode-signing-setup-9a189ccd440dedd98b3d54a19eb5e68c.png"}}]);