"use strict";(self.webpackChunkmxsm_website=self.webpackChunkmxsm_website||[]).push([[80378],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var i=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=c(t),u=l,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return t?i.createElement(h,a(a({ref:n},d),{},{components:t})):i.createElement(h,a({ref:n},d))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,a[1]=r;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},37783:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(67294);const l="tableOfContentsInline_0DDH";var o=t(25002);const a=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return i.createElement("div",{className:l},i.createElement(o.Z,{toc:n,minHeadingLevel:t,maxHeadingLevel:a,className:"table-of-contents",linkClassName:null}))}},25002:(e,n,t)=>{t.d(n,{Z:()=>r});var i=t(87462),l=t(67294),o=t(89521);function a(e){let{toc:n,className:t,linkClassName:i,isChild:o}=e;return n.length?l.createElement("ul",{className:o?void 0:t},n.map((e=>l.createElement("li",{key:e.id},l.createElement("a",{href:`#${e.id}`,className:i??void 0,dangerouslySetInnerHTML:{__html:e.value}}),l.createElement(a,{isChild:!0,toc:e.children,className:t,linkClassName:i}))))):null}function r(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:r="table-of-contents__link",linkActiveClassName:s,minHeadingLevel:c,maxHeadingLevel:d,...p}=e;const m=(0,o.LU)(),u=c??m.tableOfContents.minHeadingLevel,h=d??m.tableOfContents.maxHeadingLevel,f=(0,o.DA)({toc:n,minHeadingLevel:u,maxHeadingLevel:h}),g=(0,l.useMemo)((()=>{if(r&&s)return{linkClassName:r,linkActiveClassName:s,minHeadingLevel:u,maxHeadingLevel:h}}),[r,s,u,h]);return(0,o.Si)(g),l.createElement(a,(0,i.Z)({toc:f,className:t,linkClassName:r},p))}},58215:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(67294);const l=function(e){let{children:n,hidden:t,className:l}=e;return i.createElement("div",{role:"tabpanel",hidden:t,className:l},n)}},26396:(e,n,t)=>{t.d(n,{Z:()=>m});var i=t(87462),l=t(67294),o=t(72389),a=t(79443);const r=function(){const e=(0,l.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var s=t(89521),c=t(86010);const d="tabItem_vU9c";function p(e){var n,t;const{lazy:i,block:o,defaultValue:a,values:p,groupId:m,className:u}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??h.map((e=>{let{props:{value:n,label:t}}=e;return{value:n,label:t}})),g=(0,s.lx)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===a?a:a??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??(null==(t=h[0])?void 0:t.props.value);if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=r(),[N,I]=(0,l.useState)(k),y=[],{blockElementScrollPositionUntilNextRender:C}=(0,s.o5)();if(null!=m){const e=b[m];null!=e&&e!==N&&f.some((n=>n.value===e))&&I(e)}const x=e=>{const n=e.currentTarget,t=y.indexOf(n),i=f[t].value;i!==N&&(C(n),I(i),null!=m&&v(m,i))},S=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=y.indexOf(e.currentTarget)+1;t=y[n]||y[0];break}case"ArrowLeft":{const n=y.indexOf(e.currentTarget)-1;t=y[n]||y[y.length-1];break}}null==(n=t)||n.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":o},u)},f.map((e=>{let{value:n,label:t}=e;return l.createElement("li",{role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,className:(0,c.Z)("tabs__item",d,{"tabs__item--active":N===n}),key:n,ref:e=>y.push(e),onKeyDown:S,onFocus:x,onClick:x},t??n)}))),i?(0,l.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},h.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function m(e){const n=(0,o.Z)();return l.createElement(p,(0,i.Z)({key:String(n)},e))}},49679:(e,n,t)=>{t.d(n,{Z:()=>c});var i=t(87462),l=t(67294),o=t(86010),a=t(44996),r=t(39960);const s="encapsulationPill_mkeM";function c(e){let{type:n,...t}=e;const c=(0,a.Z)(`reference/glossary#${n}`);return l.createElement(r.default,(0,i.Z)({to:c},t,{className:(0,o.Z)(t.className,"encapsulation-pill",s)}),n)}},29800:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>I,default:()=>S,frontMatter:()=>N,metadata:()=>y,toc:()=>C});var i=t(87462),l=(t(67294),t(3905)),o=t(26396),a=t(58215),r=t(37783);const s={toc:[{value:"disabled",id:"disabled",children:[],level:3},{value:"position",id:"position",children:[],level:3},{value:"threshold",id:"threshold",children:[],level:3}]};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"disabled"},"disabled"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the infinite scroll will be hidden and scroll event listeners will be removed.",(0,l.kt)("br",null),(0,l.kt)("br",null),"Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disabled"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))))),(0,l.kt)("h3",{id:"position"},"position"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The position of the infinite scroll element. The value can be either ",(0,l.kt)("inlineCode",{parentName:"td"},"top")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"bottom"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"position"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"bottom" \uff5c "top"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"'bottom'"))))),(0,l.kt)("h3",{id:"threshold"},"threshold"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The threshold distance from the bottom of the content to call the ",(0,l.kt)("inlineCode",{parentName:"td"},"infinite")," output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of ",(0,l.kt)("inlineCode",{parentName:"td"},"10%")," for the ",(0,l.kt)("inlineCode",{parentName:"td"},"infinite")," output event to get called when the user has scrolled 10% from the bottom of the page. Use the value ",(0,l.kt)("inlineCode",{parentName:"td"},"100px")," when the scroll is within 100 pixels from the bottom of the page.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"threshold"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"'15%'"))))))}c.isMDXComponent=!0;const d={toc:[]};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ionInfinite")),(0,l.kt)("td",{parentName:"tr",align:null},"Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's ",(0,l.kt)("inlineCode",{parentName:"td"},"complete()")," method when your async operation has completed.")))))}p.isMDXComponent=!0;const m={toc:[{value:"complete",id:"complete",children:[],level:3}]};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"complete"},"complete"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"Call ",(0,l.kt)("inlineCode",{parentName:"td"},"complete()")," within the ",(0,l.kt)("inlineCode",{parentName:"td"},"ionInfinite")," output event handler when your async operation has completed. For example, the ",(0,l.kt)("inlineCode",{parentName:"td"},"loading")," state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request to add more items to a data list. Once the data has been received and UI updated, you then call this method to signify that the loading has completed. This method will change the infinite scroll's state from ",(0,l.kt)("inlineCode",{parentName:"td"},"loading")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"enabled"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Signature")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"complete() => Promise<void>"))))))}u.isMDXComponent=!0;const h={toc:[]};function f(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"No CSS shadow parts available for this component."))}f.isMDXComponent=!0;const g={toc:[]};function k(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"No CSS custom properties available for this component."))}k.isMDXComponent=!0;const b={toc:[]};function v(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"No slots available for this component."))}v.isMDXComponent=!0;t(49679);const N={title:"ion-infinite-scroll",hide_table_of_contents:!0,demoUrl:"/docs/demos/api/infinite-scroll/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/infinite-scroll/index.html"},I=void 0,y={unversionedId:"api/infinite-scroll",id:"api/infinite-scroll",isDocsHomePage:!1,title:"ion-infinite-scroll",description:"Infinite Scroller | ion-infinite-scroll Action Component",source:"@site/docs/api/infinite-scroll.md",sourceDirName:"api",slug:"/api/infinite-scroll",permalink:"/cn/docs/api/infinite-scroll",editUrl:"https://crowdin.com/project/ionic-docs",tags:[],version:"current",frontMatter:{title:"ion-infinite-scroll",hide_table_of_contents:!0,demoUrl:"/docs/demos/api/infinite-scroll/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/infinite-scroll/index.html"},sidebar:"api",previous:{title:"ion-row",permalink:"/cn/docs/api/row"},next:{title:"ion-infinite-scroll-content",permalink:"/cn/docs/api/infinite-scroll-content"}},C=[{value:"Infinite Scroll Content",id:"infinite-scroll-content",children:[],level:2},{value:"Custom Content",id:"custom-content",children:[],level:2},{value:"Usage with Virtual Scroll",id:"usage-with-virtual-scroll",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2},{value:"Interfaces",id:"interfaces",children:[{value:"InfiniteScrollCustomEvent",id:"infinitescrollcustomevent",children:[],level:3}],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Properties",id:"properties",children:[],level:2},{value:"Events",id:"events",children:[],level:2},{value:"Methods",id:"methods",children:[],level:2},{value:"CSS Shadow Parts",id:"css-shadow-parts",children:[],level:2},{value:"CSS Custom Properties",id:"css-custom-properties",children:[],level:2},{value:"Slots",id:"slots",children:[],level:2}],x={toc:C};function S(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,i.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("head",null,(0,l.kt)("title",null,"Infinite Scroller | ion-infinite-scroll Action Component"),(0,l.kt)("meta",{name:"description",content:"The ion-infinite-scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page."})),(0,l.kt)("h2",{className:"table-of-contents__title"},"Contents"),(0,l.kt)(r.Z,{toc:C,maxHeadingLevel:2,autogenerated:[c,p,u,f,k,v],mdxType:"TOCInline"}),(0,l.kt)("p",null,"The Infinite Scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page."),(0,l.kt)("p",null,"The expression assigned to the ",(0,l.kt)("inlineCode",{parentName:"p"},"ionInfinite")," event is called when the user reaches that defined distance. When this expression has finished any and all tasks, it should call the ",(0,l.kt)("inlineCode",{parentName:"p"},"complete()")," method on the infinite scroll instance."),(0,l.kt)("h2",{id:"infinite-scroll-content"},"Infinite Scroll Content"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll")," component has the infinite scroll logic. It requires a child component in order to display content. Ionic uses its ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," component by default. This component displays the infinite scroll and changes the look depending on the infinite scroll's state. It displays a spinner that looks best based on the platform the user is on. However, the default spinner can be changed and text can be added by setting properties on the ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," component."),(0,l.kt)("h2",{id:"custom-content"},"Custom Content"),(0,l.kt)("p",null,"Separating the ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," components allows developers to create their own content components, if desired. This content can contain anything, from an SVG element to elements with unique CSS animations."),(0,l.kt)("h2",{id:"usage-with-virtual-scroll"},"Usage with Virtual Scroll"),(0,l.kt)("p",null,"Infinite scroll requires a scroll container to function. When using a virtual scrolling solution, you will need to disable scrolling on the ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-content")," and indicate which element container is responsible for the scroll container with the ",(0,l.kt)("inlineCode",{parentName:"p"},".ion-content-scroll-host")," class target."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content scroll-y="false">\n  <virtual-scroll-element class="ion-content-scroll-host">\n    \x3c!-- Your virtual scroll content --\x3e\n  </virtual-scroll-element>\n  <ion-infinite-scroll>\n    <ion-infinite-scroll-content></ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,l.kt)("h2",{id:"accessibility"},"Accessibility"),(0,l.kt)("p",null,"Developers should assign the ",(0,l.kt)("inlineCode",{parentName:"p"},'role="feed"')," attribute to the scrollable list of items that are added to or removed from as the user scrolls."),(0,l.kt)("p",null,"Individual list items should either have ",(0,l.kt)("inlineCode",{parentName:"p"},'role="article"')," or use the ",(0,l.kt)("inlineCode",{parentName:"p"},"<article>")," element directly."),(0,l.kt)("p",null,"For example, when rendering a collection of items in an ",(0,l.kt)("inlineCode",{parentName:"p"},"ion-list"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content role="feed">\n  <ion-list>\n    <ion-item role="article">\n      First item\n    </ion-item>\n    <ion-item role="article">\n      Second item\n    </ion-item>\n    ...\n  </ion-list>\n\n  <ion-infinite-scroll>\n    <ion-infinite-scroll-content></ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,l.kt)("p",null,"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/feed_role"},"ARIA: feed role")," documentation for additional information."),(0,l.kt)("h2",{id:"interfaces"},"Interfaces"),(0,l.kt)("h3",{id:"infinitescrollcustomevent"},"InfiniteScrollCustomEvent"),(0,l.kt)("p",null,"While not required, this interface can be used in place of the ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomEvent")," interface for stronger typing with Ionic events emitted from this component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface InfiniteScrollCustomEvent extends CustomEvent {\n  target: HTMLIonInfiniteScrollElement;\n}\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)(o.Z,{groupId:"framework",defaultValue:"angular",values:[{value:"angular",label:"Angular"},{value:"javascript",label:"Javascript"},{value:"react",label:"React"},{value:"stencil",label:"Stencil"},{value:"vue",label:"Vue"}],mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"angular",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content>\n  <ion-button (click)="toggleInfiniteScroll()" expand="block">\n    Toggle Infinite Scroll\n  </ion-button>\n\n  <ion-list></ion-list>\n\n  <ion-infinite-scroll threshold="100px" (ionInfinite)="loadData($event)">\n    <ion-infinite-scroll-content\n      loadingSpinner="bubbles"\n      loadingText="Loading more data...">\n    </ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component, ViewChild } from '@angular/core';\nimport { IonInfiniteScroll } from '@ionic/angular';\n\n@Component({\n  selector: 'infinite-scroll-example',\n  templateUrl: 'infinite-scroll-example.html',\n  styleUrls: ['./infinite-scroll-example.css']\n})\nexport class InfiniteScrollExample {\n  @ViewChild(IonInfiniteScroll) infiniteScroll: IonInfiniteScroll;\n\n  constructor() {}\n\n  loadData(event) {\n    setTimeout(() => {\n      console.log('Done');\n      event.target.complete();\n\n      // App logic to determine if all data is loaded\n      // and disable the infinite scroll\n      if (data.length === 1000) {\n        event.target.disabled = true;\n      }\n    }, 500);\n  }\n\n  toggleInfiniteScroll() {\n    this.infiniteScroll.disabled = !this.infiniteScroll.disabled;\n  }\n}\n"))),(0,l.kt)(a.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content>\n  <ion-button onClick="toggleInfiniteScroll()" expand="block">\n    Toggle Infinite Scroll\n  </ion-button>\n\n  <ion-list></ion-list>\n\n  <ion-infinite-scroll threshold="100px" id="infinite-scroll">\n    <ion-infinite-scroll-content\n      loading-spinner="bubbles"\n      loading-text="Loading more data...">\n    </ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const infiniteScroll = document.getElementById('infinite-scroll');\n\ninfiniteScroll.addEventListener('ionInfinite', function(event) {\n  setTimeout(function() {\n    console.log('Done');\n    event.target.complete();\n\n    // App logic to determine if all data is loaded\n    // and disable the infinite scroll\n    if (data.length === 1000) {\n      event.target.disabled = true;\n    }\n  }, 500);\n});\n\nfunction toggleInfiniteScroll() {\n  infiniteScroll.disabled = !infiniteScroll.disabled;\n}\n"))),(0,l.kt)(a.Z,{value:"react",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'import { \n  IonButton,\n  IonContent, \n  IonHeader,\n  IonInfiniteScroll, \n  IonInfiniteScrollContent, \n  IonItem,\n  IonLabel,\n  IonList,  \n  IonPage, \n  IonTitle, \n  IonToolbar,\n  useIonViewWillEnter\n} from \'@ionic/react\';\nimport { useState } from \'react\';\n\nconst InfiniteScrollExample: React.FC = () => {\n  const [data, setData] = useState<string[]>([]);\n  const [isInfiniteDisabled, setInfiniteDisabled] = useState(false);\n  \n  const pushData = () => {\n    const max = data.length + 20;\n    const min = max - 20;\n    const newData = [];\n    for (let i = min; i < max; i++) {\n      newData.push(\'Item\' + i);\n    }\n    \n    setData([\n      ...data,\n      ...newData\n    ]);\n  }\n  const loadData = (ev: any) => {\n    setTimeout(() => {\n      pushData();\n      console.log(\'Loaded data\');\n      ev.target.complete();\n      if (data.length === 1000) {\n        setInfiniteDisabled(true);\n      }\n    }, 500);\n  }  \n  \n  useIonViewWillEnter(() => {\n    pushData();\n  });\n  \n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Blank</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonHeader collapse="condense">\n          <IonToolbar>\n            <IonTitle size="large">Blank</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        \n        <IonButton onClick={() => setInfiniteDisabled(!isInfiniteDisabled)} expand="block">\n          Toggle Infinite Scroll\n        </IonButton>\n        \n        <IonList>\n          {data.map((item, index) => {\n            return (\n              <IonItem key={index}>\n                <IonLabel>{item}</IonLabel>\n              </IonItem>\n            )\n          })}\n        </IonList>\n        \n        <IonInfiniteScroll\n          onIonInfinite={loadData}\n          threshold="100px"\n          disabled={isInfiniteDisabled}\n        >\n          <IonInfiniteScrollContent\n            loadingSpinner="bubbles"\n            loadingText="Loading more data..."\n          ></IonInfiniteScrollContent>\n        </IonInfiniteScroll>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default InfiniteScrollExample;\n'))),(0,l.kt)(a.Z,{value:"stencil",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Component, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'infinite-scroll-example',\n  styleUrl: 'infinite-scroll-example.css'\n})\nexport class InfiniteScrollExample {\n  private infiniteScroll: HTMLIonInfiniteScrollElement;\n\n  @State() data = [];\n\n  componentWillLoad() {\n    this.pushData();\n  }\n\n  pushData() {\n    const max = this.data.length + 20;\n    const min = max - 20;\n\n    for (var i = min; i < max; i++) {\n      this.data.push('Item ' + i);\n    }\n\n    // Stencil does not re-render when pushing to an array\n    // so create a new copy of the array\n    // https://stenciljs.com/docs/reactive-data#handling-arrays-and-objects\n    this.data = [\n      ...this.data\n    ];\n  }\n\n  loadData(ev) {\n    setTimeout(() => {\n      this.pushData();\n      console.log('Loaded data');\n      ev.target.complete();\n\n      // App logic to determine if all data is loaded\n      // and disable the infinite scroll\n      if (this.data.length === 1000) {\n        ev.target.disabled = true;\n      }\n    }, 500);\n  }\n\n  toggleInfiniteScroll() {\n    this.infiniteScroll.disabled = !this.infiniteScroll.disabled;\n  }\n\n  render() {\n    return [\n      <ion-content>\n        <ion-button onClick={() => this.toggleInfiniteScroll()} expand=\"block\">\n          Toggle Infinite Scroll\n        </ion-button>\n\n        <ion-list>\n          {this.data.map(item =>\n            <ion-item>\n              <ion-label>{item}</ion-label>\n            </ion-item>\n          )}\n        </ion-list>\n\n        <ion-infinite-scroll\n          ref={el => this.infiniteScroll = el}\n          onIonInfinite={(ev) => this.loadData(ev)}>\n          <ion-infinite-scroll-content\n            loadingSpinner=\"bubbles\"\n            loadingText=\"Loading more data...\">\n          </ion-infinite-scroll-content>\n        </ion-infinite-scroll>\n      </ion-content>\n    ];\n  }\n}\n"))),(0,l.kt)(a.Z,{value:"vue",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <ion-page>\n    <ion-content class="ion-padding">\n      <ion-button @click="toggleInfiniteScroll" expand="block">\n        Toggle Infinite Scroll\n      </ion-button>\n    \n      <ion-list>\n        <ion-item v-for="item in items" :key="item">\n          <ion-label>{{ item }}</ion-label>\n        </ion-item>\n      </ion-list>\n    \n      <ion-infinite-scroll\n        @ionInfinite="loadData($event)" \n        threshold="100px" \n        id="infinite-scroll"\n        :disabled="isDisabled"\n      >\n        <ion-infinite-scroll-content\n          loading-spinner="bubbles"\n          loading-text="Loading more data...">\n        </ion-infinite-scroll-content>\n      </ion-infinite-scroll>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang="ts">\nimport {\n  InfiniteScrollCustomEvent,\n  IonButton,\n  IonContent, \n  IonInfiniteScroll, \n  IonInfiniteScrollContent,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonPage\n } from \'@ionic/vue\';\nimport { defineComponent, ref } from \'vue\';\n \nexport default defineComponent({\n  components: {\n    IonButton,\n    IonContent, \n    IonInfiniteScroll, \n    IonInfiniteScrollContent,\n    IonItem,\n    IonLabel,\n    IonList,\n    IonPage\n  },\n  setup() {\n    const isDisabled = ref(false);\n    const toggleInfiniteScroll = () => {\n      isDisabled.value = !isDisabled.value;\n    }\n    const items = ref<number[]>([]);\n    const pushData = () => {\n      const max = items.value.length + 20;\n      const min = max - 20;\n      for (let i = min; i < max; i++) {\n        items.value.push(i);\n      }\n    }\n    \n    const loadData = (ev: InfiniteScrollCustomEvent) => {\n      setTimeout(() => {\n        pushData();\n        console.log(\'Loaded data\');\n        ev.target.complete();\n  \n        // App logic to determine if all data is loaded\n        // and disable the infinite scroll\n        if (items.value.length === 1000) {\n          ev.target.disabled = true;\n        }\n      }, 500);\n    }\n    \n    pushData();\n    \n    return {\n      isDisabled,\n      toggleInfiniteScroll,\n      loadData,\n      items\n    }\n  }\n});\n\n<\/script>\n')))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)(c,{mdxType:"Props"}),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)(p,{mdxType:"Events"}),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)(u,{mdxType:"Methods"}),(0,l.kt)("h2",{id:"css-shadow-parts"},"CSS Shadow Parts"),(0,l.kt)(f,{mdxType:"Parts"}),(0,l.kt)("h2",{id:"css-custom-properties"},"CSS Custom Properties"),(0,l.kt)(k,{mdxType:"CustomProps"}),(0,l.kt)("h2",{id:"slots"},"Slots"),(0,l.kt)(v,{mdxType:"Slots"}))}S.isMDXComponent=!0}}]);